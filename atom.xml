<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deschen Blog</title>
  
  <subtitle>以Java开发为主的个人博客，记录自己在学习、工作和成长的笔记和心得</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.deschen.cn/"/>
  <updated>2023-05-23T06:59:01.685Z</updated>
  <id>https://www.deschen.cn/</id>
  
  <author>
    <name>Deschen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式-解释器模式</title>
    <link href="https://www.deschen.cn/2022/02/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-15T15:12:35.000Z</published>
    <updated>2023-05-23T06:59:01.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-解释器模式"><a href="#设计模式-解释器模式" class="headerlink" title="设计模式-解释器模式"></a>设计模式-解释器模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：用于<strong>解析</strong>和<strong>解释</strong> <strong>语言</strong>的行为模式。定义统一<strong>解释</strong>的<strong>抽象类解释器接口</strong>，以及<strong>终结符解释器</strong>和<strong>非终结符解释器</strong>两种实现类。终结符解释器解释<strong>无法再分解的语言单元</strong>，非终结符解释器解释<strong>由终结符组成的语法规则</strong>，如表达式等。结合<strong>提供全局信息的上下文</strong>对语言进行解析和解释</li><li>主要用途：<ul><li>解析和解释语法规则，通过解释器逐个解释和执行规则</li><li>新增或者修改原有规则时，只需扩展新的解释器，无需修改原有代码</li></ul></li><li>代码：抽象类解释器、终止符解释器、非终止符解释器、提供全局信息的上下文</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><blockquote><p>案例参考《设计模式就该这样学》</p></blockquote><ul><li><p>以数字运算表达式为例：计算表达式的值</p></li><li><p>抽象类解释器：输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpreter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>终结符解释器：输出数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumberExpression</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpreter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>非终结符表达式：输出两个数字运算结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左操作数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Expression leftOperand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右边操作数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Expression rightOperand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String operator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryExpression</span><span class="params">(Expression leftOperand, String operator, Expression rightOperand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftOperand = leftOperand;</span><br><span class="line">        <span class="keyword">this</span>.operator = operator;</span><br><span class="line">        <span class="keyword">this</span>.rightOperand = rightOperand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpreter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operator) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                <span class="keyword">return</span> leftOperand.interpreter() + rightOperand.interpreter();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                <span class="keyword">return</span> leftOperand.interpreter() - rightOperand.interpreter();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                <span class="keyword">return</span> leftOperand.interpreter() * rightOperand.interpreter();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"/"</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == rightOperand.interpreter()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"被除数不能为0"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> leftOperand.interpreter() / rightOperand.interpreter();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"非法运算符: "</span> + operator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供全局信息的上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.deschen.designPattern.interpreter.expression;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> hanbin_chen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 算法上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathExpressionContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作数栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Expression&gt; numberStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;String&gt; operatorStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算表达式的值</span></span><br><span class="line"><span class="comment">     * 有括号先算括号里面的，在乘除，后加减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expression</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String expression)</span> </span>&#123;</span><br><span class="line">        numberStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        operatorStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表达式按照空格切割成字符</span></span><br><span class="line">        String[] symbols = formatExpression(expression).split(<span class="string">"\\s+"</span>);</span><br><span class="line">        <span class="comment">// 遍历字符</span></span><br><span class="line">        <span class="keyword">for</span> (String symbol : symbols) &#123;</span><br><span class="line">            <span class="comment">// 如果是数值，则入操作数栈</span></span><br><span class="line">            <span class="keyword">if</span> (isNumber(symbol)) &#123;</span><br><span class="line">                numberStack.push(<span class="keyword">new</span> NumberExpression(Integer.valueOf(symbol)));</span><br><span class="line">                System.out.println(<span class="string">"操作数入栈："</span> + symbol);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果是加减法</span></span><br><span class="line"><span class="comment">             * 1、如果前面有加减乘除，计算前面的表达式，更新操作符栈和操作数栈</span></span><br><span class="line"><span class="comment">             * 2、把操作符在入栈</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">            <span class="keyword">if</span> (isAdd(symbol) || isSub(symbol)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!operatorStack.isEmpty() &amp;&amp; (</span><br><span class="line">                        isAdd(operatorStack.peek()) || isSub(operatorStack.peek()) || isMulti(operatorStack.peek()) || isDiv(operatorStack.peek())</span><br><span class="line">                )) &#123;</span><br><span class="line">                    calculate(numberStack, operatorStack);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 操作符入栈</span></span><br><span class="line">                operatorStack.push(symbol);</span><br><span class="line">                System.out.println(<span class="string">"操作符入栈："</span> + symbol);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果是乘除</span></span><br><span class="line"><span class="comment">             * 1、如果操作符栈有乘除，计算前面表达式，更新操作符栈和操作数栈</span></span><br><span class="line"><span class="comment">             * 2、把操作符入栈</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (isMulti(symbol) || isDiv(symbol)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!operatorStack.isEmpty() &amp;&amp; (</span><br><span class="line">                        isMulti(operatorStack.peek()) || isDiv(operatorStack.peek())</span><br><span class="line">                )) &#123;</span><br><span class="line">                    calculate(numberStack, operatorStack);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 操作符入栈</span></span><br><span class="line">                operatorStack.push(symbol);</span><br><span class="line">                System.out.println(<span class="string">"操作符入栈："</span> + symbol);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果是左括号，则不做处理，直接入栈</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (isLeftBracket(symbol)) &#123;</span><br><span class="line">                <span class="comment">// 操作符入栈</span></span><br><span class="line">                operatorStack.push(symbol);</span><br><span class="line">                System.out.println(<span class="string">"操作符入栈："</span> + symbol);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果是有括号</span></span><br><span class="line"><span class="comment">             * 操作数栈出栈，直到左括号，计算括号里面的表达式</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (isRightBracket(symbol)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!isLeftBracket(operatorStack.peek())) &#123;</span><br><span class="line">                    calculate(numberStack, operatorStack);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 操作符出栈</span></span><br><span class="line">                String operator = operatorStack.pop();</span><br><span class="line">                System.out.println(<span class="string">"操作符出栈："</span> + operator);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 计算转换后的表达式</span></span><br><span class="line"><span class="comment">         * 因为转换后的表达式，已经把优先级高的执行完了，剩下的都是同级的，所以从右到左计算是不影响结果</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (!operatorStack.isEmpty()) &#123;</span><br><span class="line">            calculate(numberStack, operatorStack);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> numberStack.pop().interpreter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化表达式，使运算符和括号前后加入空格</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expression</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">formatExpression</span><span class="params">(String expression)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expression.replaceAll(<span class="string">"([+\\-*/()])"</span>, <span class="string">" $1 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算最新录入的表达式的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> numberStack 操作数栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operatorStack 操作符栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(Stack&lt;Expression&gt; numberStack, Stack&lt;String&gt; operatorStack)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 计算前面表达式</span></span><br><span class="line">        Expression rightNumber = numberStack.pop();</span><br><span class="line">        Expression leftNumber = numberStack.pop();</span><br><span class="line">        String operator = operatorStack.pop();</span><br><span class="line">        <span class="comment">// 计算值入栈</span></span><br><span class="line">        numberStack.push(<span class="keyword">new</span> BinaryExpression(leftNumber, operator, rightNumber));</span><br><span class="line">        System.out.println(<span class="string">"操作数出栈："</span> + leftNumber.interpreter());</span><br><span class="line">        System.out.println(<span class="string">"操作数出栈："</span> + rightNumber.interpreter());</span><br><span class="line">        System.out.println(<span class="string">"操作符出栈："</span> + operator);</span><br><span class="line">        System.out.println(<span class="string">"操作数入栈："</span> + numberStack.peek().interpreter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是加法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAdd</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">"+"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是减法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSub</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">"-"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是乘法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMulti</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是除法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isDiv</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是左括号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLeftBracket</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">"("</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是右括号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRightBracket</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.matches(<span class="string">"\\d+"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isOperator</span><span class="params">(<span class="keyword">char</span> symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MathExpressionContext context = <span class="keyword">new</span> MathExpressionContext();</span><br><span class="line">        String expression = <span class="string">"1-2+3-4+5*(6/2*7+(8*9))-10*11-12"</span>;</span><br><span class="line">        <span class="keyword">int</span> result = context.calculate(expression);</span><br><span class="line">        System.out.println(<span class="string">"Result: "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">操作数入栈：<span class="number">1</span></span><br><span class="line">操作符入栈：-</span><br><span class="line">操作数入栈：<span class="number">2</span></span><br><span class="line">操作数出栈：<span class="number">1</span></span><br><span class="line">操作数出栈：<span class="number">2</span></span><br><span class="line">操作符出栈：-</span><br><span class="line">操作数入栈：-<span class="number">1</span></span><br><span class="line">操作符入栈：+</span><br><span class="line">操作数入栈：<span class="number">3</span></span><br><span class="line">操作数出栈：-<span class="number">1</span></span><br><span class="line">操作数出栈：<span class="number">3</span></span><br><span class="line">操作符出栈：+</span><br><span class="line">操作数入栈：<span class="number">2</span></span><br><span class="line">操作符入栈：-</span><br><span class="line">操作数入栈：<span class="number">4</span></span><br><span class="line">操作数出栈：<span class="number">2</span></span><br><span class="line">操作数出栈：<span class="number">4</span></span><br><span class="line">操作符出栈：-</span><br><span class="line">操作数入栈：-<span class="number">2</span></span><br><span class="line">操作符入栈：+</span><br><span class="line">操作数入栈：<span class="number">5</span></span><br><span class="line">操作符入栈：*</span><br><span class="line">操作符入栈：(</span><br><span class="line">操作数入栈：<span class="number">6</span></span><br><span class="line">操作符入栈：/</span><br><span class="line">操作数入栈：<span class="number">2</span></span><br><span class="line">操作数出栈：<span class="number">6</span></span><br><span class="line">操作数出栈：<span class="number">2</span></span><br><span class="line">操作符出栈：/</span><br><span class="line">操作数入栈：<span class="number">3</span></span><br><span class="line">操作符入栈：*</span><br><span class="line">操作数入栈：<span class="number">7</span></span><br><span class="line">操作数出栈：<span class="number">3</span></span><br><span class="line">操作数出栈：<span class="number">7</span></span><br><span class="line">操作符出栈：*</span><br><span class="line">操作数入栈：<span class="number">21</span></span><br><span class="line">操作符入栈：+</span><br><span class="line">操作符入栈：(</span><br><span class="line">操作数入栈：<span class="number">8</span></span><br><span class="line">操作符入栈：*</span><br><span class="line">操作数入栈：<span class="number">9</span></span><br><span class="line">操作数出栈：<span class="number">8</span></span><br><span class="line">操作数出栈：<span class="number">9</span></span><br><span class="line">操作符出栈：*</span><br><span class="line">操作数入栈：<span class="number">72</span></span><br><span class="line">操作符出栈：(</span><br><span class="line">操作数出栈：<span class="number">21</span></span><br><span class="line">操作数出栈：<span class="number">72</span></span><br><span class="line">操作符出栈：+</span><br><span class="line">操作数入栈：<span class="number">93</span></span><br><span class="line">操作符出栈：(</span><br><span class="line">操作数出栈：<span class="number">5</span></span><br><span class="line">操作数出栈：<span class="number">93</span></span><br><span class="line">操作符出栈：*</span><br><span class="line">操作数入栈：<span class="number">465</span></span><br><span class="line">操作数出栈：-<span class="number">2</span></span><br><span class="line">操作数出栈：<span class="number">465</span></span><br><span class="line">操作符出栈：+</span><br><span class="line">操作数入栈：<span class="number">463</span></span><br><span class="line">操作符入栈：-</span><br><span class="line">操作数入栈：<span class="number">10</span></span><br><span class="line">操作符入栈：*</span><br><span class="line">操作数入栈：<span class="number">11</span></span><br><span class="line">操作数出栈：<span class="number">10</span></span><br><span class="line">操作数出栈：<span class="number">11</span></span><br><span class="line">操作符出栈：*</span><br><span class="line">操作数入栈：<span class="number">110</span></span><br><span class="line">操作数出栈：<span class="number">463</span></span><br><span class="line">操作数出栈：<span class="number">110</span></span><br><span class="line">操作符出栈：-</span><br><span class="line">操作数入栈：<span class="number">353</span></span><br><span class="line">操作符入栈：-</span><br><span class="line">操作数入栈：<span class="number">12</span></span><br><span class="line">操作数出栈：<span class="number">353</span></span><br><span class="line">操作数出栈：<span class="number">12</span></span><br><span class="line">操作符出栈：-</span><br><span class="line">操作数入栈：<span class="number">341</span></span><br><span class="line">输出结果: <span class="number">341</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-解释器模式&quot;&gt;&lt;a href=&quot;#设计模式-解释器模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-解释器模式&quot;&gt;&lt;/a&gt;设计模式-解释器模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="解释器模式" scheme="https://www.deschen.cn/tags/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-状态模式</title>
    <link href="https://www.deschen.cn/2022/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-14T13:23:24.000Z</published>
    <updated>2023-05-18T08:35:42.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-状态模式"><a href="#设计模式-状态模式" class="headerlink" title="设计模式-状态模式"></a>设计模式-状态模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义提供<strong>行为</strong>的<strong>状态接口</strong>，对象根据<strong>内部状态不同</strong>，<strong>改变其执行行为</strong></li><li>主要用途：<ul><li>对象多个状态且不同状态之间转换，执行不同的行为</li><li>避免大量条件判断</li></ul></li><li>代码：状态接口、封装行为的状态、包含状态的对象</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>订单状态转换为例：待支付 -&gt; 已支付 -&gt; 待发货 -&gt; 已发货 -&gt; 已完成</p></li><li><p>状态接口：订单状态接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行对应状态的行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体行为的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 待支付</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingPayState</span> <span class="keyword">implements</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行待支付逻辑"</span>);</span><br><span class="line">        System.out.println(<span class="string">"更新订单状态为：已支付"</span>);</span><br><span class="line">        order.setState(<span class="keyword">new</span> PaidState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已支付</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaidState</span> <span class="keyword">implements</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行已支付逻辑"</span>);</span><br><span class="line">        System.out.println(<span class="string">"更新订单状态：待发货"</span>);</span><br><span class="line">        order.setState(<span class="keyword">new</span> PendingShipState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 待发货</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingShipState</span> <span class="keyword">implements</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行待发货逻辑"</span>);</span><br><span class="line">        System.out.println(<span class="string">"更新订单状态：已发货"</span>);</span><br><span class="line">        order.setState(<span class="keyword">new</span> ShippedState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已发货</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShippedState</span> <span class="keyword">implements</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行已发货逻辑"</span>);</span><br><span class="line">        System.out.println(<span class="string">"更新订单状态：已完成"</span>);</span><br><span class="line">        order.setState(<span class="keyword">new</span> CompleteState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已完成</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompleteState</span> <span class="keyword">implements</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行已完成逻辑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包含状态的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OrderState state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">new</span> PendingPayState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.execute(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(OrderState state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order = <span class="keyword">new</span> Order(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        order.process();</span><br><span class="line">        order.process();</span><br><span class="line">        order.process();</span><br><span class="line">        order.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">执行待支付逻辑</span><br><span class="line">更新订单状态为：已支付</span><br><span class="line">执行已支付逻辑</span><br><span class="line">更新订单状态：待发货</span><br><span class="line">执行待发货逻辑</span><br><span class="line">更新订单状态：已发货</span><br><span class="line">执行已发货逻辑</span><br><span class="line">更新订单状态：已完成</span><br><span class="line">执行已完成逻辑</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-状态模式&quot;&gt;&lt;a href=&quot;#设计模式-状态模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-状态模式&quot;&gt;&lt;/a&gt;设计模式-状态模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="状态模式" scheme="https://www.deschen.cn/tags/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-命令模式</title>
    <link href="https://www.deschen.cn/2022/02/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-13T14:14:21.000Z</published>
    <updated>2023-05-17T07:54:21.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-命令模式"><a href="#设计模式-命令模式" class="headerlink" title="设计模式-命令模式"></a>设计模式-命令模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：将<strong>请求</strong>封装成<strong>命令对象</strong>，使<strong>发送者</strong>和<strong>接收者</strong>解耦，不需要了解<strong>执行细节</strong></li><li>主要用途：<ul><li>解耦请求发送者和接收者，发送者只需发送命令，这只需执行命令，不需要了解执行细节</li><li>支持请求的排队、记录、撤销和重做等操作</li><li>提供了一种可扩展的方式来组织和管理命令。方便添加和移除命令，无需改动现有代码</li></ul></li><li>代码：命令接口、具体命令、命令队列（按需）</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件版本保存和回退为例，结合<strong>文件备忘录案例</strong></p></li><li><p>命令接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**     * 执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 撤回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体命令：上传文件，同一文件标识上传，会覆盖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadFileCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileManager fileManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File file;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UploadFileCommand</span><span class="params">(FileManager fileManager, File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileManager = fileManager;</span><br><span class="line">        <span class="keyword">this</span>.file = file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fileManager.uploadFile(file);</span><br><span class="line">        System.out.println(<span class="string">"上次文件："</span> + file.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileMemento lastVersion = fileManager.rollbackPreVersion(file.getFileId());</span><br><span class="line">        file.restoreFromMemento(lastVersion);</span><br><span class="line">        System.out.println(<span class="string">"撤回上一版文件："</span> + file.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命令队列：保存命令集合，使其顺序执行或撤回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Command&gt; queue = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        queue.add(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeCommands</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Command command : queue) &#123;</span><br><span class="line">            command.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undoReverseCommands</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = queue.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            queue.get(i).undo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileManager fileManager = <span class="keyword">new</span> FileManagerImpl();</span><br><span class="line">        CommandQueue commandQueue = <span class="keyword">new</span> CommandQueue();</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="number">1L</span>, <span class="string">"test.doc"</span>, <span class="number">1024L</span>, <span class="string">"Hello World Version"</span>, <span class="string">"张三"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1L</span>; i &lt;= <span class="number">10L</span>; i++) &#123;</span><br><span class="line">            File uploadFile = <span class="keyword">new</span> File(<span class="number">1L</span>, <span class="string">"test"</span> + i + <span class="string">".doc"</span>, <span class="number">1024L</span>, <span class="string">"Hello World Version"</span> + i, <span class="string">"张三"</span>);</span><br><span class="line">            System.out.println(<span class="string">"第"</span> + i + <span class="string">"版文件: "</span> + uploadFile.toString());</span><br><span class="line">            UploadFileCommand uploadFileCommand = <span class="keyword">new</span> UploadFileCommand(fileManager, uploadFile);</span><br><span class="line">            commandQueue.addCommand(uploadFileCommand);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========队列执行命令==========="</span>);</span><br><span class="line">        commandQueue.executeCommands();</span><br><span class="line">        file.restoreFromMemento(fileManager.getLastVersion(file.getFileId()));</span><br><span class="line">        System.out.println(<span class="string">"当前文件："</span> + file.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        测试时，二选一，因为公用一个file，会受到上一个版本影响</span></span><br><span class="line"><span class="comment">//        System.out.println("=========队列执行撤销命令===========");</span></span><br><span class="line"><span class="comment">//        commandQueue.undoReverseCommands();</span></span><br><span class="line"><span class="comment">//        file.restoreFromMemento(fileManager.getLastVersion(file.getFileId()));</span></span><br><span class="line"><span class="comment">//        System.out.println("当前文件：" + file.toString());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">第<span class="number">1</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test1.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version1'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">2</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test2.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version2'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">3</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test3.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version3'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">4</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test4.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version4'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">5</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test5.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version5'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">6</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test6.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version6'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">7</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test7.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version7'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">8</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test8.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version8'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">9</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test9.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version9'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">10</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test10.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version10'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">=========队列执行撤销命令===========</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test10.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version10'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test9.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version9'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test8.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version8'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test7.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version7'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test6.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version6'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test5.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version5'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test4.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version4'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test3.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version3'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test2.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version2'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test1.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version1'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">当前文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line"></span><br><span class="line">=========队列执行撤销命令===========</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test10.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version10'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test9.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version9'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test8.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version8'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test7.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version7'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test6.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version6'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test5.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version5'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test4.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version4'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test3.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version3'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test2.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version2'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test1.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version1'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">当前文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version'</span>, operator=<span class="string">'张三'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-命令模式&quot;&gt;&lt;a href=&quot;#设计模式-命令模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-命令模式&quot;&gt;&lt;/a&gt;设计模式-命令模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="命令模式" scheme="https://www.deschen.cn/tags/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-备份录模式</title>
    <link href="https://www.deschen.cn/2022/02/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E4%BB%BD%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E4%BB%BD%E5%BD%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-12T12:15:24.000Z</published>
    <updated>2023-05-17T07:54:02.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-备份录模式"><a href="#设计模式-备份录模式" class="headerlink" title="设计模式-备份录模式"></a>设计模式-备份录模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个封装<strong>对象内部状态</strong>的<strong>备份类</strong>，通过<strong>管理者</strong> <strong>保存和恢复对象的状态</strong></li><li>主要用途：<ul><li>提供对象快照和恢复机制，不破坏对象的情况下，保存和恢复对象状态。例如：文件版本保存和撤回</li><li>支持对象的撤销和重做机制</li><li>提供对象状态的历史记录</li></ul></li><li>代码：待备份类、备份类、管理者</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件版本保存和回退为例</p></li><li><p>带备份对象：文件类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long fileId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> fileSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作人&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 这里加这个字段，主要表示为什么&lt;b&gt;备份类不直接继承被备份的类&lt;/b&gt;：因为备份类主要是&lt;b&gt;备份应该备份的内容&lt;/b&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String operator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(Long fileId, String fileName, <span class="keyword">long</span> fileSize, String content, String operator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileId = fileId;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.operator = operator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileMemento <span class="title">backup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileMemento(fileId, fileName, fileSize, content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreFromMemento</span><span class="params">(FileMemento fileMemento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fileMemento) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.fileId = fileMemento.getFileId();</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileMemento.getFileName();</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileMemento.getFileSize();</span><br><span class="line">        <span class="keyword">this</span>.content = fileMemento.getContent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getFileId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileId</span><span class="params">(Long fileId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileId = fileId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFileSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileSize</span><span class="params">(<span class="keyword">long</span> fileSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"File&#123;"</span> +</span><br><span class="line">                <span class="string">"fileId="</span> + fileId +</span><br><span class="line">                <span class="string">", fileName='"</span> + fileName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", fileSize="</span> + fileSize +</span><br><span class="line">                <span class="string">", content='"</span> + content + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", operator='"</span> + operator + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>备份类：备份文件名字、内容等，添加备份标识（属于哪个文件、备份时间）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMemento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long fileId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> fileSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备份时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileMemento</span><span class="params">(Long fileId, String fileName, <span class="keyword">long</span> fileSize, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileId = fileId;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getFileId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileId</span><span class="params">(Long fileId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileId = fileId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFileSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileSize</span><span class="params">(<span class="keyword">long</span> fileSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimestamp</span><span class="params">(Date timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FileMemento&#123;"</span> +</span><br><span class="line">                <span class="string">", timestamp="</span> + timestamp +</span><br><span class="line">                <span class="string">"&#125; "</span> + <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>管理者：保存和恢复对象状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管理者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * 保存文件并备份</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(File file)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取最新一版文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileId 文件标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">FileMemento <span class="title">getLastVersion</span><span class="params">(Long fileId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚到上一版本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileId 文件标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">FileMemento <span class="title">rollbackPreVersion</span><span class="params">(Long fileId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileManagerImpl</span> <span class="keyword">implements</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, File&gt; FILE_STORAGE = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, List&lt;FileMemento&gt;&gt; FILE_MEMENTO_STORAGE = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        FILE_STORAGE.put(file.getFileId(), file);</span><br><span class="line">        List&lt;FileMemento&gt; fileMementos = FILE_MEMENTO_STORAGE.get(file.getFileId());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fileMementos) &#123;</span><br><span class="line">            fileMementos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        fileMementos.add(file.backup());</span><br><span class="line">        FILE_MEMENTO_STORAGE.put(file.getFileId(), fileMementos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileMemento <span class="title">getLastVersion</span><span class="params">(Long fileId)</span> </span>&#123;</span><br><span class="line">        List&lt;FileMemento&gt; fileMementos = FILE_MEMENTO_STORAGE.get(fileId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fileMementos || fileMementos.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileMementos.get(fileMementos.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileMemento <span class="title">rollbackPreVersion</span><span class="params">(Long fileId)</span> </span>&#123;</span><br><span class="line">        List&lt;FileMemento&gt; fileMementos = FILE_MEMENTO_STORAGE.get(fileId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fileMementos || fileMementos.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileMemento fileMemento = fileMementos.remove(fileMementos.size() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fileMemento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileManager fileManager = <span class="keyword">new</span> FileManagerImpl();</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="number">1L</span>, <span class="string">"test.doc"</span>, <span class="number">1024L</span>, <span class="string">"Hello World"</span>, <span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(<span class="string">"第一版文件: "</span> + file.toString());</span><br><span class="line">        fileManager.uploadFile(file);</span><br><span class="line">        <span class="comment">// 修改文件名</span></span><br><span class="line">        file.setContent(<span class="string">"Yes I can"</span>);</span><br><span class="line">        fileManager.uploadFile(file);</span><br><span class="line">        System.out.println(<span class="string">"第二版文件: "</span> + file.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上一版文件</span></span><br><span class="line">        FileMemento lastVersion = fileManager.getLastVersion(file.getFileId());</span><br><span class="line">        file.restoreFromMemento(lastVersion);</span><br><span class="line">        System.out.println(<span class="string">"上一版文件: "</span> + file.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">第一版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World'</span>&#125;</span><br><span class="line">第二版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Yes I can'</span>&#125;</span><br><span class="line">上一版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-备份录模式&quot;&gt;&lt;a href=&quot;#设计模式-备份录模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-备份录模式&quot;&gt;&lt;/a&gt;设计模式-备份录模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="备份录模式" scheme="https://www.deschen.cn/tags/%E5%A4%87%E4%BB%BD%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-职责链模式</title>
    <link href="https://www.deschen.cn/2022/02/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-11T14:12:35.000Z</published>
    <updated>2023-05-16T06:25:10.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-迭代器模式"><a href="#设计模式-迭代器模式" class="headerlink" title="设计模式-迭代器模式"></a>设计模式-迭代器模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>抽象处理器</strong> 和 <strong>多个具体处理器</strong>，构建<strong>链结构</strong>，将请求<strong>处理和传递</strong>给下一个处理器</li><li>主要用途：<ul><li>解耦发送者和接口者，提高代码的灵活和可维护性</li><li>根据具体场景，灵活配置处理链，无需修改已有代码</li></ul></li><li>代码：抽象类处理器、具体处理器</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件上传服务为例：上传文件前，需要校验参数是否合理、是否有权限上传、是否存在病毒等</p></li><li><p>抽象类处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> FileHandler nextHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加下一个文件处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileHandler 文件处理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextHandler</span><span class="params">(FileHandler fileHandler)</span> </span>&#123;</span><br><span class="line">        nextHandler = fileHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主要逻辑</span></span><br><span class="line"><span class="comment">     * 1、处理这个处理器自身逻辑</span></span><br><span class="line"><span class="comment">     * 2、下一个处理器处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleFile</span><span class="params">(File file)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileHandler <span class="title">getNextHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理链</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileProcessChain</span> <span class="keyword">extends</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加下一个处理器，构建成链</span></span><br><span class="line"><span class="comment">     * 不同于其他处理器，其他处理器只需添加下一个处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileHandler 文件处理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextHandler</span><span class="params">(FileHandler fileHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == nextHandler) &#123;</span><br><span class="line">            nextHandler = fileHandler;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            FileHandler currentHandler = nextHandler;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">null</span> != currentHandler.getNextHandler()) &#123;</span><br><span class="line">                currentHandler = nextHandler.getNextHandler();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            currentHandler.setNextHandler(fileHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断下一个处理是否存在</span></span><br><span class="line"><span class="comment">     *      不存在，则跳过</span></span><br><span class="line"><span class="comment">     *      存在，则下一个处理器处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == nextHandler) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nextHandler.handleFile(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateParamFileHandler</span> <span class="keyword">extends</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件参数校验 file: "</span> + file.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != nextHandler) &#123;</span><br><span class="line">            nextHandler.handleFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//权限处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionFileHandler</span> <span class="keyword">extends</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、获取用户信息</span></span><br><span class="line"><span class="comment">     * 2、判断该用户是否有操作该文件夹的权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前用户是否有权限操作"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != nextHandler) &#123;</span><br><span class="line">            nextHandler.handleFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 病毒扫描处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VirusScanFileHandler</span> <span class="keyword">extends</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件病毒扫描"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != nextHandler) &#123;</span><br><span class="line">            nextHandler.handleFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServiceImpl</span> <span class="keyword">implements</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件服务：上传文件 文件路径："</span> + filePath + <span class="string">" 文件名："</span> + fileName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File();</span><br><span class="line">        file.setFilePath(<span class="string">"/resources"</span>);</span><br><span class="line">        file.setFileName(<span class="string">"test.doc"</span>);</span><br><span class="line">        file.setFileSize(<span class="number">10000L</span>);</span><br><span class="line">        file.setContent(<span class="string">"Hello World"</span>);</span><br><span class="line"></span><br><span class="line">        FileProcessChain fileProcessChain = <span class="keyword">new</span> FileProcessChain();</span><br><span class="line">        fileProcessChain.setNextHandler(<span class="keyword">new</span> ValidateParamFileHandler());</span><br><span class="line">        fileProcessChain.setNextHandler(<span class="keyword">new</span> PermissionFileHandler());</span><br><span class="line">        fileProcessChain.setNextHandler(<span class="keyword">new</span> VirusScanFileHandler());</span><br><span class="line"></span><br><span class="line">        fileProcessChain.handleFile(file);</span><br><span class="line"></span><br><span class="line">        FileService fileService = <span class="keyword">new</span> FileServiceImpl();</span><br><span class="line">        fileService.uploadFile(file.getFilePath(), file.getFileName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">文件参数校验 file: File&#123;filePath=<span class="string">'/resources'</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">10000</span>, content=Hello World&#125;</span><br><span class="line">当前用户是否有权限操作</span><br><span class="line">文件病毒扫描</span><br><span class="line">文件服务：上传文件 文件路径：/resources 文件名：test.doc</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-迭代器模式&quot;&gt;&lt;a href=&quot;#设计模式-迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-迭代器模式&quot;&gt;&lt;/a&gt;设计模式-迭代器模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="职责链模式" scheme="https://www.deschen.cn/tags/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-迭代器模式</title>
    <link href="https://www.deschen.cn/2022/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-10T14:45:54.000Z</published>
    <updated>2023-05-16T02:15:39.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-迭代器模式"><a href="#设计模式-迭代器模式" class="headerlink" title="设计模式-迭代器模式"></a>设计模式-迭代器模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>迭代器接口</strong>，和<strong>特定规则的对象的迭起器</strong>，根据其规则<strong>遍历对象</strong></li><li>主要用途：<ul><li>用于遍历聚合对象的场景，例如：图书馆的书籍</li><li>复杂数据结构遍历，例如：树形结构（文件树）</li></ul></li><li>优势：将对象实现和编辑逻辑分离，提供统一接口，简化对集合对象操作和管理</li><li>代码：迭代器接口、对象迭代器实现</li><li>PS：迭代器接口可以是<code>JDK</code>提供的<code>java.util.Iterator</code> 或者自定义</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件树的遍历，两种遍历模式</p><ul><li>先序遍历文件树</li><li>根据指定文件名，向上遍历其父文件，到根文件结束</li></ul></li><li><p>迭代器：采用JDK自带的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先序遍历迭代器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptPreorderIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Dept</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dept&gt; depts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Iterator&lt;Dept&gt;&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptPreorderIterator</span><span class="params">(List&lt;Dept&gt; depts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.depts = depts;</span><br><span class="line">        <span class="comment">// 初始化栈，顶级部门迭代器 入栈</span></span><br><span class="line">        Dept root = root(depts);</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != root) &#123;</span><br><span class="line">            stack.push(Collections.singletonList(root).iterator());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取顶级部门</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> depts</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Dept <span class="title">root</span><span class="params">(List&lt;Dept&gt; depts)</span> </span>&#123;</span><br><span class="line">        Dept root = <span class="keyword">null</span>;</span><br><span class="line">        Iterator&lt;Dept&gt; deptItr = depts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (deptItr.hasNext()) &#123;</span><br><span class="line">            Dept dept = deptItr.next();</span><br><span class="line">            <span class="keyword">if</span> (dept.isRoot()) &#123;</span><br><span class="line">                root = dept;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断有没有下一个子节点集合迭代器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先判断栈是否有值，如果没有，则返回false，因为没有起点迭代器</span></span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 判断该迭代器是否存在部门，如果没有，则迭代器出栈（证明上一个部门到底了），获取上一个栈的迭代器（上一个部门的父部门迭代器，用于遍历同级部门）</span></span><br><span class="line">            Iterator&lt;Dept&gt; currentItr = stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (!currentItr.hasNext()) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">return</span> hasNext();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNext()) &#123;</span><br><span class="line">            Iterator&lt;Dept&gt; deptItr = stack.peek();</span><br><span class="line">            Dept dept = deptItr.next();</span><br><span class="line">            <span class="comment">// 获取该部门是否有子部门集合，有值则入栈（栈是先进后出，后进先执行，这里是为了遍历其子部门），无值证明该部门到底了</span></span><br><span class="line">            List&lt;Dept&gt; children = children(dept);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != children &amp;&amp; children.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                stack.push(children.iterator());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dept;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"部门集合没有顶级部门，无法遍历"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定部门的子部门集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 指定部门</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Dept&gt; <span class="title">children</span><span class="params">(Dept parent)</span> </span>&#123;</span><br><span class="line">        List&lt;Dept&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Iterator&lt;Dept&gt; deptItr = <span class="keyword">this</span>.depts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (deptItr.hasNext()) &#123;</span><br><span class="line">            Dept dept = deptItr.next();</span><br><span class="line">            <span class="keyword">if</span> (parent.getId().equals(dept.getParentId())) &#123;</span><br><span class="line">                children.add(dept);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上遍历迭代器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptUpwardIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Dept</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dept&gt; depts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dept current;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptUpwardIterator</span><span class="params">(List&lt;Dept&gt; depts, Dept current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.depts = depts;</span><br><span class="line">        <span class="keyword">this</span>.current = current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == depts || depts.size() == <span class="number">0</span> || current.isRoot()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Dept&gt; iterator = depts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Dept dept = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (dept.getId().equals(current.getParentId())) &#123;</span><br><span class="line">                current = dept;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Dept&gt; depts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Dept root = <span class="keyword">new</span> Dept(<span class="number">0L</span>, <span class="string">"0"</span>, -<span class="number">1L</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        depts.add(root);</span><br><span class="line">        Long id = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long i = <span class="number">0L</span>; i &lt;= <span class="number">3L</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Long j = <span class="number">0L</span>; j &lt; <span class="number">3L</span>; j++) &#123;</span><br><span class="line">                id++;</span><br><span class="line">                Integer level = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0L</span>) &#123;</span><br><span class="line">                    level = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Dept child = <span class="keyword">new</span> Dept(id, id.toString(), i, j.intValue(), level);</span><br><span class="line">                depts.add(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"先序遍历"</span>);</span><br><span class="line">        Iterator iterator = <span class="keyword">new</span> DeptPreorderIterator(depts);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"向上遍历"</span>);</span><br><span class="line">        Dept special = depts.get(<span class="number">10</span>);</span><br><span class="line">        iterator = <span class="keyword">new</span> DeptUpwardIterator(depts, special);</span><br><span class="line">        System.out.println(special);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">先序遍历</span><br><span class="line">Dept&#123;id=<span class="number">0</span>, name=<span class="string">'0'</span>, parentId=-<span class="number">1</span>, sort=<span class="number">0</span>, level=<span class="number">0</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">1</span>, name=<span class="string">'1'</span>, parentId=<span class="number">0</span>, sort=<span class="number">0</span>, level=<span class="number">1</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">4</span>, name=<span class="string">'4'</span>, parentId=<span class="number">1</span>, sort=<span class="number">0</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">5</span>, name=<span class="string">'5'</span>, parentId=<span class="number">1</span>, sort=<span class="number">1</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">6</span>, name=<span class="string">'6'</span>, parentId=<span class="number">1</span>, sort=<span class="number">2</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">2</span>, name=<span class="string">'2'</span>, parentId=<span class="number">0</span>, sort=<span class="number">1</span>, level=<span class="number">1</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">7</span>, name=<span class="string">'7'</span>, parentId=<span class="number">2</span>, sort=<span class="number">0</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">8</span>, name=<span class="string">'8'</span>, parentId=<span class="number">2</span>, sort=<span class="number">1</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">9</span>, name=<span class="string">'9'</span>, parentId=<span class="number">2</span>, sort=<span class="number">2</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">3</span>, name=<span class="string">'3'</span>, parentId=<span class="number">0</span>, sort=<span class="number">2</span>, level=<span class="number">1</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">10</span>, name=<span class="string">'10'</span>, parentId=<span class="number">3</span>, sort=<span class="number">0</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">11</span>, name=<span class="string">'11'</span>, parentId=<span class="number">3</span>, sort=<span class="number">1</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">12</span>, name=<span class="string">'12'</span>, parentId=<span class="number">3</span>, sort=<span class="number">2</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">向上遍历</span><br><span class="line">Dept&#123;id=<span class="number">10</span>, name=<span class="string">'10'</span>, parentId=<span class="number">3</span>, sort=<span class="number">0</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">3</span>, name=<span class="string">'3'</span>, parentId=<span class="number">0</span>, sort=<span class="number">2</span>, level=<span class="number">1</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">0</span>, name=<span class="string">'0'</span>, parentId=-<span class="number">1</span>, sort=<span class="number">0</span>, level=<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-迭代器模式&quot;&gt;&lt;a href=&quot;#设计模式-迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-迭代器模式&quot;&gt;&lt;/a&gt;设计模式-迭代器模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="迭代器模式" scheme="https://www.deschen.cn/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-观察者模式</title>
    <link href="https://www.deschen.cn/2022/02/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-09T13:11:12.000Z</published>
    <updated>2023-05-12T09:00:33.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-观察者模式"><a href="#设计模式-观察者模式" class="headerlink" title="设计模式-观察者模式"></a>设计模式-观察者模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>主题</strong>和<strong>一组观察者</strong>，将观察者注入主题中，主题状态改变<strong>通知</strong>观察者对象</li><li>主要用途：<ul><li>用于多个对象之间的消息传递场景</li><li>观察对象状态变化场景</li></ul></li><li>代码：主题类、观察者接口、具体观察者</li><li>PS：在Web项目中，观察者模式主要被<strong>消息中间件替代</strong>，因为观察者模式无法物理上解耦</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件服务：文件上传、下载时，索引服务要新增、删除索引，并通知相关人员</p><ul><li>主题：文件服务</li><li>观察者：索引服务、通知服务</li></ul></li><li><p>主题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileSubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer 观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(FileObserver observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer 观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">detach</span><span class="params">(FileObserver observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSubjectImpl</span> <span class="keyword">implements</span> <span class="title">FileSubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;FileObserver&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(FileObserver observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(FileObserver observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件服务：上传文件 文件路径："</span> + filePath + <span class="string">" 文件名："</span> + fileName);</span><br><span class="line"></span><br><span class="line">        FileOperation operation = <span class="keyword">new</span> FileOperation();</span><br><span class="line">        operation.setAction(FileOperation.Action.UPLOAD);</span><br><span class="line">        operation.setFilePath(filePath);</span><br><span class="line">        operation.setFileName(fileName);</span><br><span class="line">        notifyObservers(operation);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件服务：删除文件 文件路径："</span> + filePath + <span class="string">" 文件名："</span> + fileName);</span><br><span class="line"></span><br><span class="line">        FileOperation operation = <span class="keyword">new</span> FileOperation();</span><br><span class="line">        operation.setAction(FileOperation.Action.DELETE);</span><br><span class="line">        operation.setFilePath(filePath);</span><br><span class="line">        operation.setFileName(fileName);</span><br><span class="line">        notifyObservers(operation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(FileOperation operation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通知各个文件观察者"</span>);</span><br><span class="line">        <span class="keyword">for</span> (FileObserver observer : observers) &#123;</span><br><span class="line">            observer.notify(operation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 观察者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">(FileOperation operation)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOperation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Action action;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">getAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAction</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.action = action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFilePath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilePath</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FileOperation&#123;"</span> +</span><br><span class="line">                <span class="string">"action="</span> + action +</span><br><span class="line">                <span class="string">", filePath='"</span> + filePath + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", fileName='"</span> + fileName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Action &#123;</span><br><span class="line"></span><br><span class="line">        UPLOAD,</span><br><span class="line"></span><br><span class="line">        DELETE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSearchObserver</span> <span class="keyword">implements</span> <span class="title">FileObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(FileOperation operation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operation.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> UPLOAD:</span><br><span class="line">                addIndex(operation);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DELETE:</span><br><span class="line">                removeIndex(operation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addIndex</span><span class="params">(FileOperation operation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件索引服务： 新增索引 operation: "</span> + operation.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeIndex</span><span class="params">(FileOperation operation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件索引服务： 删除索引 operation: "</span> + operation.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileNotifyObserver</span> <span class="keyword">implements</span> <span class="title">FileObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(FileOperation operation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operation.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> UPLOAD:</span><br><span class="line">                System.out.println(<span class="string">"通知服务： 文件路径："</span> + operation.getFilePath() + <span class="string">"新增文件："</span> + operation.getFileName());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DELETE:</span><br><span class="line">                System.out.println(<span class="string">"通知服务： 文件路径："</span> + operation.getFilePath() + <span class="string">"删除文件："</span> + operation.getFileName());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileObserver searchObserver = <span class="keyword">new</span> FileSearchObserver();</span><br><span class="line">        FileObserver notifyObserver = <span class="keyword">new</span> FileNotifyObserver();</span><br><span class="line"></span><br><span class="line">        FileSubjectImpl fileSubject = <span class="keyword">new</span> FileSubjectImpl();</span><br><span class="line">        fileSubject.attach(searchObserver);</span><br><span class="line">        fileSubject.attach(notifyObserver);</span><br><span class="line"></span><br><span class="line">        fileSubject.uploadFile(<span class="string">"/resource"</span>, <span class="string">"test.doc"</span>);</span><br><span class="line">        fileSubject.deleteFile(<span class="string">"/resource"</span>, <span class="string">"test01.doc"</span>);</span><br><span class="line"></span><br><span class="line">        fileSubject.detach(notifyObserver);</span><br><span class="line">        fileSubject.uploadFile(<span class="string">"/resource"</span>, <span class="string">"test02.doc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">文件服务：上传文件 文件路径：/resource 文件名：test.doc</span><br><span class="line">通知各个文件观察者</span><br><span class="line">文件索引服务： 新增索引 operation: FileOperation&#123;action=UPLOAD, filePath=<span class="string">'/resource'</span>, fileName=<span class="string">'test.doc'</span>&#125;</span><br><span class="line">通知服务： 文件路径：/resource新增文件：test.doc</span><br><span class="line">文件服务：删除文件 文件路径：/resource 文件名：test01.doc</span><br><span class="line">通知各个文件观察者</span><br><span class="line">文件索引服务： 删除索引 operation: FileOperation&#123;action=DELETE, filePath=<span class="string">'/resource'</span>, fileName=<span class="string">'test01.doc'</span>&#125;</span><br><span class="line">通知服务： 文件路径：/resource删除文件：test01.doc</span><br><span class="line">文件服务：上传文件 文件路径：/resource 文件名：test02.doc</span><br><span class="line">通知各个文件观察者</span><br><span class="line">文件索引服务： 新增索引 operation: FileOperation&#123;action=UPLOAD, filePath=<span class="string">'/resource'</span>, fileName=<span class="string">'test02.doc'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-观察者模式&quot;&gt;&lt;a href=&quot;#设计模式-观察者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-观察者模式&quot;&gt;&lt;/a&gt;设计模式-观察者模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="观察者模式" scheme="https://www.deschen.cn/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-模板模式</title>
    <link href="https://www.deschen.cn/2022/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-08T15:41:32.000Z</published>
    <updated>2023-05-12T08:33:23.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-模板模式"><a href="#设计模式-模板模式" class="headerlink" title="设计模式-模板模式"></a>设计模式-模板模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>模板</strong>来<strong>固定</strong>算法或行为的<strong>流程</strong>，<strong>其中一些子步骤</strong>由<strong>子类</strong>实现</li><li>主要用途：希望不改变整体结构的基础上，通过子类来扩展或者修改某些步骤</li><li>代码：模板抽象类，具体实现类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>已发送验证码为例，验证码的流程基本是固定的</p><ul><li>发送验证码流程<ul><li>生成验证码</li><li>保存验证码</li><li>发送验证码</li></ul></li><li>校验验证码流程<ul><li>获取验证码</li><li>校验验证码（是否存在，是否相等）</li></ul></li></ul></li><li><p>基础类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证码状态码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CodeStatus &#123;</span><br><span class="line"></span><br><span class="line">    EQUAL,</span><br><span class="line"></span><br><span class="line">    NON_EQUAL,</span><br><span class="line"></span><br><span class="line">    NON_EXISTENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">get</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(String uniqueKey)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">get</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(String uniqueKey)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Object&gt; cacheMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        cacheMap.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cacheMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String uniqueKey)</span> </span>&#123;</span><br><span class="line">        cacheMap.remove(uniqueKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>模板抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证码模板</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeProcessor</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Code</span>, <span class="title">P</span> <span class="keyword">extends</span> <span class="title">CodeParameter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Cache cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeProcessor</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 发送验证码</span></span><br><span class="line"><span class="comment">//     * @param param 生成验证码参数</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    public void sendCode(P param) &#123;</span></span><br><span class="line"><span class="comment">//        T code = generateCode(param);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        cacheCode(param, code);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        sendCode(param, code);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送验证码-测试&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 主要用于测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 生成验证码参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendCode</span><span class="params">(P param)</span> </span>&#123;</span><br><span class="line">        T code = generateCode(param);</span><br><span class="line"></span><br><span class="line">        cacheCode(param, code);</span><br><span class="line"></span><br><span class="line">        sendCode(param, code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> code.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 带校验的验证码参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CodeStatus <span class="title">validateCode</span><span class="params">(P param)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断参数是否符合要求</span></span><br><span class="line">        <span class="keyword">if</span> (isBlank(param.getCode()) || isBlank(param.getUniqueKey())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数不合规范，属性code | uniqueKey不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取验证码</span></span><br><span class="line">        CodeParameter cacheCode = getCacheCode(param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断缓存验证码是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (isBlank(cacheCode.getCode())) &#123;</span><br><span class="line">            <span class="keyword">return</span> CodeStatus.NON_EXISTENT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断缓存验证码是否与输入的验证码相等</span></span><br><span class="line">        <span class="keyword">if</span> (cacheCode.getCode().equals(param.getCode())) &#123;</span><br><span class="line">            cache.remove(cacheCode.getUniqueKey());</span><br><span class="line">            <span class="keyword">return</span> CodeStatus.EQUAL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CodeStatus.NON_EQUAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码生成</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">generateCode</span><span class="params">(P param)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成验证码唯一标识，做为缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">generateUniqueKey</span><span class="params">(P param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> param.getUniqueKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存验证码&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 如果覆盖该方法，也要同时覆盖&#123;<span class="doctag">@link</span> CodeProcessor#getCacheCode(cn.deschen.designPattern.template.validate.CodeParameter)&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cacheCode</span><span class="params">(P param, T code)</span> </span>&#123;</span><br><span class="line">        cache.set(generateUniqueKey(param), code.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取保存的验证码&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 如果覆盖改方法，也要同时覆盖&#123;<span class="doctag">@link</span> CodeProcessor#cacheCode(cn.deschen.designPattern.template.validate.CodeParameter, cn.deschen.designPattern.template.validate.Code)&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> CodeParameter <span class="title">getCacheCode</span><span class="params">(P param)</span> </span>&#123;</span><br><span class="line">        String uniqueKey = generateUniqueKey(param);</span><br><span class="line"></span><br><span class="line">        String cacheCode = (String) cache.get(uniqueKey);</span><br><span class="line"></span><br><span class="line">        CodeParameter codeParameter = <span class="keyword">new</span> CodeParameter(uniqueKey)&#123;&#125;;</span><br><span class="line">        codeParameter.setCode(cacheCode);</span><br><span class="line">        <span class="keyword">return</span> codeParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(P param, T code)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 字符串参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isBlank</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == value || value.trim().length() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证码抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Code</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证码入参抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeParameter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String uniqueKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeParameter</span><span class="params">(String uniqueKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uniqueKey = uniqueKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUniqueKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uniqueKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUniqueKey</span><span class="params">(String uniqueKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uniqueKey = uniqueKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(String length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图片验证码实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现模板方法中：生成验证码和发送验证码步骤</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCodeProcessor</span> <span class="keyword">extends</span> <span class="title">CodeProcessor</span>&lt;<span class="title">ImageCode</span>, <span class="title">ImageCodeParameter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageCodeProcessor</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ImageCode <span class="title">generateCode</span><span class="params">(ImageCodeParameter param)</span> </span>&#123;</span><br><span class="line">        String height = !isBlank(param.getHeight()) ? param.getHeight() : <span class="string">"100"</span>;</span><br><span class="line">        String width = !isBlank(param.getWidth()) ? param.getWidth() : <span class="string">"200"</span>;</span><br><span class="line">        String length = !isBlank(param.getLength()) ? param.getLength() : <span class="string">"6"</span>;</span><br><span class="line"></span><br><span class="line">        DefaultKaptcha defaultKaptcha = defaultKaptcha(height, width, length);</span><br><span class="line">        String code = defaultKaptcha.createText();</span><br><span class="line">        BufferedImage image = defaultKaptcha.createImage(code);</span><br><span class="line"></span><br><span class="line">        ImageCode imageCode = <span class="keyword">new</span> ImageCode(code, image);</span><br><span class="line">        <span class="keyword">return</span> imageCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(ImageCodeParameter param, ImageCode code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ImageIO.write(code.getImage(), <span class="string">"JPEG"</span>, param.getOutputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"发送验证码失败, 异常信息："</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"生成图片验证码，code："</span> + code.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成用于验证码图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height 图片高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width 图片宽度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 图片长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DefaultKaptcha <span class="title">defaultKaptcha</span><span class="params">(String height, String width, String length)</span> </span>&#123;</span><br><span class="line">        DefaultKaptcha defaultKaptcha = <span class="keyword">new</span> DefaultKaptcha();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 图片宽</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.image.width"</span>, width);</span><br><span class="line">        <span class="comment">// 图片高</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.image.height"</span>, height);</span><br><span class="line">        <span class="comment">// 验证码长度</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.char.length"</span>, length);</span><br><span class="line">        Config config = <span class="keyword">new</span> Config(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片验证码实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCode</span> <span class="keyword">extends</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BufferedImage image;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageCode</span><span class="params">(String code, BufferedImage image)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(code);</span><br><span class="line">        <span class="keyword">this</span>.image = image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedImage <span class="title">getImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图片验证码参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCodeParameter</span> <span class="keyword">extends</span> <span class="title">CodeParameter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OutputStream outputStream;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageCodeParameter</span><span class="params">(String uniqueKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(uniqueKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(String height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(String width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OutputStream <span class="title">getOutputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> outputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOutputStream</span><span class="params">(OutputStream outputStream)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.outputStream = outputStream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>短信验证码实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现模板方法中：生成验证码和发送验证码步骤</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeProcessor</span> <span class="keyword">extends</span> <span class="title">CodeProcessor</span>&lt;<span class="title">SmsCode</span>, <span class="title">SmsCodeParameter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsCodeProcessor</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SmsCode <span class="title">generateCode</span><span class="params">(SmsCodeParameter param)</span> </span>&#123;</span><br><span class="line">        Integer length = !isBlank(param.getLength()) ? <span class="number">6</span> : Integer.valueOf(param.getLength());</span><br><span class="line">        <span class="comment">// 范围 10的(length-1)次方到9*10的(length-1)次方</span></span><br><span class="line">        Double dCode = (Math.random() * <span class="number">9</span> + <span class="number">1</span>) * Math.pow(<span class="number">10</span>, length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsCode(String.valueOf(dCode.intValue()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(SmsCodeParameter param, SmsCode code)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String log = builder.append(<span class="string">"生成短信验证码，发送方："</span>).append(param.getSender())</span><br><span class="line">                .append(<span class="string">"\t发送验证码："</span>).append(code.getCode())</span><br><span class="line">                .append(<span class="string">"\t给接收方："</span>).append(param.getReceiver()).toString();</span><br><span class="line">        System.out.println(log);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 缓存服务</span></span><br><span class="line">        Cache cache = <span class="keyword">new</span> LocalCache();</span><br><span class="line"></span><br><span class="line">        imageCode(cache);</span><br><span class="line"></span><br><span class="line">        smsCode(cache);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">smsCode</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 发送短信验证码</span></span><br><span class="line">        String smsUniqueKey = <span class="string">"smsKey"</span>;</span><br><span class="line">        SmsCodeParameter smsParam = <span class="keyword">new</span> SmsCodeParameter(smsUniqueKey);</span><br><span class="line">        smsParam.setSender(<span class="string">"15113011111"</span>);</span><br><span class="line">        smsParam.setReceiver(<span class="string">"15113022222"</span>);</span><br><span class="line">        smsParam.setLength(<span class="string">"5"</span>);</span><br><span class="line">        CodeProcessor codeProcessor = <span class="keyword">new</span> SmsCodeProcessor(cache);</span><br><span class="line">        String code = codeProcessor.sendCode(smsParam);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验验证码</span></span><br><span class="line">        System.out.println(code);</span><br><span class="line"></span><br><span class="line">        SmsCodeParameter validateImageParam = <span class="keyword">new</span> SmsCodeParameter(smsUniqueKey);</span><br><span class="line">        validateImageParam.setCode(code);</span><br><span class="line">        CodeStatus result = codeProcessor.validateCode(validateImageParam);</span><br><span class="line">        System.out.println(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">imageCode</span><span class="params">(Cache cache)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 发送图片验证码</span></span><br><span class="line">        String imageUniqueKey = <span class="string">"imageKey"</span>;</span><br><span class="line">        ImageCodeParameter imageParam = <span class="keyword">new</span> ImageCodeParameter(imageUniqueKey);</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test01.jpeg"</span>);</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        imageParam.setOutputStream(fileOutputStream);</span><br><span class="line">        CodeProcessor codeProcessor = <span class="keyword">new</span> ImageCodeProcessor(cache);</span><br><span class="line">        String code = codeProcessor.sendCode(imageParam);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验验证码</span></span><br><span class="line">        System.out.println(code);</span><br><span class="line"></span><br><span class="line">        ImageCodeParameter validateImageParam = <span class="keyword">new</span> ImageCodeParameter(imageUniqueKey);</span><br><span class="line">        validateImageParam.setCode(code);</span><br><span class="line">        CodeStatus result = codeProcessor.validateCode(validateImageParam);</span><br><span class="line">        System.out.println(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">生成图片验证码，code：e5x24n</span><br><span class="line">校验结果：EQUAL</span><br><span class="line">生成短信验证码，发送方：<span class="number">15113011111</span>发送验证码：<span class="number">534196</span>给接收方：<span class="number">15113022222</span></span><br><span class="line">校验结果：EQUAL</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-模板模式&quot;&gt;&lt;a href=&quot;#设计模式-模板模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-模板模式&quot;&gt;&lt;/a&gt;设计模式-模板模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="模板模式" scheme="https://www.deschen.cn/tags/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-策略模式</title>
    <link href="https://www.deschen.cn/2022/02/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-07T12:23:20.000Z</published>
    <updated>2023-05-11T06:48:34.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-策略模式"><a href="#设计模式-策略模式" class="headerlink" title="设计模式-策略模式"></a>设计模式-策略模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念: 定义一个<strong>策略接口</strong> 和 <strong>一组具体的策略类</strong>，选择策略实现不同算法或行为</li><li>主要用途<ul><li>多个相同功能，但操作不同的类，根据需要选择</li><li>大量条件并且每个条件行为不同</li></ul></li><li>代码：策略接口、一组具体的策略类</li><li>与适配者模式的区别<ul><li>相同点：<strong>结构相似</strong>，都是对一个功能接口，多个实现类</li><li>不同点：<ul><li>适配器模式：适配器只是针对第三方接口的操作进行适配，体现在实现类上</li><li>策略模式：一个策略接口+一组具体策略实现类，体现在功能上</li></ul></li></ul></li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件存储服务为例：选择不同文件存储策略，上传文件</p></li><li><p>存储策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体存储策略：阿里云OSS和Minio</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssStorageStrategy</span> <span class="keyword">implements</span> <span class="title">StorageStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"阿里云OSS上传文件成功,文件名: "</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioStorageStrategy</span> <span class="keyword">implements</span> <span class="title">StorageStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Minio上传文件成功,文件名: "</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件服务：选择策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServiceImpl</span> <span class="keyword">implements</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StorageStrategy storageStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileServiceImpl</span><span class="params">(StorageStrategy storageStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storageStrategy = storageStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"数据保存到数据库，文件名："</span> + fileName);</span><br><span class="line">        <span class="comment">// 使用设置好的策略</span></span><br><span class="line">        storageStrategy.uploadFile(filePath, fileName);</span><br><span class="line">        System.out.println(<span class="string">"发送消息通知相关人员"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 两种文件策略</span></span><br><span class="line">        StorageStrategy ossStorageStrategy = <span class="keyword">new</span> OssStorageStrategy();</span><br><span class="line">        StorageStrategy minioStorageStrategy = <span class="keyword">new</span> MinioStorageStrategy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件服务，选择具体策略，实现功能</span></span><br><span class="line">        FileServiceImpl fileService = <span class="keyword">new</span> FileServiceImpl(ossStorageStrategy);</span><br><span class="line">        fileService.uploadFile(<span class="string">"/resources"</span>, <span class="string">"test.txt"</span>);</span><br><span class="line"></span><br><span class="line">        fileService = <span class="keyword">new</span> FileServiceImpl(minioStorageStrategy);</span><br><span class="line">        fileService.uploadFile(<span class="string">"/resources"</span>, <span class="string">"test.txt"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-策略模式&quot;&gt;&lt;a href=&quot;#设计模式-策略模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-策略模式&quot;&gt;&lt;/a&gt;设计模式-策略模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="策略模式" scheme="https://www.deschen.cn/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-代理模式</title>
    <link href="https://www.deschen.cn/2022/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-06T14:40:20.000Z</published>
    <updated>2023-05-10T15:28:00.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-代理模式"><a href="#设计模式-代理模式" class="headerlink" title="设计模式-代理模式"></a>设计模式-代理模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念: 定义一个对象的<strong>代理类</strong>，通过<strong>代理类</strong>控制<strong>对象的访问</strong></li><li>主要用途<ul><li>远程代理：代理不同空间的对象，隐藏对象具体细节</li><li>虚拟代理：延迟加载对象，对象创建成本高，通过代理模式延迟创建</li></ul></li><li>代码：代理类、被代理的对象</li><li>与装饰者模式的区别<ul><li>相同点：<strong>结构</strong>上跟装饰者模式<strong>相似</strong>，都是通过<strong>包装对象</strong>来增强功能，不需要修改原有的对象结构</li><li>不同点：<ul><li>代理模式：控制对象的访问，即在访问对象前和后，执行额外操作</li><li>装饰者模式：除了增加额外操作外，还能<strong>修改原有的行为</strong></li></ul></li></ul></li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以装饰者模式的用户服务为例：记录日志、保存加密的用户信息、展示解密的用户信息</p></li><li><p>原有的类/接口，被代理的对象<code>UserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> String account;</span><br><span class="line">      <span class="keyword">private</span> String password;</span><br><span class="line">      <span class="keyword">private</span> String mobile;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// getter 和 toString 方法</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">          <span class="keyword">private</span> User user;</span><br><span class="line">  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              user = <span class="keyword">new</span> User();</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> Builder <span class="title">setAccount</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">              user.account = account;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> Builder <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">              user.password = password;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> Builder <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">              user.mobile = mobile;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> User <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> user;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 用户服务接口</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 创建用户</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span></span>;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 展示用户信息</span></span><br><span class="line">      <span class="function">User <span class="title">showUserInfo</span><span class="params">(String account)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 用户服务实现</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, User&gt; storage = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span> </span>&#123;</span><br><span class="line">          User.Builder builder = <span class="keyword">new</span> User.Builder();</span><br><span class="line">          User user = builder.setAccount(account)</span><br><span class="line">                  .setPassword(password)</span><br><span class="line">                  .setMobile(mobile).builder();</span><br><span class="line">          storage.put(account, user);</span><br><span class="line">          System.out.println(<span class="string">"用户创建成功 user: "</span> + user.toString());</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> User <span class="title">showUserInfo</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">          User user = storage.get(account);</span><br><span class="line">          <span class="keyword">return</span> user;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 原先用户服务用例</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">          userService.createUser(<span class="string">"admin"</span>, <span class="string">"admin123"</span>, <span class="string">"15113088283"</span>);</span><br><span class="line">          User admin = userService.showUserInfo(<span class="string">"admin"</span>);</span><br><span class="line">          System.out.println(<span class="string">"用户信息 admin: "</span> + admin.toString());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">用户创建成功 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br><span class="line">用户信息 admin: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作用户外，新增日志功能、保存加密用户信息和展示解密用户功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceProxy</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64Encryptor.encrypt(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decrypt</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64Encryptor.decrypt(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"日志记录 调用方法名"</span> + method.getName());</span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">switch</span> (method.getName()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"createUser"</span>: &#123;</span><br><span class="line">                args[<span class="number">1</span>] = encrypt((String) args[<span class="number">1</span>]);</span><br><span class="line">                args[<span class="number">2</span>] = encrypt((String) args[<span class="number">2</span>]);</span><br><span class="line">                result = method.invoke(userService, args);</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"showUserInfo"</span>: &#123;</span><br><span class="line">                result = method.invoke(userService, args);</span><br><span class="line">                User user = (User) result;</span><br><span class="line">                String password = decrypt(user.getPassword());</span><br><span class="line">                String mobile = decrypt(user.getMobile());</span><br><span class="line">                <span class="comment">// 拷贝到新的对象，并返回</span></span><br><span class="line">                user = <span class="keyword">new</span> User.Builder()</span><br><span class="line">                        .setAccount(user.getAccount())</span><br><span class="line">                        .setPassword(password)</span><br><span class="line">                        .setMobile(mobile).builder();</span><br><span class="line">                System.out.println(<span class="string">"解密后的用户信息 user: "</span> + result.toString());</span><br><span class="line">                result = user;</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                result = method.invoke(userService, args);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"日志记录 运行结束 方法名"</span> + method.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加用户加解密功能</span></span><br><span class="line">        UserServiceProxy proxy = <span class="keyword">new</span> UserServiceProxy(userService);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建动态代理</span></span><br><span class="line">        userService = (UserService) Proxy.newProxyInstance(userService.getClass().getClassLoader(),</span><br><span class="line">                userService.getClass().getInterfaces(), proxy);</span><br><span class="line">        userService.createUser(<span class="string">"admin"</span>, <span class="string">"admin123"</span>, <span class="string">"15113088283"</span>);</span><br><span class="line">        User admin = userService.showUserInfo(<span class="string">"admin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">日志记录 调用方法名createUser</span><br><span class="line">用户创建成功 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'YWRtaW4xMjM='</span>, mobile=<span class="string">'MTUxMTMwODgyODM='</span>&#125;</span><br><span class="line">日志记录 运行结束 方法名createUser</span><br><span class="line">日志记录 调用方法名showUserInfo</span><br><span class="line">解密后的用户信息 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'YWRtaW4xMjM='</span>, mobile=<span class="string">'MTUxMTMwODgyODM='</span>&#125;</span><br><span class="line">日志记录 运行结束 方法名showUserInfo</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-代理模式&quot;&gt;&lt;a href=&quot;#设计模式-代理模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-代理模式&quot;&gt;&lt;/a&gt;设计模式-代理模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="代理模式" scheme="https://www.deschen.cn/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-享元模式</title>
    <link href="https://www.deschen.cn/2022/02/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-05T14:45:21.000Z</published>
    <updated>2023-05-10T02:37:11.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>工厂类</strong>获取<strong>共享对象</strong>，<strong>减少</strong>内存使用和对象开销</li><li>主要用途：用于共享相同数据的场景：数字字典的引用</li><li>代码：工厂类</li><li>PS：该模式是缓存的一种：存储的对象，而且存的位置是内存。这样就有问题：只对自身项目共享，那么项目水平扩展，需要额外开销保证每台服务器的存储的对象一致</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以数字字典为例</p></li><li><p>字典类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所属组编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String groupCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所属组名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String groupName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字典编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String dictCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字典值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String dictValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dictionary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dictionary</span><span class="params">(Long id, String groupCode, String groupName, String dictCode, String dictValue, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.groupCode = groupCode;</span><br><span class="line">        <span class="keyword">this</span>.groupName = groupName;</span><br><span class="line">        <span class="keyword">this</span>.dictCode = dictCode;</span><br><span class="line">        <span class="keyword">this</span>.dictValue = dictValue;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGroupCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> groupCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGroupCode</span><span class="params">(String groupCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.groupCode = groupCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGroupName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGroupName</span><span class="params">(String groupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.groupName = groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDictCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dictCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDictCode</span><span class="params">(String dictCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictCode = dictCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDictValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dictValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDictValue</span><span class="params">(String dictValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictValue = dictValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dictionary&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", groupCode='"</span> + groupCode + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", groupName='"</span> + groupName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", dictCode='"</span> + dictCode + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", dictValue='"</span> + dictValue + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", description='"</span> + description + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DictionaryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分组编码和字典编码获取字典</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupCode 组编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dictCode 字典编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Dictionary <span class="title">getDictionary</span><span class="params">(String groupCode, String dictCode)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictionaryServiceImpl</span> <span class="keyword">implements</span> <span class="title">DictionaryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_CODE_TEMPLATE = <span class="string">"groupCode%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_NAME_TEMPLATE = <span class="string">"groupName%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DICT_CODE_TEMPLATE = <span class="string">"dictCode%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DICT_VALUE_TEMPLATE = <span class="string">"dictValue%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Dictionary&gt; dictionaries = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Long id = <span class="number">1L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                Dictionary dictionary = <span class="keyword">new</span> Dictionary(id, String.format(GROUP_CODE_TEMPLATE, i), String.format(GROUP_NAME_TEMPLATE, i),</span><br><span class="line">                        String.format(DICT_CODE_TEMPLATE, j), String.format(DICT_VALUE_TEMPLATE, j), <span class="string">""</span>);</span><br><span class="line">                id++;</span><br><span class="line">                dictionaries.add(dictionary);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dictionary <span class="title">getDictionary</span><span class="params">(String groupCode, String dictCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Dictionary dictionary : dictionaries) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dictionary.getGroupCode().equals(groupCode) &amp;&amp; dictionary.getDictCode().equals(dictCode)) &#123;</span><br><span class="line">                <span class="keyword">return</span> dictionary;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典共享工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictionaryFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始容量大小：最大元素量 / 负载因子(0.75)，即使填入不是2的幂等性，ConcurrentHashMap也会自动转化为2的幂等性的值</span></span><br><span class="line"><span class="comment">     * 为什么博客建议用2的幂等性：保证哈希表在扩容时能够快速地定位元素的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Dictionary&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DictionaryService dictionaryService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DictionaryFactory</span><span class="params">(DictionaryService dictionaryService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictionaryService = dictionaryService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据组编码和字典编号获取字典</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dictCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dictionary <span class="title">getDictionary</span><span class="params">(String groupCode, String dictCode)</span> </span>&#123;</span><br><span class="line">        String cacheKey = cacheKey(groupCode, dictCode);</span><br><span class="line"></span><br><span class="line">        Dictionary dictionary = cache.get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == dictionary) &#123;</span><br><span class="line">            dictionary = dictionaryService.getDictionary(groupCode, dictCode);</span><br><span class="line">            cache.put(cacheKey, dictionary);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dictionary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">cacheKey</span><span class="params">(String groupCode, String dictCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> groupCode + <span class="string">":"</span> + dictCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerlink&quot; title=&quot;一、详解&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="享元模式" scheme="https://www.deschen.cn/tags/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-外观模式</title>
    <link href="https://www.deschen.cn/2022/02/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-04T15:50:10.000Z</published>
    <updated>2023-05-10T00:46:21.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：为<strong>多个子系统的交互</strong>提供<strong>接口</strong>，供客户端使用</li><li>主要用途：当一个系统的功能非常复杂，由很多个子系统组成时，可以使用外观模式对这些子系统进行封装，提供一个简单的接口给客户端使用</li><li>代码：对外接口、封装多个子系统的实现类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件上传为例：涉及到用户认证、文件上传、消息通知</p></li><li><p>对外接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传，涉及到用户认证、文件上传、消息通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装多个系统交互的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFacadeImpl</span> <span class="keyword">implements</span> <span class="title">FileFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthSystem authSystem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileSystem fileSystem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MessageSystem messageSystem;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileFacadeImpl</span><span class="params">(AuthSystem authSystem, FileSystem fileSystem, MessageSystem messageSystem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authSystem = authSystem;</span><br><span class="line">        <span class="keyword">this</span>.fileSystem = fileSystem;</span><br><span class="line">        <span class="keyword">this</span>.messageSystem = messageSystem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasAuth = authSystem.isAuthenticated();</span><br><span class="line">        <span class="keyword">if</span> (!hasAuth) &#123;</span><br><span class="line">            System.out.println(<span class="string">"当前用户没有权限"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fileSystem.uploadFile(filePath, fileName);</span><br><span class="line"></span><br><span class="line">        messageSystem.sendMessage(<span class="string">"上传"</span> + fileName + <span class="string">"到"</span> + filePath + <span class="string">"目录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 认证系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前用户是否有权限</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthSystemImpl</span> <span class="keyword">implements</span> <span class="title">AuthSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"认证系统: 当前用户有操作权限"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemImpl</span> <span class="keyword">implements</span> <span class="title">FileSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件系统: 文件目录: "</span> + filePath + <span class="string">", 上传的文件: "</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSystemImpl</span> <span class="keyword">implements</span> <span class="title">MessageSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消息系统: 发送的消息: "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AuthSystem authSystem = <span class="keyword">new</span> AuthSystemImpl();</span><br><span class="line">        FileSystem fileSystem = <span class="keyword">new</span> FileSystemImpl();</span><br><span class="line">        MessageSystem messageSystem = <span class="keyword">new</span> MessageSystemImpl();</span><br><span class="line">        FileFacade fileFacade = <span class="keyword">new</span> FileFacadeImpl(authSystem, fileSystem, messageSystem);</span><br><span class="line"></span><br><span class="line">        fileFacade.uploadFile(<span class="string">"/resources"</span>, <span class="string">"test.doc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">认证系统: 当前用户有操作权限</span><br><span class="line">文件系统: 文件目录: /resources, 上传的文件: test.doc</span><br><span class="line">消息系统: 发送的消息: 上传test.doc到/resources目录</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerlink&quot; title=&quot;一、详解&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="外观模式" scheme="https://www.deschen.cn/tags/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-组合模式</title>
    <link href="https://www.deschen.cn/2022/02/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-03T14:11:21.000Z</published>
    <updated>2023-05-09T06:00:27.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-组合模式"><a href="#设计模式-组合模式" class="headerlink" title="设计模式-组合模式"></a>设计模式-组合模式</h1><blockquote><p>研究了很久，我发现组合模式，跟装饰者模式有异曲同工之处。就是在原来的功能基础上，<strong>装饰</strong>了保存子节点的集合</p></blockquote><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：<strong>抽象类组件</strong>与一个<strong>包含子组件</strong>的<strong>子组件类</strong>，构建<strong>树形</strong>结构</li><li>主要用途：<ul><li>在不改变现有对象结构的情况下，动态地给一个对象增加新的功能</li><li>需要添加一些附加的功能，但是使用继承会导致类的数量增加，且继承层次复杂，而装饰者可以聚合新功能的类，添加新功能</li></ul></li><li>代码：原有的类/接口（抽象类组件）、包含子组件的子组件类（装饰了保存子节点功能）</li><li>PS: 为什么我不直接把子组件类抽象出来？是因为组合模式本来就是<strong>用于组合树结构</strong>，没有其他意思，就不要抽象出来</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以部门树为例</p></li><li><p>部门类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">IDept</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(Long id, String name, Integer level, Long parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentId</span><span class="params">(Long parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dept&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", level='"</span> + level + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", parentId="</span> + parentId +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门的抽象类 - 提取部门需要展示的属性，同时方便以后部门类整改不受影响，保证可维护性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDept</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Long <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">getLevel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Long <span class="title">getParentId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Boolean <span class="title">isRoot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包含部门的部门树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNode</span> <span class="keyword">implements</span> <span class="title">IDept</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IDept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;DeptNode&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptNode</span><span class="params">(IDept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">        <span class="keyword">this</span>.children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getLevel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getParentId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.isRoot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;DeptNode&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(List&lt;DeptNode&gt; children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(DeptNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children.add(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deptInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dept&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + getId() +</span><br><span class="line">                <span class="string">", name='"</span> + getName() + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", level='"</span> + getLevel() + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", parentId="</span> + getParentId() +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门树生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNodeBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Long, DeptNode&gt; nodeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加内存空间来构建树 - 遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> depts 部门集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptNode <span class="title">buildByIncrMem</span><span class="params">(List&lt;Dept&gt; depts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Dept dept : depts) &#123;</span><br><span class="line">            nodeMap.put(dept.getId(), <span class="keyword">new</span> DeptNode(dept));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeptNode root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (DeptNode node : nodeMap.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!node.isRoot()) &#123;</span><br><span class="line">                DeptNode parent = nodeMap.get(node.getParentId());</span><br><span class="line">                parent.addNode(node);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加栈来构建树 - 递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> depts 部门集合</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptNode <span class="title">buildByIncrStack</span><span class="params">(List&lt;Dept&gt; depts)</span> </span>&#123;</span><br><span class="line">        List&lt;DeptNode&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        DeptNode root = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Dept dept : depts) &#123;</span><br><span class="line">            DeptNode node = <span class="keyword">new</span> DeptNode(dept);</span><br><span class="line">            <span class="keyword">if</span> (dept.isRoot()) &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">            nodes.add(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.setChildren(children(nodes, root));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;DeptNode&gt; <span class="title">children</span><span class="params">(List&lt;DeptNode&gt; nodes, DeptNode parent)</span> </span>&#123;</span><br><span class="line">        List&lt;DeptNode&gt; children = nodes.stream()</span><br><span class="line">                .filter(node -&gt; node.getParentId().equals(parent.getId()))</span><br><span class="line">                .peek(node -&gt; &#123;</span><br><span class="line">                    node.setChildren(children(nodes, node));</span><br><span class="line">                &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        List&lt;Dept&gt; depts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Dept root = <span class="keyword">new</span> Dept(<span class="number">0L</span>, <span class="string">"0"</span>, <span class="number">0</span>, -<span class="number">1L</span>);</span><br><span class="line">        depts.add(root);</span><br><span class="line">        Long id = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long i = <span class="number">0L</span>; i &lt;= <span class="number">3L</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Long j = <span class="number">0L</span>; j &lt; <span class="number">3L</span>; j++) &#123;</span><br><span class="line">                id++;</span><br><span class="line">                Dept child = <span class="keyword">new</span> Dept(id, id.toString(), j.intValue(), i);</span><br><span class="line">                depts.add(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeptNodeBuilder builder = <span class="keyword">new</span> DeptNodeBuilder();</span><br><span class="line">        DeptNode rootNode = builder.buildByIncrMem(depts);</span><br><span class="line"></span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode));</span><br><span class="line"></span><br><span class="line">        DeptNode rootNode1 = builder.buildByIncrStack(depts);</span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;],<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;],<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;],<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;],<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;],<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;],<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;],<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;],<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h2><blockquote><p>上面的是针对业务（部门）抽象，组合形成部门树。但是菜单、文件等这些层级属性的实体，难道要重新copy一份在写吗？</p><p>能不能把他们的共性抽取出来呢？</p><p>部门、菜单、文件共性：标识、父标识、名称等节点属性</p><p>部门树、菜单树、文件树共性：包含自身，即节点集合</p></blockquote><ul><li><p>组合模式概念：抽象类组件和包含子组件的子组件类</p><ul><li>第一版：抽象类组件（部门）、子组件（部门树）</li><li>第二版：抽象类组件（节点属性）、抽象子组件（节点树）、部门类（抽象类的子类）、部门树（抽象子组件的子类）</li></ul></li><li><p>代码</p><ul><li><p>抽象类组件（节点属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NodeEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点ID，节点唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父节点ID，体现出层级关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">getParentId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点顺序，可以实所有节点的顺序，也可以是同级下的节点顺序。如果为空，默认不排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">getSort</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">isRoot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象子组件类（节点树）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">NodeEntity</span>, <span class="title">N</span> <span class="keyword">extends</span> <span class="title">Node</span>&gt; <span class="keyword">implements</span> <span class="title">NodeEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> E entity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> List&lt;N&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.entity = entity;</span><br><span class="line">        <span class="keyword">this</span>.children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getParentId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == entity.getSort()? <span class="number">0</span>: entity.getSort();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.isRoot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;N&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(List&lt;N&gt; children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(N node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children.add(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门类（节点的子类，添加业务属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">NodeEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增属性：层级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(Long id, String name, Long parentId, Integer sort, Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">        <span class="keyword">this</span>.sort = sort;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentId</span><span class="params">(Long parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSort</span><span class="params">(Integer sort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sort = sort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门树（节点树的子类，添加业务属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNode</span> <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">Dept</span>, <span class="title">DeptNode</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptNode</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增属性：层级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getLevel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>节点树生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNodeBuilder</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">NodeEntity</span>, <span class="title">N</span> <span class="keyword">extends</span> <span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> NodeSortComparator comparator = <span class="keyword">new</span> NodeSortComparator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加内存空间来构建树 - 遍历</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities 节点实体集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> N <span class="title">buildByIncrMem</span><span class="params">(List&lt;E&gt; entities)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Map&lt;Long, N&gt; nodeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Collections.sort(entities, comparator);</span><br><span class="line"></span><br><span class="line">        List&lt;N&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        N root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (E entity : entities) &#123;</span><br><span class="line">            N node = createNode(entity);</span><br><span class="line">            nodes.add(node);</span><br><span class="line">            nodeMap.put(node.getId(), node);</span><br><span class="line">            <span class="keyword">if</span> (entity.isRoot()) &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (N node : nodeMap.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!node.isRoot()) &#123;</span><br><span class="line">                N parent = nodeMap.get(node.getParentId());</span><br><span class="line">                parent.addNode(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> N <span class="title">createNode</span><span class="params">(E entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加栈来构建树 - 递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities 节点实体集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> N <span class="title">buildByIncrStack</span><span class="params">(List&lt;E&gt; entities)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        List&lt;N&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        N root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (E entity : entities) &#123;</span><br><span class="line">            N node = createNode(entity);</span><br><span class="line">            nodes.add(node);</span><br><span class="line">            <span class="keyword">if</span> (entity.isRoot()) &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.setChildren(children(nodes, root));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (N) root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;N&gt; <span class="title">children</span><span class="params">(List&lt;N&gt; nodes, N parent)</span> </span>&#123;</span><br><span class="line">        List&lt;N&gt; children = nodes.stream()</span><br><span class="line">                .filter(node -&gt; node.getParentId().equals(parent.getId()))</span><br><span class="line">                .peek(node -&gt; &#123;</span><br><span class="line">                    node.setChildren(children(nodes, node));</span><br><span class="line">                &#125;)</span><br><span class="line">                .sorted(comparator)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点排序器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeSortComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">NodeEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(NodeEntity o1, NodeEntity o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getSort().compareTo(o2.getSort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门树（节点树生成器，覆盖或者新增功能）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNodeBuilder</span> <span class="keyword">extends</span> <span class="title">TreeNodeBuilder</span>&lt;<span class="title">Dept</span>, <span class="title">DeptNode</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DeptNode <span class="title">createNode</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DeptNode(dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        List&lt;Dept&gt; depts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Dept root = <span class="keyword">new</span> Dept(<span class="number">0L</span>, <span class="string">"0"</span>, -<span class="number">1L</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        depts.add(root);</span><br><span class="line">        Long id = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long i = <span class="number">0L</span>; i &lt;= <span class="number">3L</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Long j = <span class="number">0L</span>; j &lt; <span class="number">3L</span>; j++) &#123;</span><br><span class="line">                id++;</span><br><span class="line">                Integer level = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0L</span>) &#123;</span><br><span class="line">                    level = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Dept child = <span class="keyword">new</span> Dept(id, id.toString(), i, j.intValue(), level);</span><br><span class="line">                depts.add(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeptNodeBuilder builder = <span class="keyword">new</span> DeptNodeBuilder();</span><br><span class="line">        DeptNode rootNode = builder.buildByIncrMem(depts);</span><br><span class="line"></span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode));</span><br><span class="line"></span><br><span class="line">        DeptNode rootNode1 = builder.buildByIncrStack(depts);</span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>&#125;</span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可见，有新的业务要生成树形结构，先后要继承/实现<strong>节点属性（NodeEntity）</strong>、<strong>节点树（Node）</strong>、<strong>节点生成器（TreeNodeBuilder）</strong>就可以了，如果要定制化，就直接在其基础上修改</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-组合模式&quot;&gt;&lt;a href=&quot;#设计模式-组合模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-组合模式&quot;&gt;&lt;/a&gt;设计模式-组合模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;研究了很久，我发现组合模式，跟装饰者模式有异曲同工之处。就
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="组合模式" scheme="https://www.deschen.cn/tags/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-装饰者模式</title>
    <link href="https://www.deschen.cn/2022/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-02T15:51:41.000Z</published>
    <updated>2023-05-06T01:48:12.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-装饰者模式"><a href="#设计模式-装饰者模式" class="headerlink" title="设计模式-装饰者模式"></a>设计模式-装饰者模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：<strong>不修改</strong>现有对象情况下，<strong>扩展新</strong>的功能</li><li>主要用途：<ul><li>在不改变现有对象结构的情况下，动态地给一个对象增加新的功能</li><li>需要添加一些附加的功能，但是使用继承会导致类的数量增加，且继承层次复杂，而装饰者可以聚合新功能的类，添加新功能</li></ul></li><li>代码：原有的类/接口、抽象装饰者类、具体新功能的装饰者子类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以用户信息加密为例，保存加密的用户信息、展示解密的用户信息</p></li><li><p>原有类/接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter 和 toString 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            user = <span class="keyword">new</span> User();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAccount</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">            user.account = account;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">            user.password = password;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">            user.mobile = mobile;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户服务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示用户信息</span></span><br><span class="line">    <span class="function">User <span class="title">showUserInfo</span><span class="params">(String account)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户服务实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, User&gt; storage = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span> </span>&#123;</span><br><span class="line">        User.Builder builder = <span class="keyword">new</span> User.Builder();</span><br><span class="line">        User user = builder.setAccount(account)</span><br><span class="line">                .setPassword(password)</span><br><span class="line">                .setMobile(mobile).builder();</span><br><span class="line">        storage.put(account, user);</span><br><span class="line">        System.out.println(<span class="string">"用户创建成功 user: "</span> + user.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">showUserInfo</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">        User user = storage.get(account);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原先用户服务用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.createUser(<span class="string">"admin"</span>, <span class="string">"admin123"</span>, <span class="string">"15113088283"</span>);</span><br><span class="line">        User admin = userService.showUserInfo(<span class="string">"admin"</span>);</span><br><span class="line">        System.out.println(<span class="string">"用户信息 admin: "</span> + admin.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">用户创建成功 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br><span class="line">用户信息 admin: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象装饰者类： 为了提供一个通用的接口，让所有具体的装饰者类都实现该接口，并且可以互相替换，达到灵活扩展的效果</p><ul><li>PS: 个人认为如果只有一个新功能的话，其实用一个具体装饰者也没问题。不过不利于后续扩展，谁能说以后没有新功能加入呢</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户抽象装饰者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceDecorator</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceDecorator</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体装饰者类：加解密功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceEncryptionDecorator</span> <span class="keyword">extends</span> <span class="title">UserServiceDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceEncryptionDecorator</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(userService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据加密功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64Encryptor.encrypt(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据解密功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decrypt</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64Encryptor.decrypt(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span> </span>&#123;</span><br><span class="line">        password = encrypt(password);</span><br><span class="line">        mobile = encrypt(mobile);</span><br><span class="line">        userService.createUser(account, password, mobile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">showUserInfo</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">        User user = userService.showUserInfo(account);</span><br><span class="line">        String password = decrypt(user.getPassword());</span><br><span class="line">        String mobile = decrypt(user.getMobile());</span><br><span class="line">        <span class="comment">// 拷贝到新的对象，并返回</span></span><br><span class="line">        User decryptUser = <span class="keyword">new</span> User.Builder()</span><br><span class="line">                .setAccount(account)</span><br><span class="line">                .setPassword(password)</span><br><span class="line">                .setMobile(mobile).builder();</span><br><span class="line">        <span class="keyword">return</span> decryptUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰了加解密功能的用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">// 添加用户加解密功能，代码效果看，就新增一行代码，就体现不同效果</span></span><br><span class="line">        userService = <span class="keyword">new</span> UserServiceEncryptionDecorator(userService);</span><br><span class="line">        </span><br><span class="line">        userService.createUser(<span class="string">"admin"</span>, <span class="string">"admin123"</span>, <span class="string">"15113088283"</span>);</span><br><span class="line">        User admin = userService.showUserInfo(<span class="string">"admin"</span>);</span><br><span class="line">        System.out.println(<span class="string">"解密后的用户信息 admin: "</span> + admin.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">用户创建成功 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'YWRtaW4xMjM='</span>, mobile=<span class="string">'MTUxMTMwODgyODM='</span>&#125;</span><br><span class="line">解密后的用户信息 admin: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-装饰者模式&quot;&gt;&lt;a href=&quot;#设计模式-装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-装饰者模式&quot;&gt;&lt;/a&gt;设计模式-装饰者模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="装饰者模式" scheme="https://www.deschen.cn/tags/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-桥接模式</title>
    <link href="https://www.deschen.cn/2022/02/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-01T12:23:43.000Z</published>
    <updated>2023-05-05T02:42:29.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-桥接模式"><a href="#设计模式-桥接模式" class="headerlink" title="设计模式-桥接模式"></a>设计模式-桥接模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：<strong>抽象</strong>与<strong>实现</strong>分离，以便独立变化使用</li><li>主要用途<ul><li>抽象与实现之间存在多重维度的变化。比如：车辆根据不同的类型，有不同的维修策略</li><li>需要将一个类的抽象部分和实现部分分离出来，从而可以独立地改变它们</li></ul></li><li>代码：抽象类、实现类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以文件管理为例</p></li><li><p>抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileManagerImpl</span> <span class="keyword">implements</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件创建成功，文件名： "</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileManager fileManager = <span class="keyword">new</span> FileManagerImpl();</span><br><span class="line">        fileManager.createFile(<span class="string">"/resources"</span>, <span class="string">"resource.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">文件创建成功，文件名： resource.txt</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-桥接模式&quot;&gt;&lt;a href=&quot;#设计模式-桥接模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-桥接模式&quot;&gt;&lt;/a&gt;设计模式-桥接模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="桥接模式" scheme="https://www.deschen.cn/tags/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-适配器模式</title>
    <link href="https://www.deschen.cn/2022/01/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/01/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-31T14:50:10.000Z</published>
    <updated>2023-05-05T01:32:31.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-适配器模式"><a href="#设计模式-适配器模式" class="headerlink" title="设计模式-适配器模式"></a>设计模式-适配器模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>适配器</strong>，将<strong>一个接口</strong>适配满足<strong>另一个接口</strong>需求</li><li>主要用途<ul><li>用于连接两个互不兼容的接口场景：比如订单数据同步道ERP系统，但两个数据格式不兼容，这时可以用适配器模式转换数据格式</li><li>适配第三方服务商API：比如云存储功能，需要适配器兼容不同的第三方服务商API，从而达到服务商的切换</li></ul></li><li>代码：接口A、适配器、接口B（不一定是接口，可以是类）</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以云存储为例，需要兼容不同服务商API</p></li><li><p>文件操作接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不同云存储服务商API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟阿里云OSS服务商API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(String bucketName, String key, InputStream input)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"阿里云OSS上传文件成功,文件名: "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟Minio服务商API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(PutObjectArgs args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Minio上传文件成功,文件名: "</span> + args.getObjectName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PutObjectArgs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> InputStream stream;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String objectName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> InputStream <span class="title">getStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> stream;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStream</span><span class="params">(InputStream stream)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.stream = stream;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getObjectName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> objectName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectName</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.objectName = objectName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不同服务商的适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云OSS API适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssAdapter</span> <span class="keyword">implements</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OssClient ossClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OssAdapter</span><span class="params">(OssClient ossClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ossClient = ossClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream input = getClass().getResourceAsStream(filePath)) &#123;</span><br><span class="line">            ossClient.putObject(<span class="string">"bucketName"</span>, fileName, input);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取文件失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Minio API 适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioAdapter</span> <span class="keyword">implements</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinioAdapter</span><span class="params">(MinioClient minioClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.minioClient = minioClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream input = getClass().getResourceAsStream(filePath)) &#123;</span><br><span class="line">            MinioClient.PutObjectArgs putObjectArgs = <span class="keyword">new</span> MinioClient.PutObjectArgs();</span><br><span class="line">            putObjectArgs.setStream(input);</span><br><span class="line">            putObjectArgs.setObjectName(fileName);</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取文件失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Storage ossStorage = <span class="keyword">new</span> OssAdapter(<span class="keyword">new</span> OssClient());</span><br><span class="line">        ossStorage.uploadFile(<span class="string">"resource.txt"</span>, <span class="string">"resource.txt"</span>);</span><br><span class="line"></span><br><span class="line">        Storage minioStorage = <span class="keyword">new</span> MinioAdapter(<span class="keyword">new</span> MinioClient());</span><br><span class="line">        minioStorage.uploadFile(<span class="string">"resource.txt"</span>, <span class="string">"resource.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">阿里云OSS上传文件成功,文件名: resource.txt</span><br><span class="line">Minio上传文件成功,文件名: resource.txt</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-适配器模式&quot;&gt;&lt;a href=&quot;#设计模式-适配器模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-适配器模式&quot;&gt;&lt;/a&gt;设计模式-适配器模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="适配器模式" scheme="https://www.deschen.cn/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式-反射破坏</title>
    <link href="https://www.deschen.cn/2022/01/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-%E5%8F%8D%E5%B0%84%E7%A0%B4%E5%9D%8F/"/>
    <id>https://www.deschen.cn/2022/01/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-%E5%8F%8D%E5%B0%84%E7%A0%B4%E5%9D%8F/</id>
    <published>2022-01-30T13:53:20.000Z</published>
    <updated>2023-05-04T07:34:02.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式-反射破坏"><a href="#单例模式-反射破坏" class="headerlink" title="单例模式-反射破坏"></a>单例模式-反射破坏</h1><h2 id="一、反射破坏"><a href="#一、反射破坏" class="headerlink" title="一、反射破坏"></a>一、反射破坏</h2><ul><li>概念：通过反射机制调用私有的构造器，创建新的实例，破坏单例模式约束</li><li>解决措施<ul><li>懒汉模式、双重检测锁模式、饿汉模式、静态内部类：通过对私有构造方法，判断实例是否创建，进而避免反射破坏</li><li>枚举单例模式：<code>JDK</code> 针对反射做了处理，如果是枚举就报异常，进而避免反射破坏</li></ul></li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><blockquote><p>只针对具体问题列举代码，请结合<a href="https://deschen.cn/2022/01/29/设计模式-单例模式/" target="_blank" rel="noopener">设计模式-单例模式</a>使用</p></blockquote><ul><li><p>懒汉模式</p><ul><li>优点：类的方法被调用后创建实例，反射是无法创建实例的</li><li>缺点：如果类的方法没被调用，那么反射是可以无限创建实例，破坏单例模式约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"LazySingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      Constructor&lt;LazySingleton&gt; constructor =</span><br><span class="line">                LazySingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 反射 在 懒加载 前执行</span></span><br><span class="line">        LazySingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">        LazySingleton singletonByReflect2 = constructor.newInstance();</span><br><span class="line">        LazySingleton singleton = LazySingleton.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个"</span> + (singletonByReflect1 == singletonByReflect2));</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 懒加载 在 反射 前执行</span></span><br><span class="line">        LazySingleton singletonByReflect3 = constructor.newInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先类调用getInstance()，在反射创建实例, 实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">mainLazySingleton创建</span><br><span class="line">mainLazySingleton创建</span><br><span class="line">mainLazySingleton创建</span><br><span class="line">处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个<span class="keyword">false</span></span><br><span class="line">处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个：<span class="keyword">false</span></span><br><span class="line">mainLazySingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.lazySingleton(Demo.java:<span class="number">117</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">28</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.LazySingleton.&lt;init&gt;(LazySingleton.java:<span class="number">15</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>双重检测锁（优缺点跟懒加载一样）</p><ul><li>优点：类的方法被调用后创建实例，反射是无法创建实例的</li><li>缺点：如果类的方法没被调用，那么反射是可以无限创建实例，破坏单例模式约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLockSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckLockSingleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLockSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"DoubleCheckLockSingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      Constructor&lt;DoubleCheckLockSingleton&gt; constructor =</span><br><span class="line">                DoubleCheckLockSingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 反射 在 懒加载 前执行</span></span><br><span class="line">        DoubleCheckLockSingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">        DoubleCheckLockSingleton singletonByReflect2 = constructor.newInstance();</span><br><span class="line">        DoubleCheckLockSingleton singleton = DoubleCheckLockSingleton.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个"</span> + (singletonByReflect1 == singletonByReflect2));</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 懒加载 在 反射 前执行</span></span><br><span class="line">        DoubleCheckLockSingleton singletonByReflect3 = constructor.newInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先类调用getInstance()，在反射创建实例, 实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">thread of passing the first lock：main</span><br><span class="line">thread of creating instance: main</span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个<span class="keyword">false</span></span><br><span class="line">处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个：<span class="keyword">false</span></span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.doubleCheckLockSingleton(Demo.java:<span class="number">145</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">30</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.DoubleCheckLockSingleton.&lt;init&gt;(DoubleCheckLockSingleton.java:<span class="number">18</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>饿汉模式</p><ul><li>优点：因为反射触发类加载，而类加载有且创建一个实例，避免反射破坏</li><li>缺点：造成资源浪费</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton singleton = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"HungrySingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       Constructor&lt;HungrySingleton&gt; constructor =</span><br><span class="line">                HungrySingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        HungrySingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">mainHungrySingleton创建</span><br><span class="line">mainHungrySingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.hungrySingleton(Demo.java:<span class="number">90</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">32</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.HungrySingleton.&lt;init&gt;(HungrySingleton.java:<span class="number">21</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>静态内部类</p><ul><li>优点：因为反射触发静态内部类类加载，而类加载有且创建一个实例，避免反射破坏</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"StaticInnerSingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != StaticInner.singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优点：线程安全，通过类加载机制保证只有一个实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StaticInner.singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用final修饰，保证类初始化一次后，不能被修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInnerSingleton singleton = <span class="keyword">new</span> StaticInnerSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Constructor&lt;StaticInnerSingleton&gt; constructor =</span><br><span class="line">                StaticInnerSingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        StaticInnerSingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">StaticInnerSingleton创建</span><br><span class="line">StaticInnerSingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.staticInnerSingleton(Demo.java:<span class="number">74</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">34</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.StaticInnerSingleton.&lt;init&gt;(StaticInnerSingleton.java:<span class="number">14</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>枚举单例模式</p><ul><li><p>优点：反射创建实例中，有针对枚举单例做处理，避免多实例化 {@link Constructor#newInstance(java.lang.Object…)}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ENUM_SINGLETON,</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//其父类的构造器</span></span><br><span class="line">        Constructor&lt;EnumSingleton&gt; constructor = EnumSingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">String</span>.<span class="title">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        EnumSingleton singleton3 = constructor.newInstance(<span class="string">"ENUM_SINGLETON"</span>, <span class="number">666</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.IllegalArgumentException: Cannot reflectively create <span class="keyword">enum</span> objects</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">417</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.enumSingleton(Demo.java:<span class="number">59</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">36</span>)</span><br></pre></td></tr></table></figure></li><li><p>枚举能避免反射的原因，源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Constructor</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Executable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">               IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">                Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">                checkAccess(caller, clazz, <span class="keyword">null</span>, modifiers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果反射的类是枚举，则报异常</span></span><br><span class="line">        <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot reflectively create enum objects"</span>);</span><br><span class="line">        ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">        <span class="keyword">if</span> (ca == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ca = acquireConstructorAccessor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        T inst = (T) ca.newInstance(initargs);</span><br><span class="line">        <span class="keyword">return</span> inst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模式-反射破坏&quot;&gt;&lt;a href=&quot;#单例模式-反射破坏&quot; class=&quot;headerlink&quot; title=&quot;单例模式-反射破坏&quot;&gt;&lt;/a&gt;单例模式-反射破坏&lt;/h1&gt;&lt;h2 id=&quot;一、反射破坏&quot;&gt;&lt;a href=&quot;#一、反射破坏&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="单例模式" scheme="https://www.deschen.cn/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-单例模式</title>
    <link href="https://www.deschen.cn/2022/01/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/01/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-29T15:53:20.000Z</published>
    <updated>2023-05-04T02:04:04.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-单例模式"><a href="#设计模式-单例模式" class="headerlink" title="设计模式-单例模式"></a>设计模式-单例模式</h1><blockquote><p>由于要写23种设计模式博客，之前《详解五种单例模式》存在不足，我已经删了，可以在CSDN找到</p><p>请点击<a href="https://blog.csdn.net/weixin_39147889/article/details/103996455?spm=1001.2014.3001.5501" target="_blank" rel="noopener">CSDN链接</a></p></blockquote><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念: 一个类有且只有<strong>唯一</strong>一个实例，提供系统使用</li><li>主要用途：资源的共享、减少重复创建资源开销</li><li>优缺点<ul><li>优点：节约资源以及提高资源的利用率，如果一个应用总是产生相同的实例，实例一多，就会导致系统内存不足，运行响应缓慢，甚至宕机</li><li>缺点： 如果实例化的对象长时间不被利用，系统会认为该对象是垃圾而被回收，这可能会导致对象状态的丢失</li></ul></li><li>模式：懒汉模式、双重检测锁模式、饿汉模式、静态内部类模式、枚举单例模式</li></ul><h2 id="二、五种单例模式"><a href="#二、五种单例模式" class="headerlink" title="二、五种单例模式"></a>二、五种单例模式</h2><blockquote><p>单例模式三个主要特点：1、构造方法私有化；2、实例化的变量引用私有化；3、获取实例的方法共有</p></blockquote><ul><li><p>懒汉模式</p><ul><li><p>类初始化时不会立刻创建实例，而是当调用方法时创建</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传统的懒汉模式</span></span><br><span class="line"><span class="comment"> * 缺点：</span></span><br><span class="line"><span class="comment"> *     1、线程不安全，多线程下同时创建多个实例  </span></span><br><span class="line"><span class="comment"> *     2、存在指令重排的问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LazySingleton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断实例是否已创建</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式 &#123;<span class="doctag">@link</span> LazySingleton&#125;的改进版本，针对存在的问题改进</span></span><br><span class="line"><span class="comment"> * 优化点：</span></span><br><span class="line"><span class="comment"> *       1、synchronized，通过类锁，保证多线程下方法调用串行化，保证有且只有一个实例创建</span></span><br><span class="line"><span class="comment"> *       2、使用 volatile 避免指令重排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazySingleton01 singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LazySingleton01创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> synchrsonized LazySingleton01 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断实例是否已创建</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> LazySingleton01();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>双重检测锁模式</p><ul><li><p>进行了两次的判断，第一次是为了避免不要的实例，第二次结合<code>synchrsonized</code>，避免多线程创建多实例问题</p></li><li><p>PS：是对懒汉模式的进一步优化</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重校验锁单例模式，针对懒汉模式&#123;<span class="doctag">@link</span> LazySingleton01 &#125;存在性能问题的改进</span></span><br><span class="line"><span class="comment"> * 优点：线程安全</span></span><br><span class="line"><span class="comment"> * 优化点：第一次判断后再用synchronized类锁，避免所有线程调用方法时阻塞</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLockSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用volatile 防止指令重排</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckLockSingleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLockSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"DoubleCheckLockSingleton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLockSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否存在，避免重复创建实例,不过多线程可以进入</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">            <span class="comment">// 使用synchronized，单线程通行，防止多线程进入</span></span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckLockSingleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"thread of passing the first lock："</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">// 再次判断是否存在，防止多线程创建，达到双重检测</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"thread of creating instance: "</span> + Thread.currentThread().getName());</span><br><span class="line">                    singleton = <span class="keyword">new</span> DoubleCheckLockSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>饿汉模式</p><ul><li><p>类初始化时立刻创建实例，线程安全</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * 优点：线程安全，通过类加载机制保证只有一个实例</span></span><br><span class="line"><span class="comment"> * 缺点：造成内存浪费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类初始化创建实例</span></span><br><span class="line"><span class="comment">     * 使用final修饰，保证类初始化一次后，不能被修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton singlenton = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HungrySinglenton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singlenton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态内部类</p><ul><li><p>方法被调用时（懒汉模式），静态内部类初始化创建实例（饿汉模式）</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类</span></span><br><span class="line"><span class="comment"> * 优点：线程安全，通过类加载机制保证只有一个实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"StaticInnerSingleton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StaticInner.singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用final修饰，保证类初始化一次后，不能被修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInnerSingleton singleton = <span class="keyword">new</span> StaticInnerSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>枚举单例</p><ul><li><p>枚举单例也是一种单例模式，主要解决反射破坏单例模式约束问题（<code>JDK</code>会对反射做了处理）</p></li><li><p>反射破坏：通过反射机制调用私有的构造器，创建新的实例，破坏单例模式约束（前面四种设计模式都会被破坏）</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举单例模式</span></span><br><span class="line"><span class="comment"> *     优点：线程安全</span></span><br><span class="line"><span class="comment"> *     不足：不常用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line">    ENUM_SINGLETON,</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-单例模式&quot;&gt;&lt;a href=&quot;#设计模式-单例模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-单例模式&quot;&gt;&lt;/a&gt;设计模式-单例模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于要写23种设计模式博客，之前《详解五种单例模式》存在不
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="单例模式" scheme="https://www.deschen.cn/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-原型模式</title>
    <link href="https://www.deschen.cn/2022/01/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/01/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-28T12:51:41.000Z</published>
    <updated>2023-04-28T07:49:06.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：实现 <code>Cloneable</code> 接口，<strong>拷贝</strong> <strong>已创建的对象</strong>，创建新的对象</li><li>主要用途：直接创建的对象开销大时，直接克隆已创建的对象，减少开销</li><li>代码：实现 <code>cloneable</code> 接口的产品</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以文件为例，拷贝文件及文件夹</p></li><li><p>产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件抽象类，表示文件这类产品（文件、文件夹）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFile</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractFile <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"AbstractFile&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", content='"</span> + content + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String name, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractFile <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> File(<span class="keyword">this</span>.name, <span class="keyword">this</span>.content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件夹</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractFile&gt; files;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractFile <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Folder folder = <span class="keyword">new</span> Folder(<span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">for</span> (AbstractFile file : <span class="keyword">this</span>.files) &#123;</span><br><span class="line">            folder.addFile(file.clone());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> folder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFile</span><span class="params">(AbstractFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.files.add(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractFile&gt; <span class="title">getFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> files;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Folder&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", content='"</span> + content + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", files="</span> + files +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.doc"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        Folder folder = <span class="keyword">new</span> Folder(<span class="string">"test"</span>);</span><br><span class="line">        folder.addFile(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拷贝文件</span></span><br><span class="line">        AbstractFile copyFile = file.clone();</span><br><span class="line">        copyFile.setName(<span class="string">"test_copy.doc"</span>);</span><br><span class="line">        System.out.println(copyFile.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拷贝文件夹</span></span><br><span class="line">        AbstractFile copyFolder = folder.clone();</span><br><span class="line">        copyFolder.setName(<span class="string">"test_copy"</span>);</span><br><span class="line">        System.out.println(copyFolder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">AbstractFile&#123;name=<span class="string">'test_copy.doc'</span>, content=<span class="string">'123456'</span>&#125;</span><br><span class="line">Folder&#123;name=<span class="string">'test_copy'</span>, content=<span class="string">'null'</span>, files=[AbstractFile&#123;name=<span class="string">'test.doc'</span>, content=<span class="string">'123456'</span>&#125;]&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerlink&quot; title=&quot;一、详解&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="原型模式" scheme="https://www.deschen.cn/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-建造者模式</title>
    <link href="https://www.deschen.cn/2022/01/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/01/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-27T13:51:41.000Z</published>
    <updated>2023-04-29T12:45:27.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>产品抽象</strong>，创建其<strong>子产品</strong>及<strong>建造者</strong>，<strong>指导者</strong>通过<strong>建造者</strong>，管理<strong>子产品的依赖关系并创建</strong></li><li>主要用途：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。经常应用在产品的组成稳定，但各部分经常面临剧烈变化的业务场景</li><li>代码：产品抽象、产品子类及建造者、指导者</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以文件为例，创建不同类型的文件（文档、图片、视频等）</p></li><li><p>产品抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件抽象类，表示文件这类产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> FileType fileType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> fileSize;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Object content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileType <span class="title">getFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileType</span><span class="params">(FileType fileType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileType = fileType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFileSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileSize</span><span class="params">(<span class="keyword">long</span> fileSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"File&#123;"</span> +</span><br><span class="line">                <span class="string">"fileType="</span> + fileType +</span><br><span class="line">                <span class="string">", fileName='"</span> + fileName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", fileSize="</span> + fileSize +</span><br><span class="line">                <span class="string">", content="</span> + content +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>产品子类及建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文档类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Document</span> <span class="keyword">extends</span> <span class="title">File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Document</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 私有构造法，保证对象只能通过构造法生成</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">FileBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Document document;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.document = <span class="keyword">new</span> Document();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            document.setFileType(FileType.DOCUMENT);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            document.setFileName(name);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileSize</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">            document.setFileSize(size);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileContent</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">            document.setContent(content);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> File <span class="title">getFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> document;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Image</span> <span class="keyword">extends</span> <span class="title">File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Image</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 私有构造法，保证对象只能通过构造法生成</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">FileBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Image image;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.image = <span class="keyword">new</span> Image();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            image.setFileType(FileType.IMAGE);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            image.setFileName(name);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileSize</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">            image.setFileSize(size);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileContent</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">            image.setContent(content);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> File <span class="title">getFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指导者：通过建造者，管理产品的依赖顺序，并创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件指导类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDirector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">createFile</span><span class="params">(FileBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.buildFileType()</span><br><span class="line">                .getFile();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileBuilder documentBuilder = <span class="keyword">new</span> Document.Builder();</span><br><span class="line">        FileBuilder imageBuilder = <span class="keyword">new</span> Image.Builder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建文档文件</span></span><br><span class="line">        documentBuilder.buildFileName(<span class="string">"test.doc"</span>)</span><br><span class="line">                .buildFileSize(<span class="number">1024L</span>)</span><br><span class="line">                .buildFileContent(<span class="string">"This is a document."</span>);</span><br><span class="line">        File document = FileDirector.createFile(documentBuilder);</span><br><span class="line">        System.out.println(document.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建图片文件</span></span><br><span class="line">        imageBuilder.buildFileName(<span class="string">"test.png"</span>)</span><br><span class="line">                .buildFileSize(<span class="number">512L</span>)</span><br><span class="line">                .buildFileContent(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">        File image = FileDirector.createFile(imageBuilder);</span><br><span class="line">        System.out.println(image.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">File&#123;fileType=DOCUMENT, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=This is a document.&#125;</span><br><span class="line">File&#123;fileType=IMAGE, fileName=<span class="string">'test.png'</span>, fileSize=<span class="number">512</span>, content=[B@<span class="number">1</span>b6d3586&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerlink&quot; title=&quot;一、详解&quot;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="建造者模式" scheme="https://www.deschen.cn/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
