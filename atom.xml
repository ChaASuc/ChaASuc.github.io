<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deschen Blog</title>
  
  <subtitle>以Java开发为主的个人博客，记录自己在学习、工作和成长的笔记和心得</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.deschen.cn/"/>
  <updated>2023-05-10T02:37:11.523Z</updated>
  <id>https://www.deschen.cn/</id>
  
  <author>
    <name>Deschen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式-享元模式</title>
    <link href="https://www.deschen.cn/2022/02/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-05T14:45:21.000Z</published>
    <updated>2023-05-10T02:37:11.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>工厂类</strong>获取<strong>共享对象</strong>，<strong>减少</strong>内存使用和对象开销</li><li>主要用途：用于共享相同数据的场景：数字字典的引用</li><li>代码：工厂类</li><li>PS：该模式是缓存的一种：存储的对象，而且存的位置是内存。这样就有问题：只对自身项目共享，那么项目水平扩展，需要额外开销保证每台服务器的存储的对象一致</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以数字字典为例</p></li><li><p>字典类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所属组编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String groupCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所属组名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String groupName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字典编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String dictCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字典值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String dictValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dictionary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dictionary</span><span class="params">(Long id, String groupCode, String groupName, String dictCode, String dictValue, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.groupCode = groupCode;</span><br><span class="line">        <span class="keyword">this</span>.groupName = groupName;</span><br><span class="line">        <span class="keyword">this</span>.dictCode = dictCode;</span><br><span class="line">        <span class="keyword">this</span>.dictValue = dictValue;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGroupCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> groupCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGroupCode</span><span class="params">(String groupCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.groupCode = groupCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGroupName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGroupName</span><span class="params">(String groupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.groupName = groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDictCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dictCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDictCode</span><span class="params">(String dictCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictCode = dictCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDictValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dictValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDictValue</span><span class="params">(String dictValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictValue = dictValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dictionary&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", groupCode='"</span> + groupCode + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", groupName='"</span> + groupName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", dictCode='"</span> + dictCode + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", dictValue='"</span> + dictValue + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", description='"</span> + description + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DictionaryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分组编码和字典编码获取字典</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupCode 组编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dictCode 字典编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Dictionary <span class="title">getDictionary</span><span class="params">(String groupCode, String dictCode)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictionaryServiceImpl</span> <span class="keyword">implements</span> <span class="title">DictionaryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_CODE_TEMPLATE = <span class="string">"groupCode%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_NAME_TEMPLATE = <span class="string">"groupName%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DICT_CODE_TEMPLATE = <span class="string">"dictCode%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DICT_VALUE_TEMPLATE = <span class="string">"dictValue%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Dictionary&gt; dictionaries = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Long id = <span class="number">1L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                Dictionary dictionary = <span class="keyword">new</span> Dictionary(id, String.format(GROUP_CODE_TEMPLATE, i), String.format(GROUP_NAME_TEMPLATE, i),</span><br><span class="line">                        String.format(DICT_CODE_TEMPLATE, j), String.format(DICT_VALUE_TEMPLATE, j), <span class="string">""</span>);</span><br><span class="line">                id++;</span><br><span class="line">                dictionaries.add(dictionary);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dictionary <span class="title">getDictionary</span><span class="params">(String groupCode, String dictCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Dictionary dictionary : dictionaries) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dictionary.getGroupCode().equals(groupCode) &amp;&amp; dictionary.getDictCode().equals(dictCode)) &#123;</span><br><span class="line">                <span class="keyword">return</span> dictionary;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典共享工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictionaryFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始容量大小：最大元素量 / 负载因子(0.75)，即使填入不是2的幂等性，ConcurrentHashMap也会自动转化为2的幂等性的值</span></span><br><span class="line"><span class="comment">     * 为什么博客建议用2的幂等性：保证哈希表在扩容时能够快速地定位元素的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Dictionary&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DictionaryService dictionaryService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DictionaryFactory</span><span class="params">(DictionaryService dictionaryService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictionaryService = dictionaryService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据组编码和字典编号获取字典</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dictCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dictionary <span class="title">getDictionary</span><span class="params">(String groupCode, String dictCode)</span> </span>&#123;</span><br><span class="line">        String cacheKey = cacheKey(groupCode, dictCode);</span><br><span class="line"></span><br><span class="line">        Dictionary dictionary = cache.get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == dictionary) &#123;</span><br><span class="line">            dictionary = dictionaryService.getDictionary(groupCode, dictCode);</span><br><span class="line">            cache.put(cacheKey, dictionary);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dictionary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">cacheKey</span><span class="params">(String groupCode, String dictCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> groupCode + <span class="string">":"</span> + dictCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerlink&quot; title=&quot;一、详解&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="享元模式" scheme="https://www.deschen.cn/tags/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-外观模式</title>
    <link href="https://www.deschen.cn/2022/02/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-04T15:50:10.000Z</published>
    <updated>2023-05-10T00:46:21.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：为<strong>多个子系统的交互</strong>提供<strong>接口</strong>，供客户端使用</li><li>主要用途：当一个系统的功能非常复杂，由很多个子系统组成时，可以使用外观模式对这些子系统进行封装，提供一个简单的接口给客户端使用</li><li>代码：对外接口、封装多个子系统的实现类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件上传为例：涉及到用户认证、文件上传、消息通知</p></li><li><p>对外接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传，涉及到用户认证、文件上传、消息通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装多个系统交互的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFacadeImpl</span> <span class="keyword">implements</span> <span class="title">FileFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthSystem authSystem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileSystem fileSystem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MessageSystem messageSystem;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileFacadeImpl</span><span class="params">(AuthSystem authSystem, FileSystem fileSystem, MessageSystem messageSystem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authSystem = authSystem;</span><br><span class="line">        <span class="keyword">this</span>.fileSystem = fileSystem;</span><br><span class="line">        <span class="keyword">this</span>.messageSystem = messageSystem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasAuth = authSystem.isAuthenticated();</span><br><span class="line">        <span class="keyword">if</span> (!hasAuth) &#123;</span><br><span class="line">            System.out.println(<span class="string">"当前用户没有权限"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fileSystem.uploadFile(filePath, fileName);</span><br><span class="line"></span><br><span class="line">        messageSystem.sendMessage(<span class="string">"上传"</span> + fileName + <span class="string">"到"</span> + filePath + <span class="string">"目录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 认证系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前用户是否有权限</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthSystemImpl</span> <span class="keyword">implements</span> <span class="title">AuthSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"认证系统: 当前用户有操作权限"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemImpl</span> <span class="keyword">implements</span> <span class="title">FileSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件系统: 文件目录: "</span> + filePath + <span class="string">", 上传的文件: "</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSystemImpl</span> <span class="keyword">implements</span> <span class="title">MessageSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消息系统: 发送的消息: "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AuthSystem authSystem = <span class="keyword">new</span> AuthSystemImpl();</span><br><span class="line">        FileSystem fileSystem = <span class="keyword">new</span> FileSystemImpl();</span><br><span class="line">        MessageSystem messageSystem = <span class="keyword">new</span> MessageSystemImpl();</span><br><span class="line">        FileFacade fileFacade = <span class="keyword">new</span> FileFacadeImpl(authSystem, fileSystem, messageSystem);</span><br><span class="line"></span><br><span class="line">        fileFacade.uploadFile(<span class="string">"/resources"</span>, <span class="string">"test.doc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">认证系统: 当前用户有操作权限</span><br><span class="line">文件系统: 文件目录: /resources, 上传的文件: test.doc</span><br><span class="line">消息系统: 发送的消息: 上传test.doc到/resources目录</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerlink&quot; title=&quot;一、详解&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="外观模式" scheme="https://www.deschen.cn/tags/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-组合模式</title>
    <link href="https://www.deschen.cn/2022/02/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-03T14:11:21.000Z</published>
    <updated>2023-05-09T06:00:27.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-组合模式"><a href="#设计模式-组合模式" class="headerlink" title="设计模式-组合模式"></a>设计模式-组合模式</h1><blockquote><p>研究了很久，我发现组合模式，跟装饰者模式有异曲同工之处。就是在原来的功能基础上，<strong>装饰</strong>了保存子节点的集合</p></blockquote><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：<strong>抽象类组件</strong>与一个<strong>包含子组件</strong>的<strong>子组件类</strong>，构建<strong>树形</strong>结构</li><li>主要用途：<ul><li>在不改变现有对象结构的情况下，动态地给一个对象增加新的功能</li><li>需要添加一些附加的功能，但是使用继承会导致类的数量增加，且继承层次复杂，而装饰者可以聚合新功能的类，添加新功能</li></ul></li><li>代码：原有的类/接口（抽象类组件）、包含子组件的子组件类（装饰了保存子节点功能）</li><li>PS: 为什么我不直接把子组件类抽象出来？是因为组合模式本来就是<strong>用于组合树结构</strong>，没有其他意思，就不要抽象出来</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以部门树为例</p></li><li><p>部门类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">IDept</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(Long id, String name, Integer level, Long parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentId</span><span class="params">(Long parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dept&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", level='"</span> + level + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", parentId="</span> + parentId +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门的抽象类 - 提取部门需要展示的属性，同时方便以后部门类整改不受影响，保证可维护性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDept</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Long <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">getLevel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Long <span class="title">getParentId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Boolean <span class="title">isRoot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包含部门的部门树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNode</span> <span class="keyword">implements</span> <span class="title">IDept</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IDept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;DeptNode&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptNode</span><span class="params">(IDept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">        <span class="keyword">this</span>.children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getLevel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getParentId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.isRoot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;DeptNode&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(List&lt;DeptNode&gt; children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(DeptNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children.add(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deptInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dept&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + getId() +</span><br><span class="line">                <span class="string">", name='"</span> + getName() + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", level='"</span> + getLevel() + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", parentId="</span> + getParentId() +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门树生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNodeBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Long, DeptNode&gt; nodeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加内存空间来构建树 - 遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> depts 部门集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptNode <span class="title">buildByIncrMem</span><span class="params">(List&lt;Dept&gt; depts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Dept dept : depts) &#123;</span><br><span class="line">            nodeMap.put(dept.getId(), <span class="keyword">new</span> DeptNode(dept));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeptNode root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (DeptNode node : nodeMap.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!node.isRoot()) &#123;</span><br><span class="line">                DeptNode parent = nodeMap.get(node.getParentId());</span><br><span class="line">                parent.addNode(node);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加栈来构建树 - 递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> depts 部门集合</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptNode <span class="title">buildByIncrStack</span><span class="params">(List&lt;Dept&gt; depts)</span> </span>&#123;</span><br><span class="line">        List&lt;DeptNode&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        DeptNode root = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Dept dept : depts) &#123;</span><br><span class="line">            DeptNode node = <span class="keyword">new</span> DeptNode(dept);</span><br><span class="line">            <span class="keyword">if</span> (dept.isRoot()) &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">            nodes.add(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.setChildren(children(nodes, root));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;DeptNode&gt; <span class="title">children</span><span class="params">(List&lt;DeptNode&gt; nodes, DeptNode parent)</span> </span>&#123;</span><br><span class="line">        List&lt;DeptNode&gt; children = nodes.stream()</span><br><span class="line">                .filter(node -&gt; node.getParentId().equals(parent.getId()))</span><br><span class="line">                .peek(node -&gt; &#123;</span><br><span class="line">                    node.setChildren(children(nodes, node));</span><br><span class="line">                &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        List&lt;Dept&gt; depts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Dept root = <span class="keyword">new</span> Dept(<span class="number">0L</span>, <span class="string">"0"</span>, <span class="number">0</span>, -<span class="number">1L</span>);</span><br><span class="line">        depts.add(root);</span><br><span class="line">        Long id = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long i = <span class="number">0L</span>; i &lt;= <span class="number">3L</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Long j = <span class="number">0L</span>; j &lt; <span class="number">3L</span>; j++) &#123;</span><br><span class="line">                id++;</span><br><span class="line">                Dept child = <span class="keyword">new</span> Dept(id, id.toString(), j.intValue(), i);</span><br><span class="line">                depts.add(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeptNodeBuilder builder = <span class="keyword">new</span> DeptNodeBuilder();</span><br><span class="line">        DeptNode rootNode = builder.buildByIncrMem(depts);</span><br><span class="line"></span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode));</span><br><span class="line"></span><br><span class="line">        DeptNode rootNode1 = builder.buildByIncrStack(depts);</span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;],<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;],<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;],<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;],<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;],<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;],<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;],<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;],<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h2><blockquote><p>上面的是针对业务（部门）抽象，组合形成部门树。但是菜单、文件等这些层级属性的实体，难道要重新copy一份在写吗？</p><p>能不能把他们的共性抽取出来呢？</p><p>部门、菜单、文件共性：标识、父标识、名称等节点属性</p><p>部门树、菜单树、文件树共性：包含自身，即节点集合</p></blockquote><ul><li><p>组合模式概念：抽象类组件和包含子组件的子组件类</p><ul><li>第一版：抽象类组件（部门）、子组件（部门树）</li><li>第二版：抽象类组件（节点属性）、抽象子组件（节点树）、部门类（抽象类的子类）、部门树（抽象子组件的子类）</li></ul></li><li><p>代码</p><ul><li><p>抽象类组件（节点属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NodeEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点ID，节点唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父节点ID，体现出层级关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">getParentId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点顺序，可以实所有节点的顺序，也可以是同级下的节点顺序。如果为空，默认不排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">getSort</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">isRoot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象子组件类（节点树）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">NodeEntity</span>, <span class="title">N</span> <span class="keyword">extends</span> <span class="title">Node</span>&gt; <span class="keyword">implements</span> <span class="title">NodeEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> E entity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> List&lt;N&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.entity = entity;</span><br><span class="line">        <span class="keyword">this</span>.children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getParentId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == entity.getSort()? <span class="number">0</span>: entity.getSort();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.isRoot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;N&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(List&lt;N&gt; children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(N node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children.add(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门类（节点的子类，添加业务属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">NodeEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增属性：层级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(Long id, String name, Long parentId, Integer sort, Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">        <span class="keyword">this</span>.sort = sort;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentId</span><span class="params">(Long parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSort</span><span class="params">(Integer sort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sort = sort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门树（节点树的子类，添加业务属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNode</span> <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">Dept</span>, <span class="title">DeptNode</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptNode</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增属性：层级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getLevel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>节点树生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNodeBuilder</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">NodeEntity</span>, <span class="title">N</span> <span class="keyword">extends</span> <span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> NodeSortComparator comparator = <span class="keyword">new</span> NodeSortComparator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加内存空间来构建树 - 遍历</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities 节点实体集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> N <span class="title">buildByIncrMem</span><span class="params">(List&lt;E&gt; entities)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Map&lt;Long, N&gt; nodeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Collections.sort(entities, comparator);</span><br><span class="line"></span><br><span class="line">        List&lt;N&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        N root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (E entity : entities) &#123;</span><br><span class="line">            N node = createNode(entity);</span><br><span class="line">            nodes.add(node);</span><br><span class="line">            nodeMap.put(node.getId(), node);</span><br><span class="line">            <span class="keyword">if</span> (entity.isRoot()) &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (N node : nodeMap.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!node.isRoot()) &#123;</span><br><span class="line">                N parent = nodeMap.get(node.getParentId());</span><br><span class="line">                parent.addNode(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> N <span class="title">createNode</span><span class="params">(E entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加栈来构建树 - 递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities 节点实体集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> N <span class="title">buildByIncrStack</span><span class="params">(List&lt;E&gt; entities)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        List&lt;N&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        N root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (E entity : entities) &#123;</span><br><span class="line">            N node = createNode(entity);</span><br><span class="line">            nodes.add(node);</span><br><span class="line">            <span class="keyword">if</span> (entity.isRoot()) &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.setChildren(children(nodes, root));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (N) root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;N&gt; <span class="title">children</span><span class="params">(List&lt;N&gt; nodes, N parent)</span> </span>&#123;</span><br><span class="line">        List&lt;N&gt; children = nodes.stream()</span><br><span class="line">                .filter(node -&gt; node.getParentId().equals(parent.getId()))</span><br><span class="line">                .peek(node -&gt; &#123;</span><br><span class="line">                    node.setChildren(children(nodes, node));</span><br><span class="line">                &#125;)</span><br><span class="line">                .sorted(comparator)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点排序器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeSortComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">NodeEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(NodeEntity o1, NodeEntity o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getSort().compareTo(o2.getSort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门树（节点树生成器，覆盖或者新增功能）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNodeBuilder</span> <span class="keyword">extends</span> <span class="title">TreeNodeBuilder</span>&lt;<span class="title">Dept</span>, <span class="title">DeptNode</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DeptNode <span class="title">createNode</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DeptNode(dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        List&lt;Dept&gt; depts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Dept root = <span class="keyword">new</span> Dept(<span class="number">0L</span>, <span class="string">"0"</span>, -<span class="number">1L</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        depts.add(root);</span><br><span class="line">        Long id = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long i = <span class="number">0L</span>; i &lt;= <span class="number">3L</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Long j = <span class="number">0L</span>; j &lt; <span class="number">3L</span>; j++) &#123;</span><br><span class="line">                id++;</span><br><span class="line">                Integer level = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0L</span>) &#123;</span><br><span class="line">                    level = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Dept child = <span class="keyword">new</span> Dept(id, id.toString(), i, j.intValue(), level);</span><br><span class="line">                depts.add(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeptNodeBuilder builder = <span class="keyword">new</span> DeptNodeBuilder();</span><br><span class="line">        DeptNode rootNode = builder.buildByIncrMem(depts);</span><br><span class="line"></span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode));</span><br><span class="line"></span><br><span class="line">        DeptNode rootNode1 = builder.buildByIncrStack(depts);</span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>&#125;</span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可见，有新的业务要生成树形结构，先后要继承/实现<strong>节点属性（NodeEntity）</strong>、<strong>节点树（Node）</strong>、<strong>节点生成器（TreeNodeBuilder）</strong>就可以了，如果要定制化，就直接在其基础上修改</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-组合模式&quot;&gt;&lt;a href=&quot;#设计模式-组合模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-组合模式&quot;&gt;&lt;/a&gt;设计模式-组合模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;研究了很久，我发现组合模式，跟装饰者模式有异曲同工之处。就
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="组合模式" scheme="https://www.deschen.cn/tags/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-装饰者模式</title>
    <link href="https://www.deschen.cn/2022/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-02T15:51:41.000Z</published>
    <updated>2023-05-06T01:48:12.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-装饰者模式"><a href="#设计模式-装饰者模式" class="headerlink" title="设计模式-装饰者模式"></a>设计模式-装饰者模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：<strong>不修改</strong>现有对象情况下，<strong>扩展新</strong>的功能</li><li>主要用途：<ul><li>在不改变现有对象结构的情况下，动态地给一个对象增加新的功能</li><li>需要添加一些附加的功能，但是使用继承会导致类的数量增加，且继承层次复杂，而装饰者可以聚合新功能的类，添加新功能</li></ul></li><li>代码：原有的类/接口、抽象装饰者类、具体新功能的装饰者子类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以用户信息加密为例，保存加密的用户信息、展示解密的用户信息</p></li><li><p>原有类/接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter 和 toString 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            user = <span class="keyword">new</span> User();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAccount</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">            user.account = account;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">            user.password = password;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">            user.mobile = mobile;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户服务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示用户信息</span></span><br><span class="line">    <span class="function">User <span class="title">showUserInfo</span><span class="params">(String account)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户服务实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, User&gt; storage = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span> </span>&#123;</span><br><span class="line">        User.Builder builder = <span class="keyword">new</span> User.Builder();</span><br><span class="line">        User user = builder.setAccount(account)</span><br><span class="line">                .setPassword(password)</span><br><span class="line">                .setMobile(mobile).builder();</span><br><span class="line">        storage.put(account, user);</span><br><span class="line">        System.out.println(<span class="string">"用户创建成功 user: "</span> + user.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">showUserInfo</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">        User user = storage.get(account);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原先用户服务用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.createUser(<span class="string">"admin"</span>, <span class="string">"admin123"</span>, <span class="string">"15113088283"</span>);</span><br><span class="line">        User admin = userService.showUserInfo(<span class="string">"admin"</span>);</span><br><span class="line">        System.out.println(<span class="string">"用户信息 admin: "</span> + admin.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">用户创建成功 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br><span class="line">用户信息 admin: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象装饰者类： 为了提供一个通用的接口，让所有具体的装饰者类都实现该接口，并且可以互相替换，达到灵活扩展的效果</p><ul><li>PS: 个人认为如果只有一个新功能的话，其实用一个具体装饰者也没问题。不过不利于后续扩展，谁能说以后没有新功能加入呢</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户抽象装饰者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceDecorator</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceDecorator</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体装饰者类：加解密功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceEncryptionDecorator</span> <span class="keyword">extends</span> <span class="title">UserServiceDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceEncryptionDecorator</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(userService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据加密功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64Encryptor.encrypt(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据解密功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decrypt</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64Encryptor.decrypt(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span> </span>&#123;</span><br><span class="line">        password = encrypt(password);</span><br><span class="line">        mobile = encrypt(mobile);</span><br><span class="line">        userService.createUser(account, password, mobile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">showUserInfo</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">        User user = userService.showUserInfo(account);</span><br><span class="line">        String password = decrypt(user.getPassword());</span><br><span class="line">        String mobile = decrypt(user.getMobile());</span><br><span class="line">        <span class="comment">// 拷贝到新的对象，并返回</span></span><br><span class="line">        User decryptUser = <span class="keyword">new</span> User.Builder()</span><br><span class="line">                .setAccount(account)</span><br><span class="line">                .setPassword(password)</span><br><span class="line">                .setMobile(mobile).builder();</span><br><span class="line">        <span class="keyword">return</span> decryptUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰了加解密功能的用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">// 添加用户加解密功能，代码效果看，就新增一行代码，就体现不同效果</span></span><br><span class="line">        userService = <span class="keyword">new</span> UserServiceEncryptionDecorator(userService);</span><br><span class="line">        </span><br><span class="line">        userService.createUser(<span class="string">"admin"</span>, <span class="string">"admin123"</span>, <span class="string">"15113088283"</span>);</span><br><span class="line">        User admin = userService.showUserInfo(<span class="string">"admin"</span>);</span><br><span class="line">        System.out.println(<span class="string">"解密后的用户信息 admin: "</span> + admin.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">用户创建成功 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'YWRtaW4xMjM='</span>, mobile=<span class="string">'MTUxMTMwODgyODM='</span>&#125;</span><br><span class="line">解密后的用户信息 admin: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-装饰者模式&quot;&gt;&lt;a href=&quot;#设计模式-装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-装饰者模式&quot;&gt;&lt;/a&gt;设计模式-装饰者模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="装饰者模式" scheme="https://www.deschen.cn/tags/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-桥接模式</title>
    <link href="https://www.deschen.cn/2022/02/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/02/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-01T12:23:43.000Z</published>
    <updated>2023-05-05T02:42:29.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-桥接模式"><a href="#设计模式-桥接模式" class="headerlink" title="设计模式-桥接模式"></a>设计模式-桥接模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：<strong>抽象</strong>与<strong>实现</strong>分离，以便独立变化使用</li><li>主要用途<ul><li>抽象与实现之间存在多重维度的变化。比如：车辆根据不同的类型，有不同的维修策略</li><li>需要将一个类的抽象部分和实现部分分离出来，从而可以独立地改变它们</li></ul></li><li>代码：抽象类、实现类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以文件管理为例</p></li><li><p>抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileManagerImpl</span> <span class="keyword">implements</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件创建成功，文件名： "</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileManager fileManager = <span class="keyword">new</span> FileManagerImpl();</span><br><span class="line">        fileManager.createFile(<span class="string">"/resources"</span>, <span class="string">"resource.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">文件创建成功，文件名： resource.txt</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-桥接模式&quot;&gt;&lt;a href=&quot;#设计模式-桥接模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-桥接模式&quot;&gt;&lt;/a&gt;设计模式-桥接模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="桥接模式" scheme="https://www.deschen.cn/tags/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-适配器模式</title>
    <link href="https://www.deschen.cn/2022/01/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/01/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-31T14:50:10.000Z</published>
    <updated>2023-05-05T01:32:31.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-适配器模式"><a href="#设计模式-适配器模式" class="headerlink" title="设计模式-适配器模式"></a>设计模式-适配器模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>适配器</strong>，将<strong>一个接口</strong>适配满足<strong>另一个接口</strong>需求</li><li>主要用途<ul><li>用于连接两个互不兼容的接口场景：比如订单数据同步道ERP系统，但两个数据格式不兼容，这时可以用适配器模式转换数据格式</li><li>适配第三方服务商API：比如云存储功能，需要适配器兼容不同的第三方服务商API，从而达到服务商的切换</li></ul></li><li>代码：接口A、适配器、接口B（不一定是接口，可以是类）</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以云存储为例，需要兼容不同服务商API</p></li><li><p>文件操作接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不同云存储服务商API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟阿里云OSS服务商API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(String bucketName, String key, InputStream input)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"阿里云OSS上传文件成功,文件名: "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟Minio服务商API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(PutObjectArgs args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Minio上传文件成功,文件名: "</span> + args.getObjectName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PutObjectArgs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> InputStream stream;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String objectName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> InputStream <span class="title">getStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> stream;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStream</span><span class="params">(InputStream stream)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.stream = stream;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getObjectName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> objectName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectName</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.objectName = objectName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不同服务商的适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云OSS API适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssAdapter</span> <span class="keyword">implements</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OssClient ossClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OssAdapter</span><span class="params">(OssClient ossClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ossClient = ossClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream input = getClass().getResourceAsStream(filePath)) &#123;</span><br><span class="line">            ossClient.putObject(<span class="string">"bucketName"</span>, fileName, input);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取文件失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Minio API 适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioAdapter</span> <span class="keyword">implements</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinioAdapter</span><span class="params">(MinioClient minioClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.minioClient = minioClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream input = getClass().getResourceAsStream(filePath)) &#123;</span><br><span class="line">            MinioClient.PutObjectArgs putObjectArgs = <span class="keyword">new</span> MinioClient.PutObjectArgs();</span><br><span class="line">            putObjectArgs.setStream(input);</span><br><span class="line">            putObjectArgs.setObjectName(fileName);</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取文件失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Storage ossStorage = <span class="keyword">new</span> OssAdapter(<span class="keyword">new</span> OssClient());</span><br><span class="line">        ossStorage.uploadFile(<span class="string">"resource.txt"</span>, <span class="string">"resource.txt"</span>);</span><br><span class="line"></span><br><span class="line">        Storage minioStorage = <span class="keyword">new</span> MinioAdapter(<span class="keyword">new</span> MinioClient());</span><br><span class="line">        minioStorage.uploadFile(<span class="string">"resource.txt"</span>, <span class="string">"resource.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">阿里云OSS上传文件成功,文件名: resource.txt</span><br><span class="line">Minio上传文件成功,文件名: resource.txt</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-适配器模式&quot;&gt;&lt;a href=&quot;#设计模式-适配器模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-适配器模式&quot;&gt;&lt;/a&gt;设计模式-适配器模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="适配器模式" scheme="https://www.deschen.cn/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式-反射破坏</title>
    <link href="https://www.deschen.cn/2022/01/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-%E5%8F%8D%E5%B0%84%E7%A0%B4%E5%9D%8F/"/>
    <id>https://www.deschen.cn/2022/01/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-%E5%8F%8D%E5%B0%84%E7%A0%B4%E5%9D%8F/</id>
    <published>2022-01-30T13:53:20.000Z</published>
    <updated>2023-05-04T07:34:02.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式-反射破坏"><a href="#单例模式-反射破坏" class="headerlink" title="单例模式-反射破坏"></a>单例模式-反射破坏</h1><h2 id="一、反射破坏"><a href="#一、反射破坏" class="headerlink" title="一、反射破坏"></a>一、反射破坏</h2><ul><li>概念：通过反射机制调用私有的构造器，创建新的实例，破坏单例模式约束</li><li>解决措施<ul><li>懒汉模式、双重检测锁模式、饿汉模式、静态内部类：通过对私有构造方法，判断实例是否创建，进而避免反射破坏</li><li>枚举单例模式：<code>JDK</code> 针对反射做了处理，如果是枚举就报异常，进而避免反射破坏</li></ul></li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><blockquote><p>只针对具体问题列举代码，请结合<a href="https://deschen.cn/2022/01/29/设计模式-单例模式/" target="_blank" rel="noopener">设计模式-单例模式</a>使用</p></blockquote><ul><li><p>懒汉模式</p><ul><li>优点：类的方法被调用后创建实例，反射是无法创建实例的</li><li>缺点：如果类的方法没被调用，那么反射是可以无限创建实例，破坏单例模式约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"LazySingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      Constructor&lt;LazySingleton&gt; constructor =</span><br><span class="line">                LazySingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 反射 在 懒加载 前执行</span></span><br><span class="line">        LazySingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">        LazySingleton singletonByReflect2 = constructor.newInstance();</span><br><span class="line">        LazySingleton singleton = LazySingleton.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个"</span> + (singletonByReflect1 == singletonByReflect2));</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 懒加载 在 反射 前执行</span></span><br><span class="line">        LazySingleton singletonByReflect3 = constructor.newInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先类调用getInstance()，在反射创建实例, 实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">mainLazySingleton创建</span><br><span class="line">mainLazySingleton创建</span><br><span class="line">mainLazySingleton创建</span><br><span class="line">处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个<span class="keyword">false</span></span><br><span class="line">处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个：<span class="keyword">false</span></span><br><span class="line">mainLazySingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.lazySingleton(Demo.java:<span class="number">117</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">28</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.LazySingleton.&lt;init&gt;(LazySingleton.java:<span class="number">15</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>双重检测锁（优缺点跟懒加载一样）</p><ul><li>优点：类的方法被调用后创建实例，反射是无法创建实例的</li><li>缺点：如果类的方法没被调用，那么反射是可以无限创建实例，破坏单例模式约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLockSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckLockSingleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLockSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"DoubleCheckLockSingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      Constructor&lt;DoubleCheckLockSingleton&gt; constructor =</span><br><span class="line">                DoubleCheckLockSingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 反射 在 懒加载 前执行</span></span><br><span class="line">        DoubleCheckLockSingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">        DoubleCheckLockSingleton singletonByReflect2 = constructor.newInstance();</span><br><span class="line">        DoubleCheckLockSingleton singleton = DoubleCheckLockSingleton.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个"</span> + (singletonByReflect1 == singletonByReflect2));</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 懒加载 在 反射 前执行</span></span><br><span class="line">        DoubleCheckLockSingleton singletonByReflect3 = constructor.newInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先类调用getInstance()，在反射创建实例, 实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">thread of passing the first lock：main</span><br><span class="line">thread of creating instance: main</span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个<span class="keyword">false</span></span><br><span class="line">处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个：<span class="keyword">false</span></span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.doubleCheckLockSingleton(Demo.java:<span class="number">145</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">30</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.DoubleCheckLockSingleton.&lt;init&gt;(DoubleCheckLockSingleton.java:<span class="number">18</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>饿汉模式</p><ul><li>优点：因为反射触发类加载，而类加载有且创建一个实例，避免反射破坏</li><li>缺点：造成资源浪费</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton singleton = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"HungrySingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       Constructor&lt;HungrySingleton&gt; constructor =</span><br><span class="line">                HungrySingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        HungrySingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">mainHungrySingleton创建</span><br><span class="line">mainHungrySingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.hungrySingleton(Demo.java:<span class="number">90</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">32</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.HungrySingleton.&lt;init&gt;(HungrySingleton.java:<span class="number">21</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>静态内部类</p><ul><li>优点：因为反射触发静态内部类类加载，而类加载有且创建一个实例，避免反射破坏</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"StaticInnerSingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != StaticInner.singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优点：线程安全，通过类加载机制保证只有一个实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StaticInner.singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用final修饰，保证类初始化一次后，不能被修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInnerSingleton singleton = <span class="keyword">new</span> StaticInnerSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Constructor&lt;StaticInnerSingleton&gt; constructor =</span><br><span class="line">                StaticInnerSingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        StaticInnerSingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">StaticInnerSingleton创建</span><br><span class="line">StaticInnerSingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.staticInnerSingleton(Demo.java:<span class="number">74</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">34</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.StaticInnerSingleton.&lt;init&gt;(StaticInnerSingleton.java:<span class="number">14</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>枚举单例模式</p><ul><li><p>优点：反射创建实例中，有针对枚举单例做处理，避免多实例化 {@link Constructor#newInstance(java.lang.Object…)}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ENUM_SINGLETON,</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//其父类的构造器</span></span><br><span class="line">        Constructor&lt;EnumSingleton&gt; constructor = EnumSingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">String</span>.<span class="title">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        EnumSingleton singleton3 = constructor.newInstance(<span class="string">"ENUM_SINGLETON"</span>, <span class="number">666</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.IllegalArgumentException: Cannot reflectively create <span class="keyword">enum</span> objects</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">417</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.enumSingleton(Demo.java:<span class="number">59</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">36</span>)</span><br></pre></td></tr></table></figure></li><li><p>枚举能避免反射的原因，源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Constructor</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Executable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">               IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">                Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">                checkAccess(caller, clazz, <span class="keyword">null</span>, modifiers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果反射的类是枚举，则报异常</span></span><br><span class="line">        <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot reflectively create enum objects"</span>);</span><br><span class="line">        ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">        <span class="keyword">if</span> (ca == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ca = acquireConstructorAccessor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        T inst = (T) ca.newInstance(initargs);</span><br><span class="line">        <span class="keyword">return</span> inst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模式-反射破坏&quot;&gt;&lt;a href=&quot;#单例模式-反射破坏&quot; class=&quot;headerlink&quot; title=&quot;单例模式-反射破坏&quot;&gt;&lt;/a&gt;单例模式-反射破坏&lt;/h1&gt;&lt;h2 id=&quot;一、反射破坏&quot;&gt;&lt;a href=&quot;#一、反射破坏&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="单例模式" scheme="https://www.deschen.cn/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-单例模式</title>
    <link href="https://www.deschen.cn/2022/01/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/01/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-29T15:53:20.000Z</published>
    <updated>2023-05-04T02:04:04.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-单例模式"><a href="#设计模式-单例模式" class="headerlink" title="设计模式-单例模式"></a>设计模式-单例模式</h1><blockquote><p>由于要写23种设计模式博客，之前《详解五种单例模式》存在不足，我已经删了，可以在CSDN找到</p><p>请点击<a href="https://blog.csdn.net/weixin_39147889/article/details/103996455?spm=1001.2014.3001.5501" target="_blank" rel="noopener">CSDN链接</a></p></blockquote><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念: 一个类有且只有<strong>唯一</strong>一个实例，提供系统使用</li><li>主要用途：资源的共享、减少重复创建资源开销</li><li>优缺点<ul><li>优点：节约资源以及提高资源的利用率，如果一个应用总是产生相同的实例，实例一多，就会导致系统内存不足，运行响应缓慢，甚至宕机</li><li>缺点： 如果实例化的对象长时间不被利用，系统会认为该对象是垃圾而被回收，这可能会导致对象状态的丢失</li></ul></li><li>模式：懒汉模式、双重检测锁模式、饿汉模式、静态内部类模式、枚举单例模式</li></ul><h2 id="二、五种单例模式"><a href="#二、五种单例模式" class="headerlink" title="二、五种单例模式"></a>二、五种单例模式</h2><blockquote><p>单例模式三个主要特点：1、构造方法私有化；2、实例化的变量引用私有化；3、获取实例的方法共有</p></blockquote><ul><li><p>懒汉模式</p><ul><li><p>类初始化时不会立刻创建实例，而是当调用方法时创建</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传统的懒汉模式</span></span><br><span class="line"><span class="comment"> * 缺点：</span></span><br><span class="line"><span class="comment"> *     1、线程不安全，多线程下同时创建多个实例  </span></span><br><span class="line"><span class="comment"> *     2、存在指令重排的问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LazySingleton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断实例是否已创建</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式 &#123;<span class="doctag">@link</span> LazySingleton&#125;的改进版本，针对存在的问题改进</span></span><br><span class="line"><span class="comment"> * 优化点：</span></span><br><span class="line"><span class="comment"> *       1、synchronized，通过类锁，保证多线程下方法调用串行化，保证有且只有一个实例创建</span></span><br><span class="line"><span class="comment"> *       2、使用 volatile 避免指令重排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazySingleton01 singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LazySingleton01创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> synchrsonized LazySingleton01 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断实例是否已创建</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> LazySingleton01();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>双重检测锁模式</p><ul><li><p>进行了两次的判断，第一次是为了避免不要的实例，第二次结合<code>synchrsonized</code>，避免多线程创建多实例问题</p></li><li><p>PS：是对懒汉模式的进一步优化</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重校验锁单例模式，针对懒汉模式&#123;<span class="doctag">@link</span> LazySingleton01 &#125;存在性能问题的改进</span></span><br><span class="line"><span class="comment"> * 优点：线程安全</span></span><br><span class="line"><span class="comment"> * 优化点：第一次判断后再用synchronized类锁，避免所有线程调用方法时阻塞</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLockSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用volatile 防止指令重排</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckLockSingleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLockSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"DoubleCheckLockSingleton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLockSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否存在，避免重复创建实例,不过多线程可以进入</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">            <span class="comment">// 使用synchronized，单线程通行，防止多线程进入</span></span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckLockSingleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"thread of passing the first lock："</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">// 再次判断是否存在，防止多线程创建，达到双重检测</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"thread of creating instance: "</span> + Thread.currentThread().getName());</span><br><span class="line">                    singleton = <span class="keyword">new</span> DoubleCheckLockSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>饿汉模式</p><ul><li><p>类初始化时立刻创建实例，线程安全</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * 优点：线程安全，通过类加载机制保证只有一个实例</span></span><br><span class="line"><span class="comment"> * 缺点：造成内存浪费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类初始化创建实例</span></span><br><span class="line"><span class="comment">     * 使用final修饰，保证类初始化一次后，不能被修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton singlenton = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HungrySinglenton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singlenton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态内部类</p><ul><li><p>方法被调用时（懒汉模式），静态内部类初始化创建实例（饿汉模式）</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类</span></span><br><span class="line"><span class="comment"> * 优点：线程安全，通过类加载机制保证只有一个实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"StaticInnerSingleton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StaticInner.singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用final修饰，保证类初始化一次后，不能被修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInnerSingleton singleton = <span class="keyword">new</span> StaticInnerSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>枚举单例</p><ul><li><p>枚举单例也是一种单例模式，主要解决反射破坏单例模式约束问题（<code>JDK</code>会对反射做了处理）</p></li><li><p>反射破坏：通过反射机制调用私有的构造器，创建新的实例，破坏单例模式约束（前面四种设计模式都会被破坏）</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举单例模式</span></span><br><span class="line"><span class="comment"> *     优点：线程安全</span></span><br><span class="line"><span class="comment"> *     不足：不常用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line">    ENUM_SINGLETON,</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-单例模式&quot;&gt;&lt;a href=&quot;#设计模式-单例模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-单例模式&quot;&gt;&lt;/a&gt;设计模式-单例模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于要写23种设计模式博客，之前《详解五种单例模式》存在不
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="单例模式" scheme="https://www.deschen.cn/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-原型模式</title>
    <link href="https://www.deschen.cn/2022/01/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/01/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-28T12:51:41.000Z</published>
    <updated>2023-04-28T07:49:06.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：实现 <code>Cloneable</code> 接口，<strong>拷贝</strong> <strong>已创建的对象</strong>，创建新的对象</li><li>主要用途：直接创建的对象开销大时，直接克隆已创建的对象，减少开销</li><li>代码：实现 <code>cloneable</code> 接口的产品</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以文件为例，拷贝文件及文件夹</p></li><li><p>产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件抽象类，表示文件这类产品（文件、文件夹）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFile</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractFile <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"AbstractFile&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", content='"</span> + content + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String name, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractFile <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> File(<span class="keyword">this</span>.name, <span class="keyword">this</span>.content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件夹</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractFile&gt; files;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractFile <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Folder folder = <span class="keyword">new</span> Folder(<span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">for</span> (AbstractFile file : <span class="keyword">this</span>.files) &#123;</span><br><span class="line">            folder.addFile(file.clone());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> folder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFile</span><span class="params">(AbstractFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.files.add(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractFile&gt; <span class="title">getFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> files;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Folder&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", content='"</span> + content + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", files="</span> + files +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.doc"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        Folder folder = <span class="keyword">new</span> Folder(<span class="string">"test"</span>);</span><br><span class="line">        folder.addFile(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拷贝文件</span></span><br><span class="line">        AbstractFile copyFile = file.clone();</span><br><span class="line">        copyFile.setName(<span class="string">"test_copy.doc"</span>);</span><br><span class="line">        System.out.println(copyFile.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拷贝文件夹</span></span><br><span class="line">        AbstractFile copyFolder = folder.clone();</span><br><span class="line">        copyFolder.setName(<span class="string">"test_copy"</span>);</span><br><span class="line">        System.out.println(copyFolder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">AbstractFile&#123;name=<span class="string">'test_copy.doc'</span>, content=<span class="string">'123456'</span>&#125;</span><br><span class="line">Folder&#123;name=<span class="string">'test_copy'</span>, content=<span class="string">'null'</span>, files=[AbstractFile&#123;name=<span class="string">'test.doc'</span>, content=<span class="string">'123456'</span>&#125;]&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerlink&quot; title=&quot;一、详解&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="原型模式" scheme="https://www.deschen.cn/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-建造者模式</title>
    <link href="https://www.deschen.cn/2022/01/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/01/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-27T13:51:41.000Z</published>
    <updated>2023-04-29T12:45:27.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>产品抽象</strong>，创建其<strong>子产品</strong>及<strong>建造者</strong>，<strong>指导者</strong>通过<strong>建造者</strong>，管理<strong>子产品的依赖关系并创建</strong></li><li>主要用途：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。经常应用在产品的组成稳定，但各部分经常面临剧烈变化的业务场景</li><li>代码：产品抽象、产品子类及建造者、指导者</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以文件为例，创建不同类型的文件（文档、图片、视频等）</p></li><li><p>产品抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件抽象类，表示文件这类产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> FileType fileType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> fileSize;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Object content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileType <span class="title">getFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileType</span><span class="params">(FileType fileType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileType = fileType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFileSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileSize</span><span class="params">(<span class="keyword">long</span> fileSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"File&#123;"</span> +</span><br><span class="line">                <span class="string">"fileType="</span> + fileType +</span><br><span class="line">                <span class="string">", fileName='"</span> + fileName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", fileSize="</span> + fileSize +</span><br><span class="line">                <span class="string">", content="</span> + content +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>产品子类及建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文档类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Document</span> <span class="keyword">extends</span> <span class="title">File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Document</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 私有构造法，保证对象只能通过构造法生成</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">FileBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Document document;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.document = <span class="keyword">new</span> Document();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            document.setFileType(FileType.DOCUMENT);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            document.setFileName(name);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileSize</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">            document.setFileSize(size);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileContent</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">            document.setContent(content);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> File <span class="title">getFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> document;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Image</span> <span class="keyword">extends</span> <span class="title">File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Image</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 私有构造法，保证对象只能通过构造法生成</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">FileBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Image image;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.image = <span class="keyword">new</span> Image();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            image.setFileType(FileType.IMAGE);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            image.setFileName(name);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileSize</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">            image.setFileSize(size);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">buildFileContent</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">            image.setContent(content);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> File <span class="title">getFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指导者：通过建造者，管理产品的依赖顺序，并创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件指导类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDirector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">createFile</span><span class="params">(FileBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.buildFileType()</span><br><span class="line">                .getFile();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileBuilder documentBuilder = <span class="keyword">new</span> Document.Builder();</span><br><span class="line">        FileBuilder imageBuilder = <span class="keyword">new</span> Image.Builder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建文档文件</span></span><br><span class="line">        documentBuilder.buildFileName(<span class="string">"test.doc"</span>)</span><br><span class="line">                .buildFileSize(<span class="number">1024L</span>)</span><br><span class="line">                .buildFileContent(<span class="string">"This is a document."</span>);</span><br><span class="line">        File document = FileDirector.createFile(documentBuilder);</span><br><span class="line">        System.out.println(document.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建图片文件</span></span><br><span class="line">        imageBuilder.buildFileName(<span class="string">"test.png"</span>)</span><br><span class="line">                .buildFileSize(<span class="number">512L</span>)</span><br><span class="line">                .buildFileContent(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">        File image = FileDirector.createFile(imageBuilder);</span><br><span class="line">        System.out.println(image.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">File&#123;fileType=DOCUMENT, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=This is a document.&#125;</span><br><span class="line">File&#123;fileType=IMAGE, fileName=<span class="string">'test.png'</span>, fileSize=<span class="number">512</span>, content=[B@<span class="number">1</span>b6d3586&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerlink&quot; title=&quot;一、详解&quot;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="建造者模式" scheme="https://www.deschen.cn/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-抽象工厂模式</title>
    <link href="https://www.deschen.cn/2022/01/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/01/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-26T13:53:20.000Z</published>
    <updated>2023-05-05T03:06:39.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-抽象工厂模式"><a href="#设计模式-抽象工厂模式" class="headerlink" title="设计模式-抽象工厂模式"></a>设计模式-抽象工厂模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念: 定义一个<strong>抽象工厂接口</strong>，根据传入的<strong>类型</strong>创建对应的<strong>工厂</strong>，进而创建一组相关的对象</li><li>主要用途：有多于一个的产品族，根据类型选择某一组的产品</li><li>代码：多组产品接口、子类和工厂、抽象工厂、产品组选择器</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>多组产品接口、子类和工厂</p><ul><li><p>交通工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a bicycle."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a car."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a plane."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transport <span class="title">createTransport</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"car"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bicycle"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Bicycle();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"plane"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Plane();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid transport type: "</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">createAnimal</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>动物类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bird fly."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cat run."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fish</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fish swim."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transport <span class="title">createTransport</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">createAnimal</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"cat"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bird"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Bird();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"fish"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Fish();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid animal type: "</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>抽象工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Transport <span class="title">createTransport</span><span class="params">(String type)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Animal <span class="title">createAnimal</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>产品组选择器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactorySelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"transport"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> TransportFactory();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"animal"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AnimalFactory();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid factory type: "</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 选择交通工具工厂</span></span><br><span class="line">        AbstractFactory transportFactory = FactorySelector.getFactory(<span class="string">"transport"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建汽车</span></span><br><span class="line">        Transport car = transportFactory.createTransport(<span class="string">"car"</span>);</span><br><span class="line">        car.drive();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建自行车</span></span><br><span class="line">        Transport bicycle = transportFactory.createTransport(<span class="string">"bicycle"</span>);</span><br><span class="line">        bicycle.drive();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建飞机</span></span><br><span class="line">        Transport plane = transportFactory.createTransport(<span class="string">"plane"</span>);</span><br><span class="line">        plane.drive();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"========================"</span>);</span><br><span class="line">        <span class="comment">// 选择动物工厂</span></span><br><span class="line">        AbstractFactory animalFactory = FactorySelector.getFactory(<span class="string">"animal"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建猫</span></span><br><span class="line">        Animal cat = animalFactory.createAnimal(<span class="string">"cat"</span>);</span><br><span class="line">        cat.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建鸟</span></span><br><span class="line">        Animal bird = animalFactory.createAnimal(<span class="string">"bird"</span>);</span><br><span class="line">        bird.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建鱼</span></span><br><span class="line">        Animal fish = animalFactory.createAnimal(<span class="string">"fish"</span>);</span><br><span class="line">        fish.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Driving a car.</span><br><span class="line">Driving a bicycle.</span><br><span class="line">Driving a plane.</span><br><span class="line">========================</span><br><span class="line">Cat run</span><br><span class="line">Bird fly.</span><br><span class="line">Fish swim.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-抽象工厂模式&quot;&gt;&lt;a href=&quot;#设计模式-抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-抽象工厂模式&quot;&gt;&lt;/a&gt;设计模式-抽象工厂模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="抽象工厂模式" scheme="https://www.deschen.cn/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-工厂模式</title>
    <link href="https://www.deschen.cn/2022/01/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.deschen.cn/2022/01/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-25T12:53:20.000Z</published>
    <updated>2023-05-05T07:01:28.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-工厂模式"><a href="#设计模式-工厂模式" class="headerlink" title="设计模式-工厂模式"></a>设计模式-工厂模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>产品接口</strong>，根据向<strong>工厂类</strong>传递的<strong>类型</strong>，创建相应的<strong>产品实例</strong>并返回</li><li>主要用途：根据不同条件，创建不同产品</li><li>代码：产品接口、产品子类、工厂类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以交通工具为例，根据不同类型，驾驶不同交通工具</p></li><li><p>产品接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>产品子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a bicycle."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a car."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a plane."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.deschen.designPattern.factoryPattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.deschen.designPattern.factoryPattern.entity.Bicycle;</span><br><span class="line"><span class="keyword">import</span> cn.deschen.designPattern.factoryPattern.entity.Car;</span><br><span class="line"><span class="keyword">import</span> cn.deschen.designPattern.factoryPattern.entity.Plane;</span><br><span class="line"><span class="keyword">import</span> cn.deschen.designPattern.factoryPattern.entity.Transport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> hanbin_chen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 交通工具工厂，根据条件动态创建对象并返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transport <span class="title">createTransport</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"car"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bicycle"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Bicycle();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"plane"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Plane();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid transport type: "</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建汽车</span></span><br><span class="line">        Transport car = TransportFactory.createTransport(<span class="string">"car"</span>);</span><br><span class="line">        car.drive();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建自行车</span></span><br><span class="line">        Transport bicycle = TransportFactory.createTransport(<span class="string">"bicycle"</span>);</span><br><span class="line">        bicycle.drive();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建飞机</span></span><br><span class="line">        Transport plane = TransportFactory.createTransport(<span class="string">"plane"</span>);</span><br><span class="line">        plane.drive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Driving a car.</span><br><span class="line">Driving a bicycle.</span><br><span class="line">Driving a plane.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-工厂模式&quot;&gt;&lt;a href=&quot;#设计模式-工厂模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-工厂模式&quot;&gt;&lt;/a&gt;设计模式-工厂模式&lt;/h1&gt;&lt;h2 id=&quot;一、详解&quot;&gt;&lt;a href=&quot;#一、详解&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.deschen.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="工厂模式" scheme="https://www.deschen.cn/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Yapi的部署和使用</title>
    <link href="https://www.deschen.cn/2021/05/10/Yapi%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.deschen.cn/2021/05/10/Yapi%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-10T00:07:50.255Z</published>
    <updated>2021-05-12T05:44:40.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Yapi-的部署和使用"><a href="#Yapi-的部署和使用" class="headerlink" title="Yapi 的部署和使用"></a>Yapi 的部署和使用</h1><h2 id="一、基于-docker-compose-部署-Yapi"><a href="#一、基于-docker-compose-部署-Yapi" class="headerlink" title="一、基于 docker-compose 部署 Yapi"></a>一、基于 docker-compose 部署 Yapi</h2><blockquote><p>如何部署 docker-compose，点击我博客的<a href="https://deschen.gitee.io/2021/03/23/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">链接</a></p></blockquote><ul><li>部署 Yapi 的 docker-compose.yml。PS：因为 Yapi 的数据库就是MongoDB，所以部署 Yapi 要同时部署 MongoDB</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">yapi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mrjin/yapi:latest</span></span><br><span class="line">    <span class="comment"># build: ./</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">yapi</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VERSION=1.5.6</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOG_PATH=/tmp/yapi.log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOME=/home</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PORT=3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ADMIN_EMAIL=me@jinfeijie.cn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_SERVER=mongo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_NAME=yapi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PORT=27017</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">13000</span><span class="string">:3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9090</span><span class="string">:9090</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./log/yapi.log:/home/vendors/log</span> <span class="comment"># log dir</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">"bash /wait-for-it.sh mongo:27017 -- entrypoint.sh"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yapi</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../mongodb/db:/data/db</span> <span class="comment">#db dir</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yapi</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">yapi:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h2 id="二、IDEA-关于-Yapi-的使用"><a href="#二、IDEA-关于-Yapi-的使用" class="headerlink" title="二、IDEA 关于 Yapi 的使用"></a>二、IDEA 关于 Yapi 的使用</h2><ul><li><p>先下载 YapiUpload 插件，用于把接口上传到 Yapi 应用上</p></li><li><p>在 .idea 文件夹下的 misc.xml 插入 关于 Yapi 的配置,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- yapi配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"yapi"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectToken"</span>&gt;</span>22bffb576415df1b8d088176dd9090cd2d5a29141a23d059f68f8988d1823d20<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectId"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"yapiUrl"</span>&gt;</span>http://192.168.163.138:3000<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectType"</span>&gt;</span>api<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Yapi-的部署和使用&quot;&gt;&lt;a href=&quot;#Yapi-的部署和使用&quot; class=&quot;headerlink&quot; title=&quot;Yapi 的部署和使用&quot;&gt;&lt;/a&gt;Yapi 的部署和使用&lt;/h1&gt;&lt;h2 id=&quot;一、基于-docker-compose-部署-Yapi&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker-compose + jenkins搭建部署</title>
    <link href="https://www.deschen.cn/2021/03/23/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.deschen.cn/2021/03/23/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</id>
    <published>2021-03-23T00:53:17.288Z</published>
    <updated>2021-03-25T01:25:25.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-jenkins搭建部署"><a href="#docker-compose-jenkins搭建部署" class="headerlink" title="docker-compose + jenkins搭建部署"></a>docker-compose + jenkins搭建部署</h1><p>[toc]</p><h2 id="一、docker的下载安装"><a href="#一、docker的下载安装" class="headerlink" title="一、docker的下载安装"></a>一、docker的下载安装</h2><ul><li><p>docker安装环境条件</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Docker安装环境条件</span><br><span class="line"># <span class="number">1</span>、Docker 运行在 CentOS <span class="number">7</span> 上，要求系统为<span class="number">64</span>位、系统内核版本为 <span class="number">3.10</span> 以上。</span><br><span class="line"># <span class="number">2</span>、Docker 运行在 CentOS<span class="number">-6.5</span> 或更高的版本的 CentOS 上，要求系统为<span class="number">64</span>位、系统内核版本为 <span class="number">2.6</span><span class="number">.32</span><span class="number">-431</span> 或者更高版本。内核编译时需要激活namespace,CGgroup,netfilter,veth等特性，还对iptablest等工具版有依赖要求。</span><br><span class="line"></span><br><span class="line"># 查看linux版本 需要CentOS7版本以上</span><br><span class="line">rpm -q centos-release</span><br><span class="line"># 查看内核版本</span><br><span class="line">uname -r</span><br></pre></td></tr></table></figure></li><li><p>卸载旧的docker</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧的安装的组件</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum remove docker \</span></span><br><span class="line">                  <span class="meta">docker-client</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-client-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-common</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-latest-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="attr">docker-engine</span></span><br></pre></td></tr></table></figure></li><li><p>安装依赖及设置存储库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装yum-utils</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum install -y yum-utils</span></span><br><span class="line"><span class="comment"># 设置稳定的存储库</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum-config-manager \</span></span><br><span class="line">    <span class="meta">--add-repo</span> <span class="string">\</span></span><br><span class="line">    <span class="attr">http</span>:<span class="string">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接安装最新Docker引擎和容器</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum -y install docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"><span class="comment"># 安装完成后查看版本</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><p>或者安装指定版本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 列出可用版本</span><br><span class="line">yum <span class="keyword">list</span> docker-<span class="keyword">ce</span> --showduplicates | <span class="keyword">sort</span> -r</span><br><span class="line"># 安装指定版本</span><br><span class="line">sudo yum install docker-<span class="keyword">ce</span>-<span class="symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="keyword">ce</span>-cli-<span class="symbol">&lt;VERSION_STRING&gt;</span> containerd.io</span><br><span class="line"># 例子</span><br><span class="line">sudo yum install docker-<span class="keyword">ce</span>-<span class="number">18.09</span>.<span class="number">1</span> docker-<span class="keyword">ce</span>-cli-<span class="number">18.09</span>.<span class="number">1</span> containerd.io</span><br></pre></td></tr></table></figure></li><li><p>docker的操作</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="comment"># 停止docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="comment"># 设置开机自启动</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="comment"># 查看信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 查看帮助文档</span></span><br><span class="line">docker --help</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">- <span class="comment"># 1、卸载 Docker 引擎、CLI 和容器包</span></span><br><span class="line">    sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">- <span class="comment"># 2、主机上的图像、容器、卷或自定义配置文件不会自动删除。要删除所有图像、容器和卷</span></span><br><span class="line">    sudo rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></span><br><span class="line">- <span class="comment"># 3、必须手动删除任何编辑的配置文件</span></span><br><span class="line">    sudo rm 配置文件</span><br></pre></td></tr></table></figure></li><li><p>验证docker是否安装成功</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下拉并运行hello-world镜像</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></li><li><p>阿里镜像源做为docker镜像源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">》注册阿里账号》搜索：容器镜像》镜像加速器》选择CentOS》直接复制命令运行</span><br></pre></td></tr></table></figure><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210323111816853.png" alt="image-20210323111816853"></p></li></ul><h2 id="二、docker-compose安装"><a href="#二、docker-compose安装" class="headerlink" title="二、docker-compose安装"></a>二、docker-compose安装</h2><ul><li><p>docker-compose安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https:<span class="regexp">//gi</span>thub.com<span class="regexp">/docker/</span>compose<span class="regexp">/releases/</span>download<span class="regexp">/1.21.2/</span>docker-compose-$(uname -s)-$(uname -m) -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line">sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line"><span class="comment"># 1.21.2 是docker-compose版本，可以根据自己需求在github查找版本</span></span><br><span class="line"><span class="comment"># docker-compose-$(uname -s)-$(uname -m)  在centos7中输出为docker-compose-Linux-x86_64</span></span><br></pre></td></tr></table></figure></li><li><p>docker-compose命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose 命令默认使用的配置文件是当前目录中的 docker-compose.yml 文件</span></span><br><span class="line">docker<span class="literal">-compose</span> up</span><br><span class="line"><span class="comment"># -f 指定其他配置文件。可以添加多个 -f 选项，docker-compose 会自动合并它们，当然也会根据先后顺序把一些重复的配置项覆盖掉</span></span><br><span class="line"><span class="comment"># 自动完成包括构建镜像，(重新)创建服务，启动服务，并关联服务相关容器的一系列操作。不过在前台打印信息，ctrl+c容器就会停止</span></span><br><span class="line">docker<span class="literal">-compose</span> <span class="operator">-f</span> docker<span class="literal">-compose</span>.yml <span class="operator">-f</span> docker<span class="literal">-compose</span><span class="literal">-dev</span> up </span><br><span class="line"><span class="comment"># 后台启动并运行</span></span><br><span class="line">docker<span class="literal">-compose</span> <span class="operator">-f</span> docker<span class="literal">-compose</span>.yml <span class="operator">-f</span> docker<span class="literal">-compose</span><span class="literal">-dev</span> up <span class="literal">-d</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三、docker-compose-jenkins部署"><a href="#三、docker-compose-jenkins部署" class="headerlink" title="三、docker-compose+jenkins部署"></a>三、docker-compose+jenkins部署</h2><ul><li><p>关于jenkins的docker-compose.yml文件</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: '3.1'</span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    image: jenkins/jenkins:lts</span><br><span class="line">    volumes:       # 挂载目录  本地文件夹目录:容器文件夹目录</span><br><span class="line">      -<span class="ruby"> /data/jenkins/<span class="symbol">:/var/jenkins_home</span></span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/var/run</span><span class="regexp">/docker.sock:/var</span><span class="regexp">/run/docker</span>.sock</span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/usr/bin</span><span class="regexp">/docker:/usr</span><span class="regexp">/bin/docker</span></span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/usr/lib</span><span class="regexp">/x86_64-linux-gnu/libltdl</span>.so.<span class="number">7</span><span class="symbol">:/usr/lib/x86_64-linux-gnu/libltdl</span>.so.<span class="number">7</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">ports:</span>   <span class="comment"># 绑定端口</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"8080:8080"</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">expose:</span>  <span class="comment"># 暴露端口</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"8080"</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"50000"</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">privileged:</span> <span class="literal">true</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">user:</span> root</span></span><br><span class="line"><span class="ruby">    <span class="symbol">restart:</span> always</span></span><br><span class="line"><span class="ruby">    <span class="symbol">container_name:</span> jenkins</span></span><br><span class="line"><span class="ruby">    <span class="symbol">environment:</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">JAVA_OPTS:</span> <span class="string">'-Djava.util.logging.config.file=/var/jenkins_home/log.properties'</span></span></span><br></pre></td></tr></table></figure></li><li><p>在docker-compose.yml的目录输入<code>docker-compose up -d</code></p></li><li><p>输入网址 ip + 端口访问，若显示页面，则jenkins启动成功</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210325092428652.png" alt="image-20210325092428652"></p></li></ul><h2 id="四、异常处理"><a href="#四、异常处理" class="headerlink" title="四、异常处理"></a>四、异常处理</h2><ol><li>如果创建任务时，没有maven项目选项，则在下载安装对应maven插件</li><li>如果构建环境没有send ssh选项，则下载安装对应Publish Over SSH插件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker-compose-jenkins搭建部署&quot;&gt;&lt;a href=&quot;#docker-compose-jenkins搭建部署&quot; class=&quot;headerlink&quot; title=&quot;docker-compose + jenkins搭建部署&quot;&gt;&lt;/a&gt;docker
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="https://www.deschen.cn/2021/03/13/Java%E5%8F%8D%E5%B0%84/"/>
    <id>https://www.deschen.cn/2021/03/13/Java%E5%8F%8D%E5%B0%84/</id>
    <published>2021-03-13T15:16:43.162Z</published>
    <updated>2021-03-14T05:22:23.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><p>[toc]</p><h2 id="一、什么是反射？"><a href="#一、什么是反射？" class="headerlink" title="一、什么是反射？"></a>一、什么是反射？</h2><ul><li><p>反射实在程序时动态加载类并获取类的详细信息，从而操作类或对象属性和方法。</p></li><li><p>本质在JVM中获取class对象，在对class对象反编译，从而获取对象的各种信息</p></li><li><p>类加载与反射原理图</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210313232232665.png" alt="image-20210313232232665"></p></li></ul><h2 id="二、反射的优缺点"><a href="#二、反射的优缺点" class="headerlink" title="二、反射的优缺点"></a>二、反射的优缺点</h2><ul><li>优点<ul><li>增加程序的灵活性，避免程序写死在代码里<ul><li>因为Java是先编译后运行的语言，要想实例一个类，那么必须修改源代码重新编译。而反射不需要通过编译获取，比如反射可以通过配置文件里面的类信息实例化某类</li></ul></li></ul></li><li>缺点<ul><li>影响程序性能：反射包括一些动态类型，所以JVM无法对代码进行修改，因此效率比非反射要低得多。在性能方面要求高的代码最好不要使用反射</li><li>内部暴露：反射可以执行一些正常情况下不允许的操作（比如访问私有方法和属性），所以反射会导致出乎意料的事件发生——代码有功能上错误，破坏抽象性</li></ul></li></ul><h3 id="三、反射的用途"><a href="#三、反射的用途" class="headerlink" title="三、反射的用途"></a>三、反射的用途</h3><ul><li>框架的开发，比如Spring框架的配置化，读取XML文件配置的Bean进行加载。</li></ul><h2 id="四、反射常用的类"><a href="#四、反射常用的类" class="headerlink" title="四、反射常用的类"></a>四、反射常用的类</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.lang.Class;</span><br><span class="line"></span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Constructor</span>;</span></span><br><span class="line"></span><br><span class="line">Java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Method</span>;</span></span><br><span class="line"></span><br><span class="line">Java.lang.reflect.Modifier;</span><br></pre></td></tr></table></figure><h2 id="五、反射的基本使用"><a href="#五、反射的基本使用" class="headerlink" title="五、反射的基本使用"></a>五、反射的基本使用</h2><ul><li><p>获取Class</p><ul><li><p>调用对象的getClass方法</p></li><li><p>调用类的静态属性 class属性</p></li><li><p>调用Class的静态方法forName(“类全限定名“)(最常用)</p></li><li><p>三种比较判断</p><ul><li>三种方式中，常用第三种，第一种对象都有了还要反射干什么，第二种需要导入类包，依赖太强，不导包就抛编译错误。一般都使用第三种，一个字符串可以传入也可以写在配置文件中等多种方法。    </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类的三种方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClassTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、调用对象的getClass方法</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">12</span>);</span><br><span class="line">        Class&lt;? extends Person&gt; personClass1 = person.getClass();</span><br><span class="line">        System.out.println(personClass1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、调用类的静态属性 class属性</span></span><br><span class="line">        Class&lt;Person&gt; personClass2 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(personClass2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、调用Class的静态方法forName("类全限定名“)</span></span><br><span class="line">        Class&lt;?&gt; personClass3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            personClass3 = Class.forName(<span class="string">"cn.deschen.features.jdk8.cn.deschen.reflect.Person"</span>);</span><br><span class="line">            System.out.println(personClass3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在运行期间，一个类，只有一个Class对象产生，所以打印结果都是true；</span></span><br><span class="line">        System.out.println(personClass1 == personClass2);</span><br><span class="line">        System.out.println(personClass2 == personClass3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>判断是否为某个类的示例</p><ul><li>一般的，我们使用instanceof 关键字来判断是否为某个类的实例。同时我们也可以借助反射中Class对象的isInstance()方法来判断时候为某个类的实例，他是一个native方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断是否为某类实例</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isInstanceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Person person = <span class="keyword">new</span> Person();</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 1、使用instanceof判断</span></span><br><span class="line">      System.out.println(person <span class="keyword">instanceof</span> Person);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 2、使用类.isInstance(实例)</span></span><br><span class="line">      System.out.println(Person<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">person</span>))</span>;</span><br><span class="line">      System.out.println(ReflectCase<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">person</span>))</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建实例：通过反射来生成对象主要有两种方法</p><ul><li>使用Class对象的newInstance()方法来创建Class对象对应类的实例。</li><li>先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建对象，这种方法可以用指定的构造器构造类的实例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、使用Class对象的newInstance()方法来创建Class对象对应类的实例</span></span><br><span class="line">        Person person1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            person1 = Person<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(person1.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建对象，这种方法可以用指定的构造器构造类的实例。</span></span><br><span class="line">        Person person2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;Person&gt; constructor = Person<span class="class">.<span class="keyword">class</span>.<span class="title">getConstructor</span>()</span>;</span><br><span class="line">            person2 = constructor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exceptionalness e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(person2.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java反射&quot;&gt;&lt;a href=&quot;#Java反射&quot; class=&quot;headerlink&quot; title=&quot;Java反射&quot;&gt;&lt;/a&gt;Java反射&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、什么是反射？&quot;&gt;&lt;a href=&quot;#一、什么是反射？&quot; class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Nginx工作原理详解</title>
    <link href="https://www.deschen.cn/2021/03/09/Nginx%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.deschen.cn/2021/03/09/Nginx%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-03-09T12:54:34.158Z</published>
    <updated>2021-03-09T13:16:20.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx工作原理讲解"><a href="#Nginx工作原理讲解" class="headerlink" title="Nginx工作原理讲解"></a>Nginx工作原理讲解</h1><p>[toc]</p><h2 id="一、Nginx工作过程"><a href="#一、Nginx工作过程" class="headerlink" title="一、Nginx工作过程"></a>一、Nginx工作过程</h2><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210309210052409.png" alt="image-20210309210052409"></p><ol><li>在nginx启动后，会有一个master进程和多个worker进程，master进程主要用来管理worker进程，包括：接受信号，将信号分发给worker进程，监听worker进程工作状态，当worker进程退出时(非正常)，启动新的worker进程。基本的网络事件会交给worker进程处理。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的 。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。 worker进程的个数是可以设置的，一般我们会设置与机器cpu核数一致，这里面的原因与nginx的进程模型以及事件处理模型是分不开的 。</li><li>当master接收到重新加载的信号会怎么处理(./nginx -s reload)?，master会重新加载配置文件，然后启动新的进程，使用的新的worker进程来接受请求，并告诉老的worker进程他们可以退休了，老的worker进程将不会接受新的，老的worker进程处理完手中正在处理的请求就会退出。</li><li>worker进程是如何处理用户的请求呢？首先master会根据配置文件生成一个监听相应端口的socket，然后创建多个worker进程，这样每个worker就可以接受从socket过来的消息。当一个连接过来的时候，每一个worker都能接收到通知，但是只有一个worker能和这个连接建立关系，其他的worker都会连接失败，这就是所谓的惊群现象。为了解决这个问题，nginx提供一个共享锁accept_mutex，有了这个共享锁后，就会只有一个worker去接收这个连接。当一个worker进程在accept这个连接之后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后才断开连接，这样一个完整的请求就是这样的了。</li></ol><h2 id="二、nginx的事件驱动机制"><a href="#二、nginx的事件驱动机制" class="headerlink" title="二、nginx的事件驱动机制"></a>二、nginx的事件驱动机制</h2><ul><li>为什么几个worker进程能同时接收上万的请求呢？这是因为nginx事件处理机制是异步非阻塞的。nginx将一个请求划分为多个阶段来异步处理模块，每个阶段只是处理请求的一部分，如果请求的这一部分发生阻塞，nginx不会等待，它会处理其他的请求的某一部分。</li><li>与传统web服务不同之处<ul><li>传统web服务器的每个事件消费者独占一个进程(线程)资源,这种情况对于用户规模较小的情况来说,用户响应速度快,但是当并发规模达到数十万上百万的时候,由于线程(进程)数目过多,会频繁的切换,而且当线程阻塞的时候会进行睡眠,也会造成资源的浪费,这样服务器就会产生瓶颈.</li><li>nginx服务器采用的事件驱动机制不同,他不会为每个消费事件创建一个进程或线程,这样就不会产生由于进程间频繁切换占用cpu而产生的瓶颈,而且nginx不会让事件阻塞,即采用无阻塞事件驱动模型,这样就不会因为事件阻塞使进程睡眠而造成的资源浪费.</li></ul></li></ul><h2 id="三、epoll库"><a href="#三、epoll库" class="headerlink" title="三、epoll库"></a>三、epoll库</h2><ul><li>epoll库是Nginx服务器支持的高性能事件驱动库之一。它是公认的最好的事件驱动模型。和poll库及select库有很大的区别。</li><li>poll和select都是创建一个待处理事件列表，然后把这个列表发给内核，返回的时候，再去轮询检查这个列表。以判断这个事件是否发生。在描述符太多的情况下，就会明显效率低下了。</li><li>epoll是这么做的，它把事件描述符列表的管理交给内核复制。一旦有某个事件发生，内核将发生事件的事件描述符交给Nginx的进程，而不是将整个事件描述符列表交给进程，让进程去轮询具体是哪个描述符。epoll()避免了轮询整个事件描述符列表。所以显得更高效。</li><li>epoll库的基本步骤：<ul><li>epoll库通过相关调用通知内核创建一个有N个描述符的事件列表，然后给这个事件列表设置自己关心的事件。并把它添加到内核中。在具体的代码中还可以实现对相关调用的事件描述符列表进行修改和删除。</li><li>一旦设置完成就一直等待内核通知事件发生了，某一事件发生后，内核就将发生事件的描述符给epoll库，epoll库去处理事件。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx工作原理讲解&quot;&gt;&lt;a href=&quot;#Nginx工作原理讲解&quot; class=&quot;headerlink&quot; title=&quot;Nginx工作原理讲解&quot;&gt;&lt;/a&gt;Nginx工作原理讲解&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、Nginx工作过程&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Freemarker学习</title>
    <link href="https://www.deschen.cn/2021/03/05/Freemarker%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.deschen.cn/2021/03/05/Freemarker%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-05T10:42:58.000Z</published>
    <updated>2021-03-17T16:29:59.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Freemarker学习"><a href="#Freemarker学习" class="headerlink" title="Freemarker学习"></a>Freemarker学习</h1><p>[toc]</p><blockquote><p>注意点：</p><p>1、Freemarker得注释是&lt;#–注释的内容–&gt;</p><p>2、Freemarker的标签必须完整，否则报错、失效</p></blockquote><h2 id="一、如何显示数据语法"><a href="#一、如何显示数据语法" class="headerlink" title="一、如何显示数据语法"></a>一、如何显示数据语法</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&#123;num&#125;  # num八大基础类型</span><br><span class="line">$&#123;emp.name&#125;  # obj是对象，并且要满足javaBean的规范，以及该类要以public修饰，否则无法获取其属性</span><br><span class="line">$&#123;emp.date ? <span class="keyword">string</span>（'yyyy -MM-dd'）&#125;   # 日期输出 </span><br><span class="line"><span class="comment"># list遍历，item_has_next返回true / false，需要以string返回，否则报错</span></span><br><span class="line">&lt;#<span class="keyword">list</span> <span class="keyword">list</span> as item&gt;</span><br><span class="line">    &lt;div&gt;对象：$&#123;item&#125;, 索引：$&#123;item_index&#125;，是否有下一个：$&#123;item_has_next ? <span class="keyword">string</span>&#125;&lt;/div&gt;</span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br><span class="line"><span class="comment"># map遍历</span></span><br><span class="line">&lt;#<span class="keyword">list</span> map?keys as key&gt;</span><br><span class="line">&lt;div&gt;键：$&#123;key&#125; 键值：$&#123;map[key]&#125;, 索引：$&#123;key_index&#125;，是否有下一个：$&#123;key_has_next ? <span class="keyword">string</span>&#125;&lt;/div&gt;</span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量存在，输出该变量，否则不输出</span></span><br><span class="line"><span class="variable">$&#123;</span>emp.name ? if_exists&#125;  </span><br><span class="line"><span class="variable">$&#123;</span>emp.name ! &#125;</span><br><span class="line"><span class="comment"># 变量不存在，取默认值xxx</span></span><br><span class="line"><span class="variable">$&#123;</span>emp.name ? default(<span class="string">"xxx"</span>)&#125;</span><br><span class="line"><span class="variable">$&#123;</span>emp.name ! <span class="string">"xxx"</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"123&lt;br&gt;456"</span> ? html&#125;    　<span class="comment"># 对字符串进行HTML编码，对html中特殊字符进行转义，即网页显示该字符串内容</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"str"</span> ? cap_first&#125;    　　<span class="comment"># 使字符串第一个字母大写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"str"</span> ? uncap_first&#125;    　　<span class="comment"># 使字符串第一个字母大写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"Str"</span> ? lower_case&#125;       <span class="comment"># 将字符串转换成小写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"Str"</span> ? upper_case&#125;       <span class="comment"># 将字符串转换成大写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">" str "</span> ? trim&#125;           <span class="comment"># 去掉字符串前后的空白字符</span></span><br><span class="line"><span class="variable">$&#123;</span>str ? contains(<span class="string">"xx"</span>) ? string&#125;  <span class="comment"># 字符串是否包含"xxx",返回"true"或"false"</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"你好 $&#123;emp.name !&#125;"</span>&#125;    <span class="comment"># 输出你好+变量名  </span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"你好 "</span> + emp.name !&#125;        <span class="comment"># 使用+号来连接，输出你好+变量名</span></span><br><span class="line"><span class="variable">$&#123;</span>emp ? length&#125;      <span class="comment"># 字符串的长度</span></span><br><span class="line"><span class="variable">$&#123;</span>str ? index_of（<span class="string">"x"</span>）&#125;   <span class="comment"># 字符串对应"x"所在位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取子串</span></span><br><span class="line">&lt;<span class="comment">#assign str ="abcdefghijklmn"/&gt;</span></span><br><span class="line"><span class="variable">$&#123;</span>str ? substring(0 , <span class="number">4</span>)&#125;   <span class="comment"># 1、截取第0位到第3位，输出abcd</span></span><br><span class="line"><span class="variable">$&#123;</span>str[0]&#125; <span class="variable">$&#123;</span>str[<span class="number">4</span>]&#125;   <span class="comment"># 2、截取第0位和第4位结果是ae</span></span><br><span class="line"><span class="variable">$&#123;</span>str[<span class="number">1</span>..<span class="number">4</span>]&#125;         <span class="comment"># 3、截取第1位到第4位结果是bcde</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split分割字符串</span></span><br><span class="line">&lt;<span class="comment">#list "a|b|c" ? split("|") as item&gt;</span></span><br><span class="line"><span class="variable">$&#123;</span>item&#125;</span><br><span class="line">&lt;<span class="regexp">/#list&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、数字语法"><a href="#三、数字语法" class="headerlink" title="三、数字语法"></a>三、数字语法</h2><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign <span class="symbol">x</span> = <span class="number">2.582</span> /&gt;</span><br><span class="line">$&#123;<span class="symbol">x</span> ? <span class="built_in">string</span>.number&#125;  # 数字 <span class="number">2.582</span></span><br><span class="line">$&#123;<span class="symbol">x</span> ? <span class="built_in">string</span>.currency&#125;  # 货币 ￥<span class="number">2.58</span>  小数点<span class="number">2</span>位</span><br><span class="line">$&#123;<span class="symbol">x</span> ? <span class="built_in">string</span>.percent&#125;  # 百分号 <span class="number">258</span>%  无小数点</span><br><span class="line">$&#123;<span class="symbol">x</span> ? int&#125;  # 整型<span class="number">2</span></span><br><span class="line"></span><br><span class="line"># 数字格式化插值可采用＃&#123;expr; format&#125;形式来格式化数字，其中格式可以是</span><br><span class="line"># mX：小数部分最小X位</span><br><span class="line"># MX：小数部分最大X位</span><br><span class="line">&lt;#assign <span class="symbol">x</span> = <span class="number">2.582</span> /&gt;</span><br><span class="line">&lt;#assign <span class="symbol">y</span> = <span class="number">4</span> /&gt; </span><br><span class="line">&#123;<span class="symbol">x</span>; M2&#125; <span class="comment">//输出2.58 </span></span><br><span class="line">&#123;<span class="symbol">y</span>; M2&#125; <span class="comment">//输出4 </span></span><br><span class="line">&#123;<span class="symbol">x</span>; m2&#125; <span class="comment">//输出2.58 </span></span><br><span class="line">&#123;Y; m2&#125; <span class="comment">//输出4.0</span></span><br><span class="line">&#123;<span class="symbol">x</span>; m1M2&#125; <span class="comment">//输出2.58 </span></span><br><span class="line">&#123;<span class="symbol">x</span>; m1M2&#125; <span class="comment">//输出4.0</span></span><br></pre></td></tr></table></figure><h2 id="四、运算算符"><a href="#四、运算算符" class="headerlink" title="四、运算算符"></a>四、运算算符</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">表达式中支持的比较运算符符如下几个：</span><br><span class="line">=或==：判断两个值是否相等。</span><br><span class="line">！=：判断两个值是否不等。</span><br><span class="line">&gt; 或 gt：判断左边值是否大于右边值</span><br><span class="line">&lt;= 或 lte：判断左边值是否小于等于右边值</span><br><span class="line"></span><br><span class="line">算数运算符</span><br><span class="line">加减乘除：+, -, *, /, ％</span><br><span class="line">注意：</span><br><span class="line">（<span class="number">1</span>）运算符两边必须是数字</span><br><span class="line">（<span class="number">2</span>）使用+运算符时，如果一边是数字，一边是字符串，就会自动将数字转换为字符串再连接，</span><br><span class="line">     如：$ &#123;<span class="number">3</span> +“<span class="number">5</span>”&#125;，结果是：<span class="number">35</span></span><br><span class="line">     </span><br><span class="line">逻辑运算符</span><br><span class="line">逻辑与：&amp;&amp; </span><br><span class="line">逻辑或：|| </span><br><span class="line">逻辑非：！</span><br><span class="line">逻辑运算符只能作用于布尔值，否则将产生错误</span><br><span class="line"></span><br><span class="line">运算符优先级如下（由高到低排列）</span><br><span class="line"><span class="number">1</span>、一元运算符：！</span><br><span class="line"><span class="number">2</span>、内建函数：</span><br><span class="line"><span class="number">3</span>、乘除法：*，/，％</span><br><span class="line"><span class="number">4</span>、加减法： - ，+ </span><br><span class="line"><span class="number">5</span>、比较：&gt;，&lt;，&gt; =，&lt;=（lt，lte，gt，gte）</span><br><span class="line"><span class="number">6</span>、相等：==，=， ！= </span><br><span class="line"><span class="number">7</span>、逻辑与：&amp;&amp; </span><br><span class="line"><span class="number">8</span>、逻辑或：|| </span><br><span class="line"><span class="number">9</span>、数字范围：.. 实际上，我们在开发过程中应该使用括号来严格区分，这样的可读性好，出错少</span><br></pre></td></tr></table></figure><h2 id="五、条件判断"><a href="#五、条件判断" class="headerlink" title="五、条件判断"></a>五、条件判断</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> else逻辑判断</span><br><span class="line"><span class="comment"># 示例中conditioinN, N位序号。若其中不为空则执行该条件语句</span></span><br><span class="line">&lt;<span class="comment">#if condition1&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;<span class="comment">#elseif condition2&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;<span class="comment">#elseif condition3&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;<span class="comment">#else&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;/<span class="comment">#if&gt;</span></span><br><span class="line"><span class="comment"># 注意点：$&#123;..&#125;只能用于文本部分,不能用于表达式</span></span><br><span class="line">比如：</span><br><span class="line">&lt;<span class="comment">#if $&#123;isBig&#125;&gt;Wow!&lt;/#if&gt;   # 错误</span></span><br><span class="line">&lt;<span class="comment">#if isBig&gt;Wow!&lt;/#if&gt; #正确</span></span><br><span class="line"></span><br><span class="line">switch</span><br><span class="line"><span class="comment"># 跟java的switch一样，注意break，若无break，则执行后不跳出，而是直接执行下面的语句</span></span><br><span class="line">&lt;<span class="comment">#switch value&gt; </span></span><br><span class="line">&lt;<span class="comment">#case refValue1&gt; </span></span><br><span class="line"><span class="string">....</span></span><br><span class="line">&lt;<span class="comment">#break&gt; </span></span><br><span class="line">&lt;<span class="comment">#case refValue2&gt; </span></span><br><span class="line"><span class="string">....</span></span><br><span class="line">&lt;<span class="comment">#break&gt; </span></span><br><span class="line">&lt;<span class="comment">#case refValueN&gt; </span></span><br><span class="line"><span class="string">....</span></span><br><span class="line">&lt;<span class="comment">#break&gt; </span></span><br><span class="line">&lt;<span class="comment">#default&gt; </span></span><br><span class="line"><span class="string">....</span> </span><br><span class="line">&lt;/<span class="comment">#switch&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、支持转义字符"><a href="#六、支持转义字符" class="headerlink" title="六、支持转义字符"></a>六、支持转义字符</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\"</span> ：双引号(u0022)</span><br><span class="line"><span class="string">\'</span> ：单引号(u0027)</span><br><span class="line"><span class="string">\\</span> ：反斜杠(u005C)</span><br><span class="line"><span class="string">\n</span> ：换行(u000A)</span><br><span class="line"><span class="string">\r</span> ：回车(u000D)</span><br><span class="line"><span class="string">\t</span> ：Tab(u0009)</span><br><span class="line"><span class="string">\b</span> ：退格键(u0008)</span><br><span class="line"><span class="string">\f</span> ：Form feed(u000C)</span><br><span class="line"><span class="string">\l</span> ：&lt;</span><br><span class="line"><span class="string">\g</span> ：&gt;</span><br><span class="line"><span class="string">\a</span> ：&amp;</span><br><span class="line"><span class="string">\&#123;</span> ：&#123;</span><br><span class="line"><span class="string">\xCode</span> ：直接通过<span class="number">4</span>位的<span class="number">16</span>进制数来指定Unicode码,输出该unicode码对应的字符.</span><br><span class="line"></span><br><span class="line">如果某段文本中包含大量的特殊符号,FreeMarker提供了另一种特殊格式:可以在指定字符串内容的引号前增加r标记,在r标记后的文件将会直接输出.看如下代码:</span><br><span class="line">$&#123;r<span class="string">"$&#123;foo&#125;"</span>&#125; <span class="regexp">// 输出 $&#123;foo&#125;</span></span><br><span class="line"><span class="regexp">$&#123;r"C:/foo/bar"&#125; //</span> 输出 C:/foo/bar</span><br></pre></td></tr></table></figure><h2 id="七、include指令"><a href="#七、include指令" class="headerlink" title="七、include指令"></a>七、include指令</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># include指令的作用类似于JSP的包含指令: 用于导入文件,它可以在模版中插入其他的静态文件,或者是freemarker模版如：宏组件</span></span><br><span class="line"><span class="xml"># 注意点：引入同名的变量时就会被后引入的或者新定义的覆盖.这样就不是很好,因为只想让它们在"My Test Library"命名空间中.就需要用 import代替include了</span></span><br><span class="line"><span class="xml">//父页面ftl</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">#include</span> "/<span class="attr">inc</span>/<span class="attr">top.ftl</span>"/&gt;</span>  </span></span><br><span class="line"><span class="xml">        姓名：$</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        性别：$</span><span class="template-variable">&#123;student.studentSex&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        年龄：$</span><span class="template-variable">&#123;student.studentAge&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        生日：$</span><span class="template-variable">&#123;(student.studentBirthday)?string("yyyy-MM-dd")&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        网站地址：$</span><span class="template-variable">&#123;student.studentAddr&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        QQ：$</span><span class="template-variable">&#123;student.studentQQ&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#if</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">12</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个初中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">15</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个高中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">18</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#else</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">#if</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//子页面ftl</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎，进入学生管理系统！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 结果</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎，进入学生管理系统！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">         姓名：$</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        性别：$</span><span class="template-variable">&#123;student.studentSex&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        年龄：$</span><span class="template-variable">&#123;student.studentAge&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        生日：$</span><span class="template-variable">&#123;(student.studentBirthday)?string("yyyy-MM-dd")&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        网站地址：$</span><span class="template-variable">&#123;student.studentAddr&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        QQ：$</span><span class="template-variable">&#123;student.studentQQ&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#if</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">12</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个初中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">15</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个高中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">18</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#else</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">#if</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="八、import指令"><a href="#八、import指令" class="headerlink" title="八、import指令"></a>八、import指令</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/<span class="regexp">/ 类似于jsp里的import：它导入文件，然后就可以在当前文件里使用被导入文件里的宏组件。除了不能像include一样导入静态文件外，其他都一样。为防止出现覆盖问题，把其放入另一个空间中。</span></span><br><span class="line"><span class="regexp"># mylib.ftl</span></span><br><span class="line"><span class="regexp">&lt;#macro copyright date&gt;   </span></span><br><span class="line"><span class="regexp">&lt;p&gt;Copyright (C) $&#123;date&#125; Julia Smith. All rights reserved.   </span></span><br><span class="line"><span class="regexp">&lt;/</span><span class="comment">#macro&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># common.ftl</span></span><br><span class="line">&lt;<span class="comment">#import "/libs/mylib.ftl" as my&gt;</span></span><br><span class="line">&lt;@my.copyright date=<span class="string">"1999-2002"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&lt;p&gt;Copyright (C) <span class="number">1999</span>-<span class="number">2002</span> Julia Smith. All rights reserved.   </span><br><span class="line"></span><br><span class="line">/<span class="regexp">/ 上面的代码将导入/lib</span><span class="regexp">/common.ftl模板文件中的所有变量,交将这些变量放置在一个名为com的Map对象中，"my"在freemarker里被称作namespace，防止同一变量被覆盖</span></span><br></pre></td></tr></table></figure><h2 id="九、macro宏指令"><a href="#九、macro宏指令" class="headerlink" title="九、macro宏指令"></a>九、macro宏指令</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;#-- 定义宏 --&gt;</span><br><span class="line"># <span class="keyword">test</span>是自定义标签名，并且注意自定义标签名会影响同名变量</span><br><span class="line">&lt;#<span class="keyword">macro</span> <span class="keyword">test</span> foo bar=<span class="string">"Bar"</span> baaz=-1&gt; </span><br><span class="line">　　Text: <span class="variable">$&#123;foo&#125;</span>, <span class="variable">$&#123;bar&#125;</span>, <span class="variable">$&#123;baaz&#125;</span></span><br><span class="line">&lt;/#<span class="keyword">macro</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;#-- 使用宏 --&gt;</span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> bar=<span class="string">"b"</span> baaz=5*5/&gt;  <span class="comment">// 输出：Text: a, b, 25</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> bar=<span class="string">"b"</span>/&gt;    　　　　<span class="comment">// 输出：Text: a, b, -1</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> baaz=5*5-2/&gt; 　　　　<span class="comment">// 输出：Text: a, Bar, 23</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span>/&gt;                   <span class="comment">// 输出：Text: a, Bar, -1</span></span><br><span class="line"></span><br><span class="line">&lt;#-- 定义一个循环输出的宏 --&gt;</span><br><span class="line">&lt;#<span class="keyword">macro</span> <span class="keyword">list</span> title items&gt; </span><br><span class="line">　　<span class="variable">$&#123;title&#125;</span></span><br><span class="line">　　&lt;#<span class="keyword">list</span> items <span class="keyword">as</span> x&gt;</span><br><span class="line">　　　　<span class="variable">$&#123;x&#125;</span></span><br><span class="line">　　&lt;/#<span class="keyword">list</span>&gt; </span><br><span class="line">&lt;/#<span class="keyword">macro</span>&gt; </span><br><span class="line"></span><br><span class="line">&lt;#-- 使用宏 --&gt;</span><br><span class="line">&lt;@<span class="keyword">list</span> items=[<span class="string">"mouse"</span>, <span class="string">"elephant"</span>, <span class="string">"python"</span>] title=<span class="string">"Animals"</span>/&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Freemarker学习&quot;&gt;&lt;a href=&quot;#Freemarker学习&quot; class=&quot;headerlink&quot; title=&quot;Freemarker学习&quot;&gt;&lt;/a&gt;Freemarker学习&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意点：
      
    
    </summary>
    
    
      <category term="模板引擎" scheme="https://www.deschen.cn/categories/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="Freemarker" scheme="https://www.deschen.cn/tags/Freemarker/"/>
    
  </entry>
  
  <entry>
    <title>ELK部署——CentOS7.X</title>
    <link href="https://www.deschen.cn/2021/02/03/ELK%E9%83%A8%E7%BD%B2%E2%80%94%E2%80%94CentOS7.X/"/>
    <id>https://www.deschen.cn/2021/02/03/ELK%E9%83%A8%E7%BD%B2%E2%80%94%E2%80%94CentOS7.X/</id>
    <published>2021-02-03T10:42:58.000Z</published>
    <updated>2021-03-01T10:24:53.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK部署——CentOS7-X"><a href="#ELK部署——CentOS7-X" class="headerlink" title="ELK部署——CentOS7.X"></a>ELK部署——CentOS7.X</h1><h2 id="一、创建用户角色"><a href="#一、创建用户角色" class="headerlink" title="一、创建用户角色"></a>一、创建用户角色</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建用户组：groupadd <span class="built_in">es</span></span><br><span class="line">创建用户加入用户组：useradd <span class="built_in">es</span> -g <span class="built_in">es</span></span><br></pre></td></tr></table></figure><h2 id="二、下载和安装"><a href="#二、下载和安装" class="headerlink" title="二、下载和安装"></a>二、下载和安装</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">下载：</span><br><span class="line">    wget https:<span class="comment">//artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.3.tar.gz</span></span><br><span class="line">    wget https:<span class="comment">//artifacts.elastic.co/downloads/logstash/logstash-6.2.3.tar.gz</span></span><br><span class="line">    wget https:<span class="comment">//artifacts.elastic.co/downloads/kibana/kibana-6.2.3-linux-x86_64.tar.gz</span></span><br><span class="line">解压：</span><br><span class="line">tar -zxvf elasticsearch<span class="number">-6.2</span><span class="number">.3</span>.tar.gz -C /usr/local</span><br><span class="line">tar -zxvf logstash<span class="number">-6.2</span><span class="number">.3</span>.tar.gz -C /usr/local</span><br><span class="line">tar -zxvf kibana<span class="number">-6.2</span><span class="number">.3</span>-linux-x86_64.tar.gz -C /usr/local</span><br><span class="line">给es授权</span><br><span class="line">chown -R es.es /usr/local/elasticsearch<span class="number">-6.2</span><span class="number">.3</span></span><br><span class="line">chown -R es.es /usr/local/logstash<span class="number">-6.2</span><span class="number">.3</span></span><br><span class="line">chown -R es.es /usr/local/kibana<span class="number">-6.2</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><h2 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch配置：</span><br><span class="line">允许远程配置：</span><br><span class="line"><span class="keyword">cd</span> /usr/local/elasticsearch-<span class="number">6.2</span>.<span class="number">3</span></span><br><span class="line">elasticsearch-plugin install http<span class="variable">s:</span>//github.<span class="keyword">com</span>/medcl/elasticsearch-analysis-ik/releases/download/v7.<span class="number">6.2</span>/elasticsearch-analysis-ik-<span class="number">6.2</span>.<span class="number">3</span>.zip</span><br><span class="line"><span class="keyword">vi</span> config/elasticsearch.yml </span><br><span class="line">network.hos<span class="variable">t:</span> <span class="number">0.0</span>.<span class="number">0.0</span>  #改为<span class="number">0.0</span>.<span class="number">0.0</span>对外开放，如对特定ip开放则改为指定ip</span><br><span class="line">http.por<span class="variable">t:</span> <span class="number">9200</span>      #可更改端口不为<span class="number">9200</span></span><br><span class="line">修改配置，否则报异常：<span class="built_in">max</span> <span class="keyword">file</span> descriptors [<span class="number">4096</span>] <span class="keyword">for</span> elasticsearch process <span class="keyword">is</span> too low, increase <span class="keyword">to</span> at least [<span class="number">65535</span>]...</span><br><span class="line"><span class="keyword">vi</span> /etc/security/limits.<span class="keyword">conf</span>  # 在文末添加下面四个配置</span><br><span class="line">* soft nofile <span class="number">65536</span></span><br><span class="line">* hard nofile <span class="number">131072</span></span><br><span class="line">* soft nproc <span class="number">2048</span></span><br><span class="line">* hard nproc <span class="number">4096</span></span><br><span class="line">         <span class="keyword">vi</span> /etc/sysctl.<span class="keyword">conf</span></span><br><span class="line">         <span class="keyword">vm</span>.max_map_count=<span class="number">655360</span></span><br><span class="line">        </span><br><span class="line"> logstash配置：</span><br><span class="line"> <span class="keyword">cd</span> /usr/local/logstash-<span class="number">6.2</span>.<span class="number">3</span></span><br><span class="line"> logstash-plugin install logstash-codec-json_lines</span><br><span class="line"> <span class="keyword">vi</span> default.<span class="keyword">conf</span></span><br><span class="line"> # 监听<span class="number">5044</span>端口作为输入</span><br><span class="line">        <span class="built_in">input</span> &#123;</span><br><span class="line">            beats &#123;</span><br><span class="line">                port =&gt; <span class="string">"5044"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 数据过滤</span><br><span class="line">        <span class="built_in">filter</span> &#123;</span><br><span class="line">            grok &#123;</span><br><span class="line">                <span class="keyword">match</span> =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;COMBINEDAPACHELOG&#125;"</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            geoip &#123;</span><br><span class="line">                <span class="keyword">source</span> =&gt; <span class="string">"clientip"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 输出配置为本机的<span class="number">9200</span>端口，这是ElasticSerach服务的监听端口</span><br><span class="line">        output &#123;</span><br><span class="line">            elasticsearch &#123;</span><br><span class="line">                hosts =&gt; [<span class="string">"127.0.0.1:9200"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">Kibana远程配置：</span><br><span class="line"><span class="keyword">cd</span> /usr/local/kibana-<span class="number">6.2</span>.<span class="number">3</span>-linux-x86_64</span><br><span class="line"><span class="keyword">vi</span> config/kibana.yml</span><br><span class="line">server.hos<span class="variable">t:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line">elasticsearch.requestTimeou<span class="variable">t:</span> <span class="number">90000</span>  # 默认<span class="number">3000</span>会导致es连接失败</span><br></pre></td></tr></table></figure><h2 id="四、启动"><a href="#四、启动" class="headerlink" title="四、启动"></a>四、启动</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch</span><br><span class="line">切换账号：<span class="keyword">su</span> es</span><br><span class="line">启动：</span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/elasticsearch-6.2.3</span><br><span class="line">bin/elasticsearch -<span class="keyword">d</span>  # -<span class="keyword">d</span>后台启动</span><br><span class="line">     查看日志：tail -f logs/elasticsearch.<span class="keyword">log</span></span><br><span class="line">     测试：curl 127.0.0.1:9200</span><br><span class="line">     响应成功：</span><br><span class="line">     &#123;</span><br><span class="line">              <span class="string">"name"</span> : <span class="string">"mNuYQ8h"</span>,</span><br><span class="line">              <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">              <span class="string">"cluster_uuid"</span> : <span class="string">"1JsAZO0sTnuBYCREW97RDw"</span>,</span><br><span class="line">              <span class="string">"version"</span> : &#123;</span><br><span class="line">                <span class="string">"number"</span> : <span class="string">"6.2.3"</span>,</span><br><span class="line">                <span class="string">"build_hash"</span> : <span class="string">"c59ff00"</span>,</span><br><span class="line">                <span class="string">"build_date"</span> : <span class="string">"2018-03-13T10:06:29.741383Z"</span>,</span><br><span class="line">                <span class="string">"build_snapshot"</span> : false,</span><br><span class="line">                <span class="string">"lucene_version"</span> : <span class="string">"7.2.1"</span>,</span><br><span class="line">                <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"5.6.0"</span>,</span><br><span class="line">                <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"5.0.0"</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">            &#125;</span><br><span class="line">logstash</span><br><span class="line">启动：</span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/logstash-6.2.3</span><br><span class="line">bin/logstash -f default.<span class="keyword">conf</span> &amp;</span><br><span class="line">    查看日志：tail -f logs/logstash-plain.<span class="keyword">log</span></span><br><span class="line">Kibana</span><br><span class="line">切换账号：<span class="keyword">su</span> es</span><br><span class="line">启动：</span><br><span class="line"><span class="keyword">su</span></span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/kibana-6.2.3-linux-x86_64</span><br><span class="line">nohup bin/kibana &amp;</span><br><span class="line">查看日志：tail -f nohup.<span class="keyword">out</span></span><br></pre></td></tr></table></figure><h2 id="五、自启动"><a href="#五、自启动" class="headerlink" title="五、自启动"></a>五、自启动</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">以ES自启动为例</span><br><span class="line">cd /etc/init.d</span><br><span class="line">vim es-server</span><br><span class="line"></span><br><span class="line"><span class="comment">## 编写启动脚本</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#chkconfig: 345 63 37</span></span><br><span class="line"><span class="comment">#description: elasticsearch</span></span><br><span class="line"><span class="comment">#processname: elasticsearch-6.2.3</span></span><br><span class="line"><span class="comment">## 这个目录是你Es所在文件夹的目录</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ES_HOME</span>=/usr/local/elasticsearch-6.2.3</span><br><span class="line">case <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        start)</span><br><span class="line">        ## es 是启动es的账户，如果你的不是这个记得调整</span><br><span class="line">                su es&lt;&lt;!</span><br><span class="line">                cd <span class="variable">$ES_HOME</span></span><br><span class="line">                ./bin/elasticsearch -d -p pid</span><br><span class="line">                exit</span><br><span class="line">!</span><br><span class="line">                echo <span class="string">"elasticsearch is started"</span></span><br><span class="line">                ;;</span><br><span class="line">        stop)</span><br><span class="line">                <span class="attribute">pid</span>=`cat <span class="variable">$ES_HOME</span>/pid`</span><br><span class="line">                kill -9 <span class="variable">$pid</span></span><br><span class="line">                echo <span class="string">"elasticsearch is stopped"</span></span><br><span class="line">                ;;</span><br><span class="line">        restart)</span><br><span class="line">                <span class="attribute">pid</span>=`cat <span class="variable">$ES_HOME</span>/pid`</span><br><span class="line">                kill -9 <span class="variable">$pid</span></span><br><span class="line">                echo <span class="string">"elasticsearch is stopped"</span></span><br><span class="line">                sleep 1</span><br><span class="line">                su elk&lt;&lt;!     【es 这个是启动es的账户，如果你的不是这个记得调整】</span><br><span class="line">                cd <span class="variable">$ES_HOME</span></span><br><span class="line">                ./bin/elasticsearch -d -p pid</span><br><span class="line">                exit</span><br><span class="line">!</span><br><span class="line">                echo <span class="string">"elasticsearch is started"</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo <span class="string">"start|stop|restart"</span></span><br><span class="line">        ;; </span><br><span class="line">esac</span><br><span class="line">exit 0</span><br><span class="line"></span><br><span class="line"><span class="comment">## 退出</span></span><br><span class="line">:wq!</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改文件权限</span></span><br><span class="line">chmod 777 es-server</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加系统服务，开机自启</span></span><br><span class="line">chkconfig --<span class="builtin-name">add</span> es-server</span><br><span class="line"></span><br><span class="line"><span class="comment">##  启动，关闭、重启服务</span></span><br><span class="line">service es-server start</span><br><span class="line">service es-server stop</span><br><span class="line">service es-server restart</span><br></pre></td></tr></table></figure><h2 id="六、切换ELK-7-x异常处理"><a href="#六、切换ELK-7-x异常处理" class="headerlink" title="六、切换ELK 7.x异常处理"></a>六、切换ELK 7.x异常处理</h2><p>ES问题：</p><ol><li><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210220152128686.png" alt="image-20210220152128686"></p></li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">切换到es <span class="number">7</span>.x 目录：cd /usr/local/elasticsearch-<span class="number">7.6</span>.<span class="number">2</span></span><br><span class="line">修改配置文件：vi config/elasticsearch.yml</span><br><span class="line"><span class="keyword">node</span>.name:<span class="title"> node-1</span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"node-1"</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210301143942570.png" alt="image-20210301143942570"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">切换到es <span class="number">7.</span>x 目录：cd /usr/local/elasticsearch<span class="number">-7.6</span><span class="number">.2</span></span><br><span class="line">配置文件添加：config/elasticsearch.yml</span><br><span class="line">xpack.ml.enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210301144616286.png" alt="image-20210301144616286"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">切换到root用户修改配置sysctl.<span class="keyword">conf</span></span><br><span class="line"><span class="keyword">vi</span> /etc/sysctl.<span class="keyword">conf</span> </span><br><span class="line"><span class="keyword">vm</span>.max_map_count=<span class="number">655360</span></span><br><span class="line">sysctl -<span class="keyword">p</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ELK部署——CentOS7-X&quot;&gt;&lt;a href=&quot;#ELK部署——CentOS7-X&quot; class=&quot;headerlink&quot; title=&quot;ELK部署——CentOS7.X&quot;&gt;&lt;/a&gt;ELK部署——CentOS7.X&lt;/h1&gt;&lt;h2 id=&quot;一、创建用户角色&quot;
      
    
    </summary>
    
    
      <category term="ELK" scheme="https://www.deschen.cn/categories/ELK/"/>
    
    
      <category term="ELK" scheme="https://www.deschen.cn/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>VMware——CentOS7.X部署</title>
    <link href="https://www.deschen.cn/2021/01/28/VMware%E2%80%94%E2%80%94CentOS7-X%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.deschen.cn/2021/01/28/VMware%E2%80%94%E2%80%94CentOS7-X%E9%83%A8%E7%BD%B2/</id>
    <published>2021-01-28T02:26:20.000Z</published>
    <updated>2021-01-29T01:37:27.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VMware——CentOS7-x部署"><a href="#VMware——CentOS7-x部署" class="headerlink" title="VMware——CentOS7.x部署"></a>VMware——CentOS7.x部署</h1><p>[toc]</p><h2 id="一、新建虚拟器"><a href="#一、新建虚拟器" class="headerlink" title="一、新建虚拟器"></a>一、新建虚拟器</h2><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210129093554506.png" alt="image-20210129093554506"></p><ul><li>确定好版本，要与自己软件一致</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210129093623268.png" alt="image-20210129093623268"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221170614834.png" alt="image-20201221170614834"></p><ul><li>要选择<strong>Linux</strong>系统，版本要跟自己下载的<strong>centos7.x</strong>一致</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221170652989.png" alt="image-20201221170652989"></p><ul><li><p>建议存放位置放在自定义的文件夹，方便管理</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221171956274.png" alt="image-20201221171956274"></p></li><li><p>设置处理器的和数，<strong>定情况而定</strong></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172108411.png" alt="image-20201221172108411"></p></li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172132879.png" alt="image-20201221172132879"></p><ul><li><p>接下来一直点击<strong>下一步</strong>，直到出现<strong>完成</strong>的这个界面，<strong>自定义硬件</strong></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172350769.png" alt="image-20201221172350769"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172534237.png" alt="image-20201221172534237"></p></li></ul><h2 id="二、安装centos-7-X"><a href="#二、安装centos-7-X" class="headerlink" title="二、安装centos 7.X"></a>二、安装centos 7.X</h2><blockquote><p>当看不见鼠标时，说明你点击了虚拟机，这时可以使用<strong>ctrl+alt</strong>跳出虚拟机</p></blockquote><ul><li><p>选择红框选项，按下回车键</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172836938.png" alt="image-20201221172836938"></p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163036413.png" alt="image-20201221163036413" style="zoom: 67%;" /></li><li><p>设置时间，建议时区选择上海</p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163656843.png" alt="image-20201221163656843" style="zoom:80%;" /><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163629221.png" alt="image-20201221163629221" style="zoom:80%;" /></li><li><p>显示界面（这里我使用原始界面）</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163927355.png" alt="image-20201221163927355"></p><p>PS：想要图形界面的话，可以选择方框选项</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164005808.png" alt="image-20201221164005808"></p></li><li><p>磁盘划分</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164114006.png" alt="image-20201221164114006"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164157112.png" alt="image-20201221164157112"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164758435.png" alt="image-20201221164758435"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221165029626.png" alt="image-20201221165029626"></p></li></ul><h2 id="三、连接虚拟机"><a href="#三、连接虚拟机" class="headerlink" title="三、连接虚拟机"></a>三、连接虚拟机</h2><ul><li><p>启动虚拟机，输入<strong>ip addr</strong>，获取虚拟机的ip</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175212858.png" alt="image-20201221175212858"></p></li><li><p>本地使用<strong>CMD</strong>输入<strong>ping 192.168.163.132</strong>查看本地是否与虚拟机联通</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175344603.png" alt="image-20201221175344603"></p></li><li><p>虚拟机使用<strong>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></strong> 查看虚拟机是否能联网</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175507224.png" alt="image-20201221175507224"></p></li><li><p>因为VM操作麻烦，建议使用xshell或其他软件连接虚拟机</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175924060.png" alt="image-20201221175924060"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175800476.png" alt="image-20201221175800476"></p><p>PS：如果出现ping不通的情况，解决方法</p><ol><li><p>查看是否是网络适配器红框部分禁用了，如果是，就右键启动</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221180143248.png" alt="image-20201221180143248"></p></li><li><p>服务列表关于VM部分是否没启用</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221180327045.png" alt="image-20201221180327045"></p></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VMware——CentOS7-x部署&quot;&gt;&lt;a href=&quot;#VMware——CentOS7-x部署&quot; class=&quot;headerlink&quot; title=&quot;VMware——CentOS7.x部署&quot;&gt;&lt;/a&gt;VMware——CentOS7.x部署&lt;/h1&gt;&lt;p&gt;[t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>IDEA Debug调试</title>
    <link href="https://www.deschen.cn/2020/08/05/IDEA%20Debug%E8%B0%83%E8%AF%95/"/>
    <id>https://www.deschen.cn/2020/08/05/IDEA%20Debug%E8%B0%83%E8%AF%95/</id>
    <published>2020-08-05T08:02:06.000Z</published>
    <updated>2021-03-21T15:59:06.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA-Debug调试"><a href="#IDEA-Debug调试" class="headerlink" title="IDEA Debug调试"></a>IDEA Debug调试</h1><p>[toc]</p><h2 id="一、为什么要调试"><a href="#一、为什么要调试" class="headerlink" title="一、为什么要调试"></a>一、为什么要调试</h2><ul><li>调试和日志是排查问题的两个主要手段。</li><li>如果没有调试功能，很多问题的排查更多地将依赖日志。但是日志我无法直观地了解代码运行的状态，无法实时地观察待调试地对象地各种属性值等</li><li>现在调试工具非常强大，很多调试器支持 “回退”，自定义表达式，远程调试等功能，对我们的学习和排查问题有很大帮助</li></ul><h2 id="二、调试的基本操作"><a href="#二、调试的基本操作" class="headerlink" title="二、调试的基本操作"></a>二、调试的基本操作</h2><ol><li>设置断点</li><li>调试模式运行</li><li>单步调试</li></ol><ul><li><p>以IDEA为例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321215809557.png" alt="image-20210321215809557"></p><ul><li>常见的调试功能按钮如上图所示（标有1~6的红框）<ul><li>1 表示 Step Over 即跳过，执行到下一行；</li><li>2 表示 Step Into 即步入，可以进入自定义的函数；</li><li>3 表示Force Step Into 即强制进入，可以进入到任何方法（包括第三方库或JDK源码）</li><li>4 表示 Step Out 即跳出，如果当前调试的方法没问题，可以使用此功能跳出当前函数；</li><li>5 表示 Drop frame 即移除帧，相当于回退到上一级；（以 “ JVM每执行一个方法会出现栈帧 ”理解）</li><li>6 表示 Run to Cursor 即执行到鼠标所在的代码行数。</li></ul></li><li>Variables（变量区）：用于观察 “当前” 的数据变化状况</li><li>Frames（栈帧）：用于记录执行的方法</li></ul></li></ul><h2 id="三、调试的高级技巧"><a href="#三、调试的高级技巧" class="headerlink" title="三、调试的高级技巧"></a>三、调试的高级技巧</h2><ol><li><p>多线程断点</p><ul><li><p>场景：直观调试多线程执行情况</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321222516302.png" alt="image-20210321222516302"></p></li><li><p>操作步骤</p><ul><li>设置断点时，在断点上右键可以选择断点的模式，选择 “Thread” 模式，可以开启多线程调试。</li><li>可以将一个线程断下来，通过 “Frames” 选项卡切换到不同线程线程（红框部分表示线程），控制不同线程的运<br>行。</li></ul></li></ul></li><li><p>条件断点</p><ul><li><p>场景：在测试环境中，如果设置普通断点，这样会对所有的请求暂停，影响其他功能调试</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321223027976.png" alt="image-20210321223027976"></p></li><li><p>操作步骤</p><ul><li>对断点设置条件，只有满足设置的条件才会生效。（这里使当 i 等于 4 时打上断点）</li></ul></li><li><p>PS：如果我们想对某个成员变量修改的地方打断点，但是修改的地方特别多怎么办？</p><ul><li><p>可以对属性设置条件</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321224048609.png" alt="image-20210321224048609"></p></li></ul></li></ul></li><li><p>“后悔药”，即回退方法</p><ul><li><p>场景：当我们有Resume Program或者Step Over跳到方法里面时，我们想要看到调用方法前的情况。</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321225511239.png" alt="image-20210321225511239"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321225517980.png" alt="image-20210321225517980"></p></li><li><p>操作步骤</p><ul><li>按<strong>红框的按键</strong>表示 Drop frame 即移除帧，相当于回退到上一级，这给我们提供了 “后悔药”。</li></ul></li></ul></li><li><p>“偷天换日”，即修改参数</p><ul><li><p>场景：我们实际调试代码时，会有这样的场景，调用的参数传错了。修改参数重新运行？</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321230027010.png" alt="image-20210321230027010"></p></li><li><p>操作步骤</p><ul><li>在 variables 选项卡中选中变量（这里时 count ），然后右键，选择 “set value” 菜单，即可对变<br>量的值进行修改。</li></ul></li></ul></li><li><p>表达式</p><ul><li><p>场景：设置或获取额外的信息，这对排查问题有很大帮助。</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321232011161.png" alt="image-20210321232011161"></p><ul><li>操作步骤有两种<ul><li>右键 <code>Evaluate Expression</code>，输入表达式获取额外信息</li></ul></li></ul></li></ul></li><li><p>watch</p><ul><li><p>场景：查看某个对象的某个属性，总是使用表达式很不方便，是否可以将表达式计算的结果总是显示在变量区域呢？</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321232017547.png" alt="image-20210321232017547"></p></li><li><p>操作步骤</p><ul><li>变量区<code>Variables</code>点击 <code>+</code> ，输入想要观察的表达式</li></ul></li></ul></li><li><p>看内存对象</p><ul><li><p>场景：想通过代码调试来研究内存对象</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321233053826.png" alt="image-20210321233053826"></p></li><li><p>操作步骤</p><ul><li>在 Memory 选项栏下，搜索 Integer 就可以看到该类对象的数量，双击就可以通过表达式来过滤，非常强大。</li></ul></li></ul></li><li><p>异常断点</p><ul><li><p>在一个循环中有一个数据报错，想在报错的时候断点，无法使用条件断点，而且循环次数很多，一次一次断掉放过非常麻烦。</p></li><li><p>测试用例</p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321234105069.png" alt="image-20210321234105069" style="zoom:150%;" /><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321234155317.png" alt="image-20210321234155317"></p></li><li><p>操作步骤</p><ul><li>第一步，在研究的地方断点（出异常的条件）</li><li>第二步：点击左下角的红色断点标记，打开断点设置界面</li><li>第三步：点击左上角的 + 号，添加 <code>Java Excepiton Breakpoints</code> 将异常（<code>IllegalArgumentException</code>)添加进去；</li><li>第四步：切换到我们的断点处，在断点处（如图所示<code>OrderParamTest.java:80</code>）的 处，在 “Disable untilbreakpoint is hit” 处选择该异常。</li><li>第五步：再执行断点调试，即可捕捉到发生异常的那次调用。通过调用栈查看整个调用过程，还可以通过移除 frame 来回退到上一层</li></ul></li></ul></li><li><p>远程调试</p><ul><li><p>场景：现在大多数公司的测试环境都会配置支持远程调试。</p></li><li><p>要求：远程调试要求本地代码和远程服务器的代码一致，如果使用 git ，切换到同一个分支的同一次提<br>交即可。</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321235336115.png" alt="image-20210321235336115"></p></li><li><p>操作步骤</p><ul><li>点击Edit Configurations</li><li>点击左上角 <code>+</code>，选择<code>Remote JVM Debug</code>，设置远程 host 及端口 port </li></ul></li></ul></li><li><p>其他</p><ul><li><p>例如主动抛出异常</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321235716527.png" alt="image-20210321235716527"></p><ul><li>操作步骤<ul><li>在 <code>Frames</code> 选择栈帧，右键选择 <code>Throw Exception</code> 抛出异常</li></ul></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IDEA-Debug调试&quot;&gt;&lt;a href=&quot;#IDEA-Debug调试&quot; class=&quot;headerlink&quot; title=&quot;IDEA Debug调试&quot;&gt;&lt;/a&gt;IDEA Debug调试&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、为什么要调试&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="编程工具" scheme="https://www.deschen.cn/categories/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
</feed>
