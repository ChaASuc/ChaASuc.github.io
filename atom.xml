<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deschen Blog</title>
  
  <subtitle>以Java开发为主的个人博客，记录自己在学习、工作和成长的笔记和心得</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.deschen.cn/"/>
  <updated>2022-03-22T09:43:30.176Z</updated>
  <id>https://blog.deschen.cn/</id>
  
  <author>
    <name>Deschen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络</title>
    <link href="https://blog.deschen.cn/2022/03/20/%E7%BD%91%E7%BB%9C/"/>
    <id>https://blog.deschen.cn/2022/03/20/%E7%BD%91%E7%BB%9C/</id>
    <published>2022-03-19T16:24:18.968Z</published>
    <updated>2022-03-22T09:43:30.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>程序变慢457</p><p>osi七层模型 </p><p>物理层：比特流 将二进制的数据转换为电流强弱传输（数模转换），到另一个机器转换成二进制数据 （模数转换）</p><p>链路层：在传输 比特流的过程中，会导致错传，数据传输不完整的可能</p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>+ </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络&quot;&gt;&lt;a href=&quot;#网络&quot; class=&quot;headerlink&quot; title=&quot;网络&quot;&gt;&lt;/a&gt;网络&lt;/h1&gt;&lt;p&gt;程序变慢457&lt;/p&gt;
&lt;p&gt;osi七层模型 &lt;/p&gt;
&lt;p&gt;物理层：比特流 将二进制的数据转换为电流强弱传输（数模转换），到另一个机器转换
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>获取用户信息+菜单列表（用于权限校验）com</title>
    <link href="https://blog.deschen.cn/2022/03/17/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF+%E8%8F%9C%E5%8D%95%E5%88%97%E8%A1%A8%EF%BC%88%E7%94%A8%E4%BA%8E%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C%EF%BC%89com/"/>
    <id>https://blog.deschen.cn/2022/03/17/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF+%E8%8F%9C%E5%8D%95%E5%88%97%E8%A1%A8%EF%BC%88%E7%94%A8%E4%BA%8E%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C%EF%BC%89com/</id>
    <published>2022-03-17T06:44:25.370Z</published>
    <updated>2022-03-17T06:44:25.795Z</updated>
    
    <content type="html"><![CDATA[<p>获取用户信息+菜单列表（用于权限校验）com.grgbanking.app.service.impl.CmAdminServiceImpl#loadUserByUsername</p><p>获取用户对应的菜单唯一性标识   com.grgbanking.app.domain.GbUserDetails#getAuthorities</p><p>获取对应路径与对应的菜单唯一标识的映射 com.grgbanking.app.service.impl.DynamicSecurityServiceImpl#loadDataSource</p><p>判断用户是否有这个路径的权限   com.grgbanking.auth.filter.DynamicAccessDecisionManager#decide</p><p>修改配置文件，只添加不通过权限校验的接口  application.yml  gb.security.browser.ignoreUrls</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;获取用户信息+菜单列表（用于权限校验）com.grgbanking.app.service.impl.CmAdminServiceImpl#loadUserByUsername&lt;/p&gt;
&lt;p&gt;获取用户对应的菜单唯一性标识   com.grgbanking.app.domai
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Thread 的 start() 与 run()区别</title>
    <link href="https://blog.deschen.cn/2022/03/12/Thread%20%E7%9A%84%20start()%20%E4%B8%8E%20run()%E5%8C%BA%E5%88%AB/"/>
    <id>https://blog.deschen.cn/2022/03/12/Thread%20%E7%9A%84%20start()%20%E4%B8%8E%20run()%E5%8C%BA%E5%88%AB/</id>
    <published>2022-03-12T02:12:02.075Z</published>
    <updated>2022-03-12T02:12:02.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thread-的-start-与-run-区别"><a href="#Thread-的-start-与-run-区别" class="headerlink" title="Thread 的 start() 与 run()区别"></a>Thread 的 start() 与 run()区别</h1><ul><li><p>start() 创建线程，调用run()执行  </p></li><li><p>run()原有线程执行</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Thread-的-start-与-run-区别&quot;&gt;&lt;a href=&quot;#Thread-的-start-与-run-区别&quot; class=&quot;headerlink&quot; title=&quot;Thread 的 start() 与 run()区别&quot;&gt;&lt;/a&gt;Thread 的 start
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>进程和线程</title>
    <link href="https://blog.deschen.cn/2022/03/01/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
    <id>https://blog.deschen.cn/2022/03/01/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-03-01T06:42:22.280Z</published>
    <updated>2022-03-01T06:42:22.280Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>T#</title>
    <link href="https://blog.deschen.cn/2022/03/01/T#/"/>
    <id>https://blog.deschen.cn/2022/03/01/T#/</id>
    <published>2022-03-01T03:55:52.402Z</published>
    <updated>2022-03-01T03:55:52.403Z</updated>
    
    <content type="html"><![CDATA[<p>T# </p><ul><li>synchronized 方法 和 synchronized(this)区别</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;T# &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;synchronized 方法 和 synchronized(this)区别&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>并发使用ThreadLocal</title>
    <link href="https://blog.deschen.cn/2022/03/01/%E5%B9%B6%E5%8F%91%E4%BD%BF%E7%94%A8ThreadLocal/"/>
    <id>https://blog.deschen.cn/2022/03/01/%E5%B9%B6%E5%8F%91%E4%BD%BF%E7%94%A8ThreadLocal/</id>
    <published>2022-03-01T03:55:43.924Z</published>
    <updated>2022-03-01T06:42:59.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发使用ThreadLocal"><a href="#并发使用ThreadLocal" class="headerlink" title="并发使用ThreadLocal"></a>并发使用ThreadLocal</h1><h2 id="一、什么是ThreadLocal"><a href="#一、什么是ThreadLocal" class="headerlink" title="一、什么是ThreadLocal"></a>一、什么是ThreadLocal</h2><p>​        ThreadLocal：是JDK包提供的，它提供<strong>线程本地变量</strong>，如果在ThreadLocal存放一个变量，那么访问这个变量的每个线程都会有这个变量的一个副本，在实际多线程操作的时候，操作的是自己<strong>本地内存中的变量</strong>，从而规避了线程安全问题。</p><p>​        线程安全问题：多线程访问同一个共享变量的时候容易出现数据不一致问题</p><h2 id="二、ThreadLocal的应用场景"><a href="#二、ThreadLocal的应用场景" class="headerlink" title="二、ThreadLocal的应用场景"></a>二、ThreadLocal的应用场景</h2><p>​        </p><h2 id="三、ThreadLocal注意事项"><a href="#三、ThreadLocal注意事项" class="headerlink" title="三、ThreadLocal注意事项"></a>三、ThreadLocal注意事项</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;并发使用ThreadLocal&quot;&gt;&lt;a href=&quot;#并发使用ThreadLocal&quot; class=&quot;headerlink&quot; title=&quot;并发使用ThreadLocal&quot;&gt;&lt;/a&gt;并发使用ThreadLocal&lt;/h1&gt;&lt;h2 id=&quot;一、什么是ThreadLo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记</title>
    <link href="https://blog.deschen.cn/2022/02/26/Java%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.deschen.cn/2022/02/26/Java%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-26T12:22:26.191Z</published>
    <updated>2022-02-26T12:22:26.191Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JVM笔记-堆和栈的区别</title>
    <link href="https://blog.deschen.cn/2022/02/26/JVM%E7%AC%94%E8%AE%B0-%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://blog.deschen.cn/2022/02/26/JVM%E7%AC%94%E8%AE%B0-%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-02-26T12:22:15.986Z</published>
    <updated>2022-02-26T12:22:24.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM笔记-堆和栈的区别"><a href="#JVM笔记-堆和栈的区别" class="headerlink" title="JVM笔记-堆和栈的区别"></a>JVM笔记-堆和栈的区别</h1><ul><li>栈<ul><li>配合函数调用用的</li><li>配合线 </li></ul></li><li>堆：存储数据的结构体</li></ul><h2 id="JVM内存布局"><a href="#JVM内存布局" class="headerlink" title="JVM内存布局"></a>JVM内存布局</h2><h3 id="一、JVM内存布局"><a href="#一、JVM内存布局" class="headerlink" title="### 一、JVM内存布局"></a>### 一、JVM内存布局</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM笔记-堆和栈的区别&quot;&gt;&lt;a href=&quot;#JVM笔记-堆和栈的区别&quot; class=&quot;headerlink&quot; title=&quot;JVM笔记-堆和栈的区别&quot;&gt;&lt;/a&gt;JVM笔记-堆和栈的区别&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;栈&lt;ul&gt;
&lt;li&gt;配合函数调用用的&lt;/li&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>List注意事项</title>
    <link href="https://blog.deschen.cn/2022/02/21/List%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://blog.deschen.cn/2022/02/21/List%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2022-02-21T07:21:19.153Z</published>
    <updated>2022-02-21T13:56:43.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="List-有哪些坑"><a href="#List-有哪些坑" class="headerlink" title="List 有哪些坑"></a>List 有哪些坑</h1><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;List-有哪些坑&quot;&gt;&lt;a href=&quot;#List-有哪些坑&quot; class=&quot;headerlink&quot; title=&quot;List 有哪些坑&quot;&gt;&lt;/a&gt;List 有哪些坑&lt;/h1&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>压测出现的问题及解决</title>
    <link href="https://blog.deschen.cn/2022/02/15/%E5%8E%8B%E6%B5%8B%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>https://blog.deschen.cn/2022/02/15/%E5%8E%8B%E6%B5%8B%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</id>
    <published>2022-02-15T02:37:45.079Z</published>
    <updated>2022-02-15T02:37:45.079Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>拆箱和装箱</title>
    <link href="https://blog.deschen.cn/2022/02/13/%E6%8B%86%E7%AE%B1%E5%92%8C%E8%A3%85%E7%AE%B1/"/>
    <id>https://blog.deschen.cn/2022/02/13/%E6%8B%86%E7%AE%B1%E5%92%8C%E8%A3%85%E7%AE%B1/</id>
    <published>2022-02-13T11:37:44.768Z</published>
    <updated>2022-02-13T16:26:05.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拆箱和装箱"><a href="#拆箱和装箱" class="headerlink" title="拆箱和装箱"></a>拆箱和装箱</h1><p>[toc]</p><h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;拆箱和装箱&quot;&gt;&lt;a href=&quot;#拆箱和装箱&quot; class=&quot;headerlink&quot; title=&quot;拆箱和装箱&quot;&gt;&lt;/a&gt;拆箱和装箱&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、&quot;&gt;&lt;a href=&quot;#一、&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java重写与重载区分</title>
    <link href="https://blog.deschen.cn/2022/02/13/Java%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD%E5%8C%BA%E5%88%86/"/>
    <id>https://blog.deschen.cn/2022/02/13/Java%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD%E5%8C%BA%E5%88%86/</id>
    <published>2022-02-13T09:26:18.439Z</published>
    <updated>2022-02-13T10:32:00.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java重写与重载区分"><a href="#Java重写与重载区分" class="headerlink" title="Java重写与重载区分"></a>Java重写与重载区分</h1><p>[toc]</p><h2 id="一、什么是重写和重载"><a href="#一、什么是重写和重载" class="headerlink" title="一、什么是重写和重载"></a>一、什么是重写和重载</h2><ul><li><p>重写：子类继承父类方法，<strong>不改变原有的参数类型、参数数量及参数排列顺序和方法响应类型</strong>，覆盖父类的方法</p></li><li><p>重载：同一个类中，方法名相同，<strong>根据参数类型、参数数量及参数排序位置的不同</strong>，做出不同的处理</p></li><li><p>区别</p><table><thead><tr><th>区分点</th><th>重写</th><th>重载</th></tr></thead><tbody><tr><td>发生阶段</td><td>运行期</td><td>编译期</td></tr><tr><td>发生范围</td><td>子类</td><td>同一个类</td></tr><tr><td>参数列表</td><td>跟原有的一样</td><td>可修改原来的参数类型、个数及排列顺序</td></tr><tr><td>返回类型</td><td><strong>继承或等于</strong>父类（引用类型）<br /><strong>必须相等</strong>（基本类型和void）</td><td>无限制</td></tr><tr><td>异常范围</td><td><strong>继承或等于</strong>父类</td><td>无限制</td></tr><tr><td>访问修饰符范围</td><td>大于或等于父类</td><td>无限制</td></tr></tbody></table></li></ul><h2 id="二、要点说明"><a href="#二、要点说明" class="headerlink" title="二、要点说明"></a>二、要点说明</h2><ul><li>被private / static / final 修饰的方法，子类不能重写该方法，理由如下：<ul><li>private：子类覆盖父类的允许访问的方法，而private只能本类操作</li><li>static / final：重写的阶段是运行期，而被static / final 修饰的方法在编译期就已经绑定了 </li></ul></li><li>Java允许重载任何方法，而不只是构遗方法。因此，要完整地描述一个方法，需要指出方法名以及参数类型。这叫做方法的签名( signature)。返回类型不是方法签名的一部分。也就是说，不能有两个名字相同、参数类型也相同却返回不同类型值的方法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java重写与重载区分&quot;&gt;&lt;a href=&quot;#Java重写与重载区分&quot; class=&quot;headerlink&quot; title=&quot;Java重写与重载区分&quot;&gt;&lt;/a&gt;Java重写与重载区分&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、什么是重写和重载&quot;&gt;&lt;a h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>阿里ACP笔记</title>
    <link href="https://blog.deschen.cn/2022/02/10/%E9%98%BF%E9%87%8CACP%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.deschen.cn/2022/02/10/%E9%98%BF%E9%87%8CACP%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-10T14:56:28.555Z</published>
    <updated>2022-02-11T00:13:19.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里ACP笔记"><a href="#阿里ACP笔记" class="headerlink" title="阿里ACP笔记"></a>阿里ACP笔记</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;阿里ACP笔记&quot;&gt;&lt;a href=&quot;#阿里ACP笔记&quot; class=&quot;headerlink&quot; title=&quot;阿里ACP笔记&quot;&gt;&lt;/a&gt;阿里ACP笔记&lt;/h1&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo-百度收录</title>
    <link href="https://blog.deschen.cn/2021/12/29/Hexo-%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/"/>
    <id>https://blog.deschen.cn/2021/12/29/Hexo-%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/</id>
    <published>2021-12-29T02:40:29.188Z</published>
    <updated>2021-12-29T13:46:03.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-百度收录"><a href="#Hexo-百度收录" class="headerlink" title="Hexo-百度收录"></a>Hexo-百度收录</h1><h2 id="一、安装Hexo插件"><a href="#一、安装Hexo插件" class="headerlink" title="一、安装Hexo插件"></a>一、安装Hexo插件</h2><ul><li><p>Hexo相关版本及配置</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hexo版本: <span class="number">4.2</span>.<span class="number">0</span> (命令：hexo -v)  </span><br><span class="line"><span class="keyword">node</span><span class="title">版本: v12</span>.<span class="number">18.3</span>（命令：<span class="keyword">node</span> <span class="title">-v</span>）</span><br><span class="line">npm版本: <span class="number">6.14</span>.<span class="number">8</span>（命令：npm -v）</span><br></pre></td></tr></table></figure></li><li><p>切换到项目的根目录，安装对应的插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li><p>修改配置（位置：项目根目录的_config.yml文件）</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 配置域名（域名生成规则，可以看文件尾部）</span></span><br><span class="line"><span class="symbol">url:</span> https:<span class="comment">//blog.deschen.cn</span></span><br><span class="line"><span class="meta"># 自动生成sitemap</span></span><br><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol">path:</span> sitemap.xml</span><br><span class="line"><span class="symbol">baidusitemap:</span></span><br><span class="line"><span class="symbol">path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li><p>hexo重新生成，查看根目录public目录是否存在sitemap.xml以及baidusitemap.xml就表示成功了</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="二、百度收录"><a href="#二、百度收录" class="headerlink" title="二、百度收录"></a>二、百度收录</h2><ul><li><p>添加站点</p><p>登录<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度资源管理平台</a>，依次点击 <strong>用户中心</strong>-&gt;<strong>站点管理</strong>-&gt;<strong>添加网站</strong></p><ul><li><p>输入网址： <a href="https://blog.deschen.cn">https://blog.deschen.cn</a></p></li><li><p>验证网站</p><ol><li><p>请点击 下载验证文件 </p><p>获取验证文件（当前最新：baidu_verify_code-h9UuMfy7H4.html）</p><p>将验证文件放置于您所配置域名(<a href="https://blog.deschen.cn)的根目录下" target="_blank" rel="noopener">https://blog.deschen.cn)的根目录下</a></p><p>点击这里确认验证文件可以正常访问</p><p>请点击“完成验证”按钮</p><p>为保持验证通过的状态,成功验证后请不要删除HTML文件</p></li><li><p>HTML标签验证（没试过，以下是摘抄某博客）</p><p>在themes/next/layout/_partials/head.swig内：修改meta标签为站长网站上给出的标签即可：</p><p>同时，在themes/next/_config.yml中将google-site-verification和baidu_site_verification的值设置为true即可。</p></li><li><p>CNAME 验证（没试过，以下是摘抄某博客）</p></li></ol><p>​    </p></li></ul></li></ul><ul><li><p>下载后的插件存放位置（解读收录的URL生成规则）</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">项目根目录\node_modules\hexo-generator-sitemap</span></span><br><span class="line"><span class="xml">项目根目录\node_modules\hexo-generator-baidu-sitemap</span></span><br><span class="line"><span class="xml">URL生成规则</span></span><br><span class="line"><span class="xml">路径：项目根目录\node_modules\hexo-generator-baidu-sitemap\baidusitemap.ejs</span></span><br><span class="line"><span class="xml">源码：baiduUrl即使URL的域名，而获取方式通过config.url和config.baidusitemap.url，且后者优先级高，而config表示的是hexo的_config.yml配置文件，其后面的配置属性对应文件的配置属性。因此，可以通过_config.yml设置域名（如：url: 域名 | baidusitemap:url: 域名）</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">urlset</span> <span class="attr">xmlns</span>=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">%</span></span></span></span><br><span class="line"><span class="ruby">          var baiduUrl = config.url  </span></span><br><span class="line"></span><br><span class="line"><span class="ruby">          <span class="keyword">if</span> (config.baidusitemap.url) &#123;</span></span><br><span class="line"><span class="ruby">            baiduUrl = config.baidusitemap.url</span></span><br><span class="line"><span class="ruby">          &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">          var url = baiduUrl + config.root;</span></span><br><span class="line"><span class="ruby">          posts.forEach(function(post)&#123;</span></span><br><span class="line"><span class="ruby">          <span class="keyword">if</span>(post.categories)&#123; </span><span class="xml">-%&gt;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">url</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">loc</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> encodeURI(url + post.path) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> post.updated.toDate().toISOString().replace(<span class="regexp">/T.*$/i</span>, <span class="string">""</span>) <span class="params">||</span> post.date.toDate().toISOString().replace(<span class="regexp">/T.*$/i</span>, <span class="string">""</span>) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">&#125;&#125;) </span><span class="xml"><span class="tag"><span class="attr">-</span>%&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">urlset</span>&gt;</span> -%&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo-百度收录&quot;&gt;&lt;a href=&quot;#Hexo-百度收录&quot; class=&quot;headerlink&quot; title=&quot;Hexo-百度收录&quot;&gt;&lt;/a&gt;Hexo-百度收录&lt;/h1&gt;&lt;h2 id=&quot;一、安装Hexo插件&quot;&gt;&lt;a href=&quot;#一、安装Hexo插件&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Yapi的部署和使用</title>
    <link href="https://blog.deschen.cn/2021/05/10/Yapi%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.deschen.cn/2021/05/10/Yapi%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-10T00:07:50.255Z</published>
    <updated>2021-05-12T05:44:40.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Yapi-的部署和使用"><a href="#Yapi-的部署和使用" class="headerlink" title="Yapi 的部署和使用"></a>Yapi 的部署和使用</h1><h2 id="一、基于-docker-compose-部署-Yapi"><a href="#一、基于-docker-compose-部署-Yapi" class="headerlink" title="一、基于 docker-compose 部署 Yapi"></a>一、基于 docker-compose 部署 Yapi</h2><blockquote><p>如何部署 docker-compose，点击我博客的<a href="https://deschen.gitee.io/2021/03/23/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">链接</a></p></blockquote><ul><li>部署 Yapi 的 docker-compose.yml。PS：因为 Yapi 的数据库就是MongoDB，所以部署 Yapi 要同时部署 MongoDB</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">yapi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mrjin/yapi:latest</span></span><br><span class="line">    <span class="comment"># build: ./</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">yapi</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VERSION=1.5.6</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOG_PATH=/tmp/yapi.log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOME=/home</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PORT=3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ADMIN_EMAIL=me@jinfeijie.cn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_SERVER=mongo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_NAME=yapi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PORT=27017</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">13000</span><span class="string">:3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9090</span><span class="string">:9090</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./log/yapi.log:/home/vendors/log</span> <span class="comment"># log dir</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">"bash /wait-for-it.sh mongo:27017 -- entrypoint.sh"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yapi</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../mongodb/db:/data/db</span> <span class="comment">#db dir</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yapi</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">yapi:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h2 id="二、IDEA-关于-Yapi-的使用"><a href="#二、IDEA-关于-Yapi-的使用" class="headerlink" title="二、IDEA 关于 Yapi 的使用"></a>二、IDEA 关于 Yapi 的使用</h2><ul><li><p>先下载 YapiUpload 插件，用于把接口上传到 Yapi 应用上</p></li><li><p>在 .idea 文件夹下的 misc.xml 插入 关于 Yapi 的配置,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- yapi配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"yapi"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectToken"</span>&gt;</span>22bffb576415df1b8d088176dd9090cd2d5a29141a23d059f68f8988d1823d20<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectId"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"yapiUrl"</span>&gt;</span>http://192.168.163.138:3000<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectType"</span>&gt;</span>api<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Yapi-的部署和使用&quot;&gt;&lt;a href=&quot;#Yapi-的部署和使用&quot; class=&quot;headerlink&quot; title=&quot;Yapi 的部署和使用&quot;&gt;&lt;/a&gt;Yapi 的部署和使用&lt;/h1&gt;&lt;h2 id=&quot;一、基于-docker-compose-部署-Yapi&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker命令集</title>
    <link href="https://blog.deschen.cn/2021/03/23/docker%E5%91%BD%E4%BB%A4%E9%9B%86/"/>
    <id>https://blog.deschen.cn/2021/03/23/docker%E5%91%BD%E4%BB%A4%E9%9B%86/</id>
    <published>2021-03-23T03:03:10.963Z</published>
    <updated>2021-03-29T02:56:07.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker命令集"><a href="#docker命令集" class="headerlink" title="docker命令集"></a>docker命令集</h1><p>[toc]</p><h2 id="一、docker-基本命令"><a href="#一、docker-基本命令" class="headerlink" title="一、docker 基本命令"></a>一、docker 基本命令</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker 远程访问</span></span><br><span class="line">- 打开docker.<span class="symbol">service:</span> vim /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">docker</span>.<span class="title">service</span></span></span><br><span class="line">- ExecStart修改参数：</span><br><span class="line">- 如果是centos7，修改为：ExecStart=<span class="regexp">/usr/bin</span><span class="regexp">/dockerd -H tcp:/</span><span class="regexp">/0.0.0.0:2375 -H unix:/</span><span class="regexp">/var/run</span><span class="regexp">/docker.sock</span></span><br><span class="line"><span class="regexp">- 如果是centos7以下，修改为：ExecStart=/usr</span><span class="regexp">/bin/dockerd</span> -H <span class="symbol">fd:</span>/<span class="regexp">/ -H tcp:/</span><span class="regexp">/0.0.0.0:2375</span></span><br><span class="line"><span class="regexp">- 输入网址，出现json参数则远程访问成功：http:/</span><span class="regexp">/ip:2375/info</span></span><br></pre></td></tr></table></figure><h2 id="二、docker镜像命令"><a href="#二、docker镜像命令" class="headerlink" title="二、docker镜像命令"></a>二、docker镜像命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 搜索镜像</span></span><br><span class="line">docker search [option] keyword</span><br><span class="line"><span class="bullet">- </span>option子命令</span><br><span class="line"><span class="bullet">- </span>-f, --filter 过滤输出的内容，而过滤的条件名是标题名</span><br><span class="line"><span class="bullet">- </span>--limit int 指定搜索内容个数</span><br><span class="line"><span class="bullet">- </span>--no-trunc 不截断输出内容</span><br><span class="line"><span class="bullet">- </span>例子</span><br><span class="line"><span class="bullet">- </span>docker search --filter "is-official=true" mysql</span><br><span class="line"><span class="bullet">- </span>docker search --filter "stars=500" mysql</span><br><span class="line"><span class="section"># 查看镜像文件</span></span><br><span class="line">docker images</span><br><span class="line"><span class="section"># 下拉镜像文件</span></span><br><span class="line">docker pull [OPTIONS] NAME[:TAG]</span><br><span class="line"><span class="bullet">- </span>OPTIONS</span><br><span class="line"><span class="bullet">- </span>-a :拉取所有 tagged 镜像</span><br><span class="line"><span class="bullet">- </span>--disable-content-trust :忽略镜像的校验,默认开启</span><br><span class="line"><span class="bullet">- </span>TAG：版本号，可以在官方网找具体版本 https://hub.docker.com/r/library/</span><br><span class="line"><span class="section"># 删除镜像(前提是要删除对应容器，否则使用docker rmi -f命令强制删除)</span></span><br><span class="line">docker rmi REPOSITORY:TAG 或者 docker rmi IMAGE_ID</span><br></pre></td></tr></table></figure><h2 id="三、docker-容器命令"><a href="#三、docker-容器命令" class="headerlink" title="三、docker 容器命令"></a>三、docker 容器命令</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker ps [<span class="keyword">option</span>]</span><br><span class="line">- <span class="keyword">option</span>子命令</span><br><span class="line">- -a 查找所有容器，包括未运行的容器；没填则默认显示启动的容器</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run [<span class="keyword">option</span>] [-d] [image]</span><br><span class="line">- <span class="keyword">option</span> 子命令</span><br><span class="line">-  --privileged=<span class="keyword">true</span> 使用该参数，container内的root拥有真正的root权限。否则，container内的root只是外部的一个普通用户权限。例如：普通用户不允许docker内启动docker</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker命令集&quot;&gt;&lt;a href=&quot;#docker命令集&quot; class=&quot;headerlink&quot; title=&quot;docker命令集&quot;&gt;&lt;/a&gt;docker命令集&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、docker-基本命令&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker-compose + jenkins搭建部署</title>
    <link href="https://blog.deschen.cn/2021/03/23/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
    <id>https://blog.deschen.cn/2021/03/23/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</id>
    <published>2021-03-23T00:53:17.288Z</published>
    <updated>2021-03-25T01:25:25.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-jenkins搭建部署"><a href="#docker-compose-jenkins搭建部署" class="headerlink" title="docker-compose + jenkins搭建部署"></a>docker-compose + jenkins搭建部署</h1><p>[toc]</p><h2 id="一、docker的下载安装"><a href="#一、docker的下载安装" class="headerlink" title="一、docker的下载安装"></a>一、docker的下载安装</h2><ul><li><p>docker安装环境条件</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Docker安装环境条件</span><br><span class="line"># <span class="number">1</span>、Docker 运行在 CentOS <span class="number">7</span> 上，要求系统为<span class="number">64</span>位、系统内核版本为 <span class="number">3.10</span> 以上。</span><br><span class="line"># <span class="number">2</span>、Docker 运行在 CentOS<span class="number">-6.5</span> 或更高的版本的 CentOS 上，要求系统为<span class="number">64</span>位、系统内核版本为 <span class="number">2.6</span><span class="number">.32</span><span class="number">-431</span> 或者更高版本。内核编译时需要激活namespace,CGgroup,netfilter,veth等特性，还对iptablest等工具版有依赖要求。</span><br><span class="line"></span><br><span class="line"># 查看linux版本 需要CentOS7版本以上</span><br><span class="line">rpm -q centos-release</span><br><span class="line"># 查看内核版本</span><br><span class="line">uname -r</span><br></pre></td></tr></table></figure></li><li><p>卸载旧的docker</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧的安装的组件</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum remove docker \</span></span><br><span class="line">                  <span class="meta">docker-client</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-client-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-common</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-latest-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="attr">docker-engine</span></span><br></pre></td></tr></table></figure></li><li><p>安装依赖及设置存储库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装yum-utils</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum install -y yum-utils</span></span><br><span class="line"><span class="comment"># 设置稳定的存储库</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum-config-manager \</span></span><br><span class="line">    <span class="meta">--add-repo</span> <span class="string">\</span></span><br><span class="line">    <span class="attr">http</span>:<span class="string">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接安装最新Docker引擎和容器</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum -y install docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"><span class="comment"># 安装完成后查看版本</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><p>或者安装指定版本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 列出可用版本</span><br><span class="line">yum <span class="keyword">list</span> docker-<span class="keyword">ce</span> --showduplicates | <span class="keyword">sort</span> -r</span><br><span class="line"># 安装指定版本</span><br><span class="line">sudo yum install docker-<span class="keyword">ce</span>-<span class="symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="keyword">ce</span>-cli-<span class="symbol">&lt;VERSION_STRING&gt;</span> containerd.io</span><br><span class="line"># 例子</span><br><span class="line">sudo yum install docker-<span class="keyword">ce</span>-<span class="number">18.09</span>.<span class="number">1</span> docker-<span class="keyword">ce</span>-cli-<span class="number">18.09</span>.<span class="number">1</span> containerd.io</span><br></pre></td></tr></table></figure></li><li><p>docker的操作</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="comment"># 停止docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="comment"># 设置开机自启动</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="comment"># 查看信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 查看帮助文档</span></span><br><span class="line">docker --help</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">- <span class="comment"># 1、卸载 Docker 引擎、CLI 和容器包</span></span><br><span class="line">    sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">- <span class="comment"># 2、主机上的图像、容器、卷或自定义配置文件不会自动删除。要删除所有图像、容器和卷</span></span><br><span class="line">    sudo rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></span><br><span class="line">- <span class="comment"># 3、必须手动删除任何编辑的配置文件</span></span><br><span class="line">    sudo rm 配置文件</span><br></pre></td></tr></table></figure></li><li><p>验证docker是否安装成功</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下拉并运行hello-world镜像</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></li><li><p>阿里镜像源做为docker镜像源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">》注册阿里账号》搜索：容器镜像》镜像加速器》选择CentOS》直接复制命令运行</span><br></pre></td></tr></table></figure><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210323111816853.png" alt="image-20210323111816853"></p></li></ul><h2 id="二、docker-compose安装"><a href="#二、docker-compose安装" class="headerlink" title="二、docker-compose安装"></a>二、docker-compose安装</h2><ul><li><p>docker-compose安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https:<span class="regexp">//gi</span>thub.com<span class="regexp">/docker/</span>compose<span class="regexp">/releases/</span>download<span class="regexp">/1.21.2/</span>docker-compose-$(uname -s)-$(uname -m) -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line">sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line"><span class="comment"># 1.21.2 是docker-compose版本，可以根据自己需求在github查找版本</span></span><br><span class="line"><span class="comment"># docker-compose-$(uname -s)-$(uname -m)  在centos7中输出为docker-compose-Linux-x86_64</span></span><br></pre></td></tr></table></figure></li><li><p>docker-compose命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose 命令默认使用的配置文件是当前目录中的 docker-compose.yml 文件</span></span><br><span class="line">docker<span class="literal">-compose</span> up</span><br><span class="line"><span class="comment"># -f 指定其他配置文件。可以添加多个 -f 选项，docker-compose 会自动合并它们，当然也会根据先后顺序把一些重复的配置项覆盖掉</span></span><br><span class="line"><span class="comment"># 自动完成包括构建镜像，(重新)创建服务，启动服务，并关联服务相关容器的一系列操作。不过在前台打印信息，ctrl+c容器就会停止</span></span><br><span class="line">docker<span class="literal">-compose</span> <span class="operator">-f</span> docker<span class="literal">-compose</span>.yml <span class="operator">-f</span> docker<span class="literal">-compose</span><span class="literal">-dev</span> up </span><br><span class="line"><span class="comment"># 后台启动并运行</span></span><br><span class="line">docker<span class="literal">-compose</span> <span class="operator">-f</span> docker<span class="literal">-compose</span>.yml <span class="operator">-f</span> docker<span class="literal">-compose</span><span class="literal">-dev</span> up <span class="literal">-d</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三、docker-compose-jenkins部署"><a href="#三、docker-compose-jenkins部署" class="headerlink" title="三、docker-compose+jenkins部署"></a>三、docker-compose+jenkins部署</h2><ul><li><p>关于jenkins的docker-compose.yml文件</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: '3.1'</span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    image: jenkins/jenkins:lts</span><br><span class="line">    volumes:       # 挂载目录  本地文件夹目录:容器文件夹目录</span><br><span class="line">      -<span class="ruby"> /data/jenkins/<span class="symbol">:/var/jenkins_home</span></span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/var/run</span><span class="regexp">/docker.sock:/var</span><span class="regexp">/run/docker</span>.sock</span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/usr/bin</span><span class="regexp">/docker:/usr</span><span class="regexp">/bin/docker</span></span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/usr/lib</span><span class="regexp">/x86_64-linux-gnu/libltdl</span>.so.<span class="number">7</span><span class="symbol">:/usr/lib/x86_64-linux-gnu/libltdl</span>.so.<span class="number">7</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">ports:</span>   <span class="comment"># 绑定端口</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"8080:8080"</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">expose:</span>  <span class="comment"># 暴露端口</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"8080"</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"50000"</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">privileged:</span> <span class="literal">true</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">user:</span> root</span></span><br><span class="line"><span class="ruby">    <span class="symbol">restart:</span> always</span></span><br><span class="line"><span class="ruby">    <span class="symbol">container_name:</span> jenkins</span></span><br><span class="line"><span class="ruby">    <span class="symbol">environment:</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">JAVA_OPTS:</span> <span class="string">'-Djava.util.logging.config.file=/var/jenkins_home/log.properties'</span></span></span><br></pre></td></tr></table></figure></li><li><p>在docker-compose.yml的目录输入<code>docker-compose up -d</code></p></li><li><p>输入网址 ip + 端口访问，若显示页面，则jenkins启动成功</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210325092428652.png" alt="image-20210325092428652"></p></li></ul><h2 id="四、异常处理"><a href="#四、异常处理" class="headerlink" title="四、异常处理"></a>四、异常处理</h2><ol><li>如果创建任务时，没有maven项目选项，则在下载安装对应maven插件</li><li>如果构建环境没有send ssh选项，则下载安装对应Publish Over SSH插件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker-compose-jenkins搭建部署&quot;&gt;&lt;a href=&quot;#docker-compose-jenkins搭建部署&quot; class=&quot;headerlink&quot; title=&quot;docker-compose + jenkins搭建部署&quot;&gt;&lt;/a&gt;docker
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java开发规范</title>
    <link href="https://blog.deschen.cn/2021/03/21/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>https://blog.deschen.cn/2021/03/21/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</id>
    <published>2021-03-21T08:01:51.336Z</published>
    <updated>2021-03-21T13:45:12.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java开发规范"><a href="#Java开发规范" class="headerlink" title="Java开发规范"></a>Java开发规范</h1><p>[toc]</p><h2 id="一、使用-Deprecated使用时，要注解为什么废弃，新的接口是什么。"><a href="#一、使用-Deprecated使用时，要注解为什么废弃，新的接口是什么。" class="headerlink" title="一、使用@Deprecated使用时，要注解为什么废弃，新的接口是什么。"></a>一、使用@Deprecated使用时，要注解为什么废弃，新的接口是什么。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">模板：</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 对象、对象属性、方法的功能描述 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">  * 参考示例：对象、对象属性、方法的用法和结果 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">  * 废弃原因：为什么被废弃 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">  * 替代方案： &#123;<span class="doctag">@link</span> 相应的对象、对象属性、方法&#125; &lt;br/&gt;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  对象、对象属性、方法;</span><br><span class="line">    </span><br><span class="line">  替代的对象、对象属性、方法;</span><br><span class="line">    </span><br><span class="line">  同时，需要用单元测试判断是否能新的是否能替换旧的，使用单元测试校验 Assert.assertEquals()...</span><br><span class="line">    </span><br><span class="line">示例：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderParam</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象详情 </span></span><br><span class="line"><span class="comment">     * 参考示例：'[&#123;"count":22,"name":"商品1"&#125;,&#123;"count":33,"name":"商品2"&#125;]'</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 废弃原因：订单详情由JSON传参，改为对象传参。</span></span><br><span class="line"><span class="comment">     * 替代方案： &#123;<span class="doctag">@link</span> OrderCreateParam#orderItemParams&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">private</span> String orderItemDetail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItemParam&gt; orderItemParams;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他属性</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单元测试替代方案是否能替换过期属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OrderParam orderParam = <span class="keyword">new</span> OrderParam();</span><br><span class="line">        orderParam.setOrderItemDetail(<span class="string">"[&#123;\"count\":22,\"name\":\"商品1\"&#125;,&#123;\"count\":33,\"name\":\"商品2\"&#125;]"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;OrderItemParam&gt; orderItemParamList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        OrderItemParam orderItemParam1 = <span class="keyword">new</span> OrderItemParam();</span><br><span class="line">        orderItemParam1.setCount(<span class="number">22</span>);</span><br><span class="line">        orderItemParam1.setName(<span class="string">"商品1"</span>);</span><br><span class="line">        OrderItemParam orderItemParam2 = <span class="keyword">new</span> OrderItemParam();</span><br><span class="line">        orderItemParam2.setCount(<span class="number">33</span>);</span><br><span class="line">        orderItemParam2.setName(<span class="string">"商品2"</span>);</span><br><span class="line">        orderItemParamList.add(orderItemParam1);</span><br><span class="line">        orderItemParamList.add(orderItemParam2);</span><br><span class="line">        orderParam.setOrderItemParamList(orderItemParamList);</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(orderParam.getOrderItemDetail(), JSON.toJSONString(orderParam.getOrderItemParamList()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java开发规范&quot;&gt;&lt;a href=&quot;#Java开发规范&quot; class=&quot;headerlink&quot; title=&quot;Java开发规范&quot;&gt;&lt;/a&gt;Java开发规范&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、使用-Deprecated使用时，要注解为什么废弃，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="https://blog.deschen.cn/2021/03/13/Java%E5%8F%8D%E5%B0%84/"/>
    <id>https://blog.deschen.cn/2021/03/13/Java%E5%8F%8D%E5%B0%84/</id>
    <published>2021-03-13T15:16:43.162Z</published>
    <updated>2021-03-14T05:22:23.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><p>[toc]</p><h2 id="一、什么是反射？"><a href="#一、什么是反射？" class="headerlink" title="一、什么是反射？"></a>一、什么是反射？</h2><ul><li><p>反射实在程序时动态加载类并获取类的详细信息，从而操作类或对象属性和方法。</p></li><li><p>本质在JVM中获取class对象，在对class对象反编译，从而获取对象的各种信息</p></li><li><p>类加载与反射原理图</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210313232232665.png" alt="image-20210313232232665"></p></li></ul><h2 id="二、反射的优缺点"><a href="#二、反射的优缺点" class="headerlink" title="二、反射的优缺点"></a>二、反射的优缺点</h2><ul><li>优点<ul><li>增加程序的灵活性，避免程序写死在代码里<ul><li>因为Java是先编译后运行的语言，要想实例一个类，那么必须修改源代码重新编译。而反射不需要通过编译获取，比如反射可以通过配置文件里面的类信息实例化某类</li></ul></li></ul></li><li>缺点<ul><li>影响程序性能：反射包括一些动态类型，所以JVM无法对代码进行修改，因此效率比非反射要低得多。在性能方面要求高的代码最好不要使用反射</li><li>内部暴露：反射可以执行一些正常情况下不允许的操作（比如访问私有方法和属性），所以反射会导致出乎意料的事件发生——代码有功能上错误，破坏抽象性</li></ul></li></ul><h3 id="三、反射的用途"><a href="#三、反射的用途" class="headerlink" title="三、反射的用途"></a>三、反射的用途</h3><ul><li>框架的开发，比如Spring框架的配置化，读取XML文件配置的Bean进行加载。</li></ul><h2 id="四、反射常用的类"><a href="#四、反射常用的类" class="headerlink" title="四、反射常用的类"></a>四、反射常用的类</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.lang.Class;</span><br><span class="line"></span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Constructor</span>;</span></span><br><span class="line"></span><br><span class="line">Java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Method</span>;</span></span><br><span class="line"></span><br><span class="line">Java.lang.reflect.Modifier;</span><br></pre></td></tr></table></figure><h2 id="五、反射的基本使用"><a href="#五、反射的基本使用" class="headerlink" title="五、反射的基本使用"></a>五、反射的基本使用</h2><ul><li><p>获取Class</p><ul><li><p>调用对象的getClass方法</p></li><li><p>调用类的静态属性 class属性</p></li><li><p>调用Class的静态方法forName(“类全限定名“)(最常用)</p></li><li><p>三种比较判断</p><ul><li>三种方式中，常用第三种，第一种对象都有了还要反射干什么，第二种需要导入类包，依赖太强，不导包就抛编译错误。一般都使用第三种，一个字符串可以传入也可以写在配置文件中等多种方法。    </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类的三种方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClassTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、调用对象的getClass方法</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">12</span>);</span><br><span class="line">        Class&lt;? extends Person&gt; personClass1 = person.getClass();</span><br><span class="line">        System.out.println(personClass1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、调用类的静态属性 class属性</span></span><br><span class="line">        Class&lt;Person&gt; personClass2 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(personClass2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、调用Class的静态方法forName("类全限定名“)</span></span><br><span class="line">        Class&lt;?&gt; personClass3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            personClass3 = Class.forName(<span class="string">"cn.deschen.features.jdk8.cn.deschen.reflect.Person"</span>);</span><br><span class="line">            System.out.println(personClass3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在运行期间，一个类，只有一个Class对象产生，所以打印结果都是true；</span></span><br><span class="line">        System.out.println(personClass1 == personClass2);</span><br><span class="line">        System.out.println(personClass2 == personClass3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>判断是否为某个类的示例</p><ul><li>一般的，我们使用instanceof 关键字来判断是否为某个类的实例。同时我们也可以借助反射中Class对象的isInstance()方法来判断时候为某个类的实例，他是一个native方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断是否为某类实例</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isInstanceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Person person = <span class="keyword">new</span> Person();</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 1、使用instanceof判断</span></span><br><span class="line">      System.out.println(person <span class="keyword">instanceof</span> Person);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 2、使用类.isInstance(实例)</span></span><br><span class="line">      System.out.println(Person<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">person</span>))</span>;</span><br><span class="line">      System.out.println(ReflectCase<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">person</span>))</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建实例：通过反射来生成对象主要有两种方法</p><ul><li>使用Class对象的newInstance()方法来创建Class对象对应类的实例。</li><li>先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建对象，这种方法可以用指定的构造器构造类的实例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、使用Class对象的newInstance()方法来创建Class对象对应类的实例</span></span><br><span class="line">        Person person1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            person1 = Person<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(person1.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建对象，这种方法可以用指定的构造器构造类的实例。</span></span><br><span class="line">        Person person2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;Person&gt; constructor = Person<span class="class">.<span class="keyword">class</span>.<span class="title">getConstructor</span>()</span>;</span><br><span class="line">            person2 = constructor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exceptionalness e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(person2.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java反射&quot;&gt;&lt;a href=&quot;#Java反射&quot; class=&quot;headerlink&quot; title=&quot;Java反射&quot;&gt;&lt;/a&gt;Java反射&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、什么是反射？&quot;&gt;&lt;a href=&quot;#一、什么是反射？&quot; class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Nginx工作原理详解</title>
    <link href="https://blog.deschen.cn/2021/03/09/Nginx%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.deschen.cn/2021/03/09/Nginx%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-03-09T12:54:34.158Z</published>
    <updated>2021-03-09T13:16:20.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx工作原理讲解"><a href="#Nginx工作原理讲解" class="headerlink" title="Nginx工作原理讲解"></a>Nginx工作原理讲解</h1><p>[toc]</p><h2 id="一、Nginx工作过程"><a href="#一、Nginx工作过程" class="headerlink" title="一、Nginx工作过程"></a>一、Nginx工作过程</h2><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210309210052409.png" alt="image-20210309210052409"></p><ol><li>在nginx启动后，会有一个master进程和多个worker进程，master进程主要用来管理worker进程，包括：接受信号，将信号分发给worker进程，监听worker进程工作状态，当worker进程退出时(非正常)，启动新的worker进程。基本的网络事件会交给worker进程处理。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的 。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。 worker进程的个数是可以设置的，一般我们会设置与机器cpu核数一致，这里面的原因与nginx的进程模型以及事件处理模型是分不开的 。</li><li>当master接收到重新加载的信号会怎么处理(./nginx -s reload)?，master会重新加载配置文件，然后启动新的进程，使用的新的worker进程来接受请求，并告诉老的worker进程他们可以退休了，老的worker进程将不会接受新的，老的worker进程处理完手中正在处理的请求就会退出。</li><li>worker进程是如何处理用户的请求呢？首先master会根据配置文件生成一个监听相应端口的socket，然后创建多个worker进程，这样每个worker就可以接受从socket过来的消息。当一个连接过来的时候，每一个worker都能接收到通知，但是只有一个worker能和这个连接建立关系，其他的worker都会连接失败，这就是所谓的惊群现象。为了解决这个问题，nginx提供一个共享锁accept_mutex，有了这个共享锁后，就会只有一个worker去接收这个连接。当一个worker进程在accept这个连接之后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后才断开连接，这样一个完整的请求就是这样的了。</li></ol><h2 id="二、nginx的事件驱动机制"><a href="#二、nginx的事件驱动机制" class="headerlink" title="二、nginx的事件驱动机制"></a>二、nginx的事件驱动机制</h2><ul><li>为什么几个worker进程能同时接收上万的请求呢？这是因为nginx事件处理机制是异步非阻塞的。nginx将一个请求划分为多个阶段来异步处理模块，每个阶段只是处理请求的一部分，如果请求的这一部分发生阻塞，nginx不会等待，它会处理其他的请求的某一部分。</li><li>与传统web服务不同之处<ul><li>传统web服务器的每个事件消费者独占一个进程(线程)资源,这种情况对于用户规模较小的情况来说,用户响应速度快,但是当并发规模达到数十万上百万的时候,由于线程(进程)数目过多,会频繁的切换,而且当线程阻塞的时候会进行睡眠,也会造成资源的浪费,这样服务器就会产生瓶颈.</li><li>nginx服务器采用的事件驱动机制不同,他不会为每个消费事件创建一个进程或线程,这样就不会产生由于进程间频繁切换占用cpu而产生的瓶颈,而且nginx不会让事件阻塞,即采用无阻塞事件驱动模型,这样就不会因为事件阻塞使进程睡眠而造成的资源浪费.</li></ul></li></ul><h2 id="三、epoll库"><a href="#三、epoll库" class="headerlink" title="三、epoll库"></a>三、epoll库</h2><ul><li>epoll库是Nginx服务器支持的高性能事件驱动库之一。它是公认的最好的事件驱动模型。和poll库及select库有很大的区别。</li><li>poll和select都是创建一个待处理事件列表，然后把这个列表发给内核，返回的时候，再去轮询检查这个列表。以判断这个事件是否发生。在描述符太多的情况下，就会明显效率低下了。</li><li>epoll是这么做的，它把事件描述符列表的管理交给内核复制。一旦有某个事件发生，内核将发生事件的事件描述符交给Nginx的进程，而不是将整个事件描述符列表交给进程，让进程去轮询具体是哪个描述符。epoll()避免了轮询整个事件描述符列表。所以显得更高效。</li><li>epoll库的基本步骤：<ul><li>epoll库通过相关调用通知内核创建一个有N个描述符的事件列表，然后给这个事件列表设置自己关心的事件。并把它添加到内核中。在具体的代码中还可以实现对相关调用的事件描述符列表进行修改和删除。</li><li>一旦设置完成就一直等待内核通知事件发生了，某一事件发生后，内核就将发生事件的描述符给epoll库，epoll库去处理事件。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx工作原理讲解&quot;&gt;&lt;a href=&quot;#Nginx工作原理讲解&quot; class=&quot;headerlink&quot; title=&quot;Nginx工作原理讲解&quot;&gt;&lt;/a&gt;Nginx工作原理讲解&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、Nginx工作过程&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
