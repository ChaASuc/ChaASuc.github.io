<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deschen Blog</title>
  
  <subtitle>以Java开发为主的个人博客，记录自己在学习、工作和成长的笔记和心得</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.deschen.cn/"/>
  <updated>2021-05-12T05:44:40.805Z</updated>
  <id>https://blog.deschen.cn/</id>
  
  <author>
    <name>Deschen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Yapi的部署和使用</title>
    <link href="https://blog.deschen.cn/2021/05/10/Yapi%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.deschen.cn/2021/05/10/Yapi%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-10T00:07:50.255Z</published>
    <updated>2021-05-12T05:44:40.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Yapi-的部署和使用"><a href="#Yapi-的部署和使用" class="headerlink" title="Yapi 的部署和使用"></a>Yapi 的部署和使用</h1><h2 id="一、基于-docker-compose-部署-Yapi"><a href="#一、基于-docker-compose-部署-Yapi" class="headerlink" title="一、基于 docker-compose 部署 Yapi"></a>一、基于 docker-compose 部署 Yapi</h2><blockquote><p>如何部署 docker-compose，点击我博客的<a href="https://deschen.gitee.io/2021/03/23/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">链接</a></p></blockquote><ul><li>部署 Yapi 的 docker-compose.yml。PS：因为 Yapi 的数据库就是MongoDB，所以部署 Yapi 要同时部署 MongoDB</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">yapi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mrjin/yapi:latest</span></span><br><span class="line">    <span class="comment"># build: ./</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">yapi</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VERSION=1.5.6</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOG_PATH=/tmp/yapi.log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOME=/home</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PORT=3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ADMIN_EMAIL=me@jinfeijie.cn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_SERVER=mongo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_NAME=yapi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PORT=27017</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">13000</span><span class="string">:3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9090</span><span class="string">:9090</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./log/yapi.log:/home/vendors/log</span> <span class="comment"># log dir</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">"bash /wait-for-it.sh mongo:27017 -- entrypoint.sh"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yapi</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../mongodb/db:/data/db</span> <span class="comment">#db dir</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yapi</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">yapi:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h2 id="二、IDEA-关于-Yapi-的使用"><a href="#二、IDEA-关于-Yapi-的使用" class="headerlink" title="二、IDEA 关于 Yapi 的使用"></a>二、IDEA 关于 Yapi 的使用</h2><ul><li><p>先下载 YapiUpload 插件，用于把接口上传到 Yapi 应用上</p></li><li><p>在 .idea 文件夹下的 misc.xml 插入 关于 Yapi 的配置,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- yapi配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"yapi"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectToken"</span>&gt;</span>22bffb576415df1b8d088176dd9090cd2d5a29141a23d059f68f8988d1823d20<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectId"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"yapiUrl"</span>&gt;</span>http://192.168.163.138:3000<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectType"</span>&gt;</span>api<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Yapi-的部署和使用&quot;&gt;&lt;a href=&quot;#Yapi-的部署和使用&quot; class=&quot;headerlink&quot; title=&quot;Yapi 的部署和使用&quot;&gt;&lt;/a&gt;Yapi 的部署和使用&lt;/h1&gt;&lt;h2 id=&quot;一、基于-docker-compose-部署-Yapi&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker-compose + jenkins搭建部署</title>
    <link href="https://blog.deschen.cn/2021/03/23/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
    <id>https://blog.deschen.cn/2021/03/23/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</id>
    <published>2021-03-23T00:53:17.288Z</published>
    <updated>2021-03-25T01:25:25.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-jenkins搭建部署"><a href="#docker-compose-jenkins搭建部署" class="headerlink" title="docker-compose + jenkins搭建部署"></a>docker-compose + jenkins搭建部署</h1><p>[toc]</p><h2 id="一、docker的下载安装"><a href="#一、docker的下载安装" class="headerlink" title="一、docker的下载安装"></a>一、docker的下载安装</h2><ul><li><p>docker安装环境条件</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Docker安装环境条件</span><br><span class="line"># <span class="number">1</span>、Docker 运行在 CentOS <span class="number">7</span> 上，要求系统为<span class="number">64</span>位、系统内核版本为 <span class="number">3.10</span> 以上。</span><br><span class="line"># <span class="number">2</span>、Docker 运行在 CentOS<span class="number">-6.5</span> 或更高的版本的 CentOS 上，要求系统为<span class="number">64</span>位、系统内核版本为 <span class="number">2.6</span><span class="number">.32</span><span class="number">-431</span> 或者更高版本。内核编译时需要激活namespace,CGgroup,netfilter,veth等特性，还对iptablest等工具版有依赖要求。</span><br><span class="line"></span><br><span class="line"># 查看linux版本 需要CentOS7版本以上</span><br><span class="line">rpm -q centos-release</span><br><span class="line"># 查看内核版本</span><br><span class="line">uname -r</span><br></pre></td></tr></table></figure></li><li><p>卸载旧的docker</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧的安装的组件</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum remove docker \</span></span><br><span class="line">                  <span class="meta">docker-client</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-client-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-common</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-latest-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="attr">docker-engine</span></span><br></pre></td></tr></table></figure></li><li><p>安装依赖及设置存储库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装yum-utils</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum install -y yum-utils</span></span><br><span class="line"><span class="comment"># 设置稳定的存储库</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum-config-manager \</span></span><br><span class="line">    <span class="meta">--add-repo</span> <span class="string">\</span></span><br><span class="line">    <span class="attr">http</span>:<span class="string">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接安装最新Docker引擎和容器</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum -y install docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"><span class="comment"># 安装完成后查看版本</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><p>或者安装指定版本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 列出可用版本</span><br><span class="line">yum <span class="keyword">list</span> docker-<span class="keyword">ce</span> --showduplicates | <span class="keyword">sort</span> -r</span><br><span class="line"># 安装指定版本</span><br><span class="line">sudo yum install docker-<span class="keyword">ce</span>-<span class="symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="keyword">ce</span>-cli-<span class="symbol">&lt;VERSION_STRING&gt;</span> containerd.io</span><br><span class="line"># 例子</span><br><span class="line">sudo yum install docker-<span class="keyword">ce</span>-<span class="number">18.09</span>.<span class="number">1</span> docker-<span class="keyword">ce</span>-cli-<span class="number">18.09</span>.<span class="number">1</span> containerd.io</span><br></pre></td></tr></table></figure></li><li><p>docker的操作</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="comment"># 停止docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="comment"># 设置开机自启动</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="comment"># 查看信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 查看帮助文档</span></span><br><span class="line">docker --help</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">- <span class="comment"># 1、卸载 Docker 引擎、CLI 和容器包</span></span><br><span class="line">    sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">- <span class="comment"># 2、主机上的图像、容器、卷或自定义配置文件不会自动删除。要删除所有图像、容器和卷</span></span><br><span class="line">    sudo rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></span><br><span class="line">- <span class="comment"># 3、必须手动删除任何编辑的配置文件</span></span><br><span class="line">    sudo rm 配置文件</span><br></pre></td></tr></table></figure></li><li><p>验证docker是否安装成功</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下拉并运行hello-world镜像</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></li><li><p>阿里镜像源做为docker镜像源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">》注册阿里账号》搜索：容器镜像》镜像加速器》选择CentOS》直接复制命令运行</span><br></pre></td></tr></table></figure><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210323111816853.png" alt="image-20210323111816853"></p></li></ul><h2 id="二、docker-compose安装"><a href="#二、docker-compose安装" class="headerlink" title="二、docker-compose安装"></a>二、docker-compose安装</h2><ul><li><p>docker-compose安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https:<span class="regexp">//gi</span>thub.com<span class="regexp">/docker/</span>compose<span class="regexp">/releases/</span>download<span class="regexp">/1.21.2/</span>docker-compose-$(uname -s)-$(uname -m) -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line">sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line"><span class="comment"># 1.21.2 是docker-compose版本，可以根据自己需求在github查找版本</span></span><br><span class="line"><span class="comment"># docker-compose-$(uname -s)-$(uname -m)  在centos7中输出为docker-compose-Linux-x86_64</span></span><br></pre></td></tr></table></figure></li><li><p>docker-compose命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose 命令默认使用的配置文件是当前目录中的 docker-compose.yml 文件</span></span><br><span class="line">docker<span class="literal">-compose</span> up</span><br><span class="line"><span class="comment"># -f 指定其他配置文件。可以添加多个 -f 选项，docker-compose 会自动合并它们，当然也会根据先后顺序把一些重复的配置项覆盖掉</span></span><br><span class="line"><span class="comment"># 自动完成包括构建镜像，(重新)创建服务，启动服务，并关联服务相关容器的一系列操作。不过在前台打印信息，ctrl+c容器就会停止</span></span><br><span class="line">docker<span class="literal">-compose</span> <span class="operator">-f</span> docker<span class="literal">-compose</span>.yml <span class="operator">-f</span> docker<span class="literal">-compose</span><span class="literal">-dev</span> up </span><br><span class="line"><span class="comment"># 后台启动并运行</span></span><br><span class="line">docker<span class="literal">-compose</span> <span class="operator">-f</span> docker<span class="literal">-compose</span>.yml <span class="operator">-f</span> docker<span class="literal">-compose</span><span class="literal">-dev</span> up <span class="literal">-d</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三、docker-compose-jenkins部署"><a href="#三、docker-compose-jenkins部署" class="headerlink" title="三、docker-compose+jenkins部署"></a>三、docker-compose+jenkins部署</h2><ul><li><p>关于jenkins的docker-compose.yml文件</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: '3.1'</span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    image: jenkins/jenkins:lts</span><br><span class="line">    volumes:       # 挂载目录  本地文件夹目录:容器文件夹目录</span><br><span class="line">      -<span class="ruby"> /data/jenkins/<span class="symbol">:/var/jenkins_home</span></span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/var/run</span><span class="regexp">/docker.sock:/var</span><span class="regexp">/run/docker</span>.sock</span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/usr/bin</span><span class="regexp">/docker:/usr</span><span class="regexp">/bin/docker</span></span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/usr/lib</span><span class="regexp">/x86_64-linux-gnu/libltdl</span>.so.<span class="number">7</span><span class="symbol">:/usr/lib/x86_64-linux-gnu/libltdl</span>.so.<span class="number">7</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">ports:</span>   <span class="comment"># 绑定端口</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"8080:8080"</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">expose:</span>  <span class="comment"># 暴露端口</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"8080"</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"50000"</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">privileged:</span> <span class="literal">true</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">user:</span> root</span></span><br><span class="line"><span class="ruby">    <span class="symbol">restart:</span> always</span></span><br><span class="line"><span class="ruby">    <span class="symbol">container_name:</span> jenkins</span></span><br><span class="line"><span class="ruby">    <span class="symbol">environment:</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">JAVA_OPTS:</span> <span class="string">'-Djava.util.logging.config.file=/var/jenkins_home/log.properties'</span></span></span><br></pre></td></tr></table></figure></li><li><p>在docker-compose.yml的目录输入<code>docker-compose up -d</code></p></li><li><p>输入网址 ip + 端口访问，若显示页面，则jenkins启动成功</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210325092428652.png" alt="image-20210325092428652"></p></li></ul><h2 id="四、异常处理"><a href="#四、异常处理" class="headerlink" title="四、异常处理"></a>四、异常处理</h2><ol><li>如果创建任务时，没有maven项目选项，则在下载安装对应maven插件</li><li>如果构建环境没有send ssh选项，则下载安装对应Publish Over SSH插件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker-compose-jenkins搭建部署&quot;&gt;&lt;a href=&quot;#docker-compose-jenkins搭建部署&quot; class=&quot;headerlink&quot; title=&quot;docker-compose + jenkins搭建部署&quot;&gt;&lt;/a&gt;docker
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="https://blog.deschen.cn/2021/03/13/Java%E5%8F%8D%E5%B0%84/"/>
    <id>https://blog.deschen.cn/2021/03/13/Java%E5%8F%8D%E5%B0%84/</id>
    <published>2021-03-13T15:16:43.162Z</published>
    <updated>2021-03-14T05:22:23.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><p>[toc]</p><h2 id="一、什么是反射？"><a href="#一、什么是反射？" class="headerlink" title="一、什么是反射？"></a>一、什么是反射？</h2><ul><li><p>反射实在程序时动态加载类并获取类的详细信息，从而操作类或对象属性和方法。</p></li><li><p>本质在JVM中获取class对象，在对class对象反编译，从而获取对象的各种信息</p></li><li><p>类加载与反射原理图</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210313232232665.png" alt="image-20210313232232665"></p></li></ul><h2 id="二、反射的优缺点"><a href="#二、反射的优缺点" class="headerlink" title="二、反射的优缺点"></a>二、反射的优缺点</h2><ul><li>优点<ul><li>增加程序的灵活性，避免程序写死在代码里<ul><li>因为Java是先编译后运行的语言，要想实例一个类，那么必须修改源代码重新编译。而反射不需要通过编译获取，比如反射可以通过配置文件里面的类信息实例化某类</li></ul></li></ul></li><li>缺点<ul><li>影响程序性能：反射包括一些动态类型，所以JVM无法对代码进行修改，因此效率比非反射要低得多。在性能方面要求高的代码最好不要使用反射</li><li>内部暴露：反射可以执行一些正常情况下不允许的操作（比如访问私有方法和属性），所以反射会导致出乎意料的事件发生——代码有功能上错误，破坏抽象性</li></ul></li></ul><h3 id="三、反射的用途"><a href="#三、反射的用途" class="headerlink" title="三、反射的用途"></a>三、反射的用途</h3><ul><li>框架的开发，比如Spring框架的配置化，读取XML文件配置的Bean进行加载。</li></ul><h2 id="四、反射常用的类"><a href="#四、反射常用的类" class="headerlink" title="四、反射常用的类"></a>四、反射常用的类</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.lang.Class;</span><br><span class="line"></span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Constructor</span>;</span></span><br><span class="line"></span><br><span class="line">Java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Method</span>;</span></span><br><span class="line"></span><br><span class="line">Java.lang.reflect.Modifier;</span><br></pre></td></tr></table></figure><h2 id="五、反射的基本使用"><a href="#五、反射的基本使用" class="headerlink" title="五、反射的基本使用"></a>五、反射的基本使用</h2><ul><li><p>获取Class</p><ul><li><p>调用对象的getClass方法</p></li><li><p>调用类的静态属性 class属性</p></li><li><p>调用Class的静态方法forName(“类全限定名“)(最常用)</p></li><li><p>三种比较判断</p><ul><li>三种方式中，常用第三种，第一种对象都有了还要反射干什么，第二种需要导入类包，依赖太强，不导包就抛编译错误。一般都使用第三种，一个字符串可以传入也可以写在配置文件中等多种方法。    </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类的三种方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClassTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、调用对象的getClass方法</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">12</span>);</span><br><span class="line">        Class&lt;? extends Person&gt; personClass1 = person.getClass();</span><br><span class="line">        System.out.println(personClass1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、调用类的静态属性 class属性</span></span><br><span class="line">        Class&lt;Person&gt; personClass2 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(personClass2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、调用Class的静态方法forName("类全限定名“)</span></span><br><span class="line">        Class&lt;?&gt; personClass3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            personClass3 = Class.forName(<span class="string">"cn.deschen.features.jdk8.cn.deschen.reflect.Person"</span>);</span><br><span class="line">            System.out.println(personClass3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在运行期间，一个类，只有一个Class对象产生，所以打印结果都是true；</span></span><br><span class="line">        System.out.println(personClass1 == personClass2);</span><br><span class="line">        System.out.println(personClass2 == personClass3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>判断是否为某个类的示例</p><ul><li>一般的，我们使用instanceof 关键字来判断是否为某个类的实例。同时我们也可以借助反射中Class对象的isInstance()方法来判断时候为某个类的实例，他是一个native方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断是否为某类实例</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isInstanceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Person person = <span class="keyword">new</span> Person();</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 1、使用instanceof判断</span></span><br><span class="line">      System.out.println(person <span class="keyword">instanceof</span> Person);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 2、使用类.isInstance(实例)</span></span><br><span class="line">      System.out.println(Person<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">person</span>))</span>;</span><br><span class="line">      System.out.println(ReflectCase<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">person</span>))</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建实例：通过反射来生成对象主要有两种方法</p><ul><li>使用Class对象的newInstance()方法来创建Class对象对应类的实例。</li><li>先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建对象，这种方法可以用指定的构造器构造类的实例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、使用Class对象的newInstance()方法来创建Class对象对应类的实例</span></span><br><span class="line">        Person person1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            person1 = Person<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(person1.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建对象，这种方法可以用指定的构造器构造类的实例。</span></span><br><span class="line">        Person person2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;Person&gt; constructor = Person<span class="class">.<span class="keyword">class</span>.<span class="title">getConstructor</span>()</span>;</span><br><span class="line">            person2 = constructor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exceptionalness e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(person2.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java反射&quot;&gt;&lt;a href=&quot;#Java反射&quot; class=&quot;headerlink&quot; title=&quot;Java反射&quot;&gt;&lt;/a&gt;Java反射&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、什么是反射？&quot;&gt;&lt;a href=&quot;#一、什么是反射？&quot; class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Nginx工作原理详解</title>
    <link href="https://blog.deschen.cn/2021/03/09/Nginx%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.deschen.cn/2021/03/09/Nginx%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-03-09T12:54:34.158Z</published>
    <updated>2021-03-09T13:16:20.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx工作原理讲解"><a href="#Nginx工作原理讲解" class="headerlink" title="Nginx工作原理讲解"></a>Nginx工作原理讲解</h1><p>[toc]</p><h2 id="一、Nginx工作过程"><a href="#一、Nginx工作过程" class="headerlink" title="一、Nginx工作过程"></a>一、Nginx工作过程</h2><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210309210052409.png" alt="image-20210309210052409"></p><ol><li>在nginx启动后，会有一个master进程和多个worker进程，master进程主要用来管理worker进程，包括：接受信号，将信号分发给worker进程，监听worker进程工作状态，当worker进程退出时(非正常)，启动新的worker进程。基本的网络事件会交给worker进程处理。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的 。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。 worker进程的个数是可以设置的，一般我们会设置与机器cpu核数一致，这里面的原因与nginx的进程模型以及事件处理模型是分不开的 。</li><li>当master接收到重新加载的信号会怎么处理(./nginx -s reload)?，master会重新加载配置文件，然后启动新的进程，使用的新的worker进程来接受请求，并告诉老的worker进程他们可以退休了，老的worker进程将不会接受新的，老的worker进程处理完手中正在处理的请求就会退出。</li><li>worker进程是如何处理用户的请求呢？首先master会根据配置文件生成一个监听相应端口的socket，然后创建多个worker进程，这样每个worker就可以接受从socket过来的消息。当一个连接过来的时候，每一个worker都能接收到通知，但是只有一个worker能和这个连接建立关系，其他的worker都会连接失败，这就是所谓的惊群现象。为了解决这个问题，nginx提供一个共享锁accept_mutex，有了这个共享锁后，就会只有一个worker去接收这个连接。当一个worker进程在accept这个连接之后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后才断开连接，这样一个完整的请求就是这样的了。</li></ol><h2 id="二、nginx的事件驱动机制"><a href="#二、nginx的事件驱动机制" class="headerlink" title="二、nginx的事件驱动机制"></a>二、nginx的事件驱动机制</h2><ul><li>为什么几个worker进程能同时接收上万的请求呢？这是因为nginx事件处理机制是异步非阻塞的。nginx将一个请求划分为多个阶段来异步处理模块，每个阶段只是处理请求的一部分，如果请求的这一部分发生阻塞，nginx不会等待，它会处理其他的请求的某一部分。</li><li>与传统web服务不同之处<ul><li>传统web服务器的每个事件消费者独占一个进程(线程)资源,这种情况对于用户规模较小的情况来说,用户响应速度快,但是当并发规模达到数十万上百万的时候,由于线程(进程)数目过多,会频繁的切换,而且当线程阻塞的时候会进行睡眠,也会造成资源的浪费,这样服务器就会产生瓶颈.</li><li>nginx服务器采用的事件驱动机制不同,他不会为每个消费事件创建一个进程或线程,这样就不会产生由于进程间频繁切换占用cpu而产生的瓶颈,而且nginx不会让事件阻塞,即采用无阻塞事件驱动模型,这样就不会因为事件阻塞使进程睡眠而造成的资源浪费.</li></ul></li></ul><h2 id="三、epoll库"><a href="#三、epoll库" class="headerlink" title="三、epoll库"></a>三、epoll库</h2><ul><li>epoll库是Nginx服务器支持的高性能事件驱动库之一。它是公认的最好的事件驱动模型。和poll库及select库有很大的区别。</li><li>poll和select都是创建一个待处理事件列表，然后把这个列表发给内核，返回的时候，再去轮询检查这个列表。以判断这个事件是否发生。在描述符太多的情况下，就会明显效率低下了。</li><li>epoll是这么做的，它把事件描述符列表的管理交给内核复制。一旦有某个事件发生，内核将发生事件的事件描述符交给Nginx的进程，而不是将整个事件描述符列表交给进程，让进程去轮询具体是哪个描述符。epoll()避免了轮询整个事件描述符列表。所以显得更高效。</li><li>epoll库的基本步骤：<ul><li>epoll库通过相关调用通知内核创建一个有N个描述符的事件列表，然后给这个事件列表设置自己关心的事件。并把它添加到内核中。在具体的代码中还可以实现对相关调用的事件描述符列表进行修改和删除。</li><li>一旦设置完成就一直等待内核通知事件发生了，某一事件发生后，内核就将发生事件的描述符给epoll库，epoll库去处理事件。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx工作原理讲解&quot;&gt;&lt;a href=&quot;#Nginx工作原理讲解&quot; class=&quot;headerlink&quot; title=&quot;Nginx工作原理讲解&quot;&gt;&lt;/a&gt;Nginx工作原理讲解&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、Nginx工作过程&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Freemarker学习</title>
    <link href="https://blog.deschen.cn/2021/03/05/Freemarker%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.deschen.cn/2021/03/05/Freemarker%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-05T10:42:58.000Z</published>
    <updated>2021-03-17T16:29:59.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Freemarker学习"><a href="#Freemarker学习" class="headerlink" title="Freemarker学习"></a>Freemarker学习</h1><p>[toc]</p><blockquote><p>注意点：</p><p>1、Freemarker得注释是&lt;#–注释的内容–&gt;</p><p>2、Freemarker的标签必须完整，否则报错、失效</p></blockquote><h2 id="一、如何显示数据语法"><a href="#一、如何显示数据语法" class="headerlink" title="一、如何显示数据语法"></a>一、如何显示数据语法</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&#123;num&#125;  # num八大基础类型</span><br><span class="line">$&#123;emp.name&#125;  # obj是对象，并且要满足javaBean的规范，以及该类要以public修饰，否则无法获取其属性</span><br><span class="line">$&#123;emp.date ? <span class="keyword">string</span>（'yyyy -MM-dd'）&#125;   # 日期输出 </span><br><span class="line"><span class="comment"># list遍历，item_has_next返回true / false，需要以string返回，否则报错</span></span><br><span class="line">&lt;#<span class="keyword">list</span> <span class="keyword">list</span> as item&gt;</span><br><span class="line">    &lt;div&gt;对象：$&#123;item&#125;, 索引：$&#123;item_index&#125;，是否有下一个：$&#123;item_has_next ? <span class="keyword">string</span>&#125;&lt;/div&gt;</span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br><span class="line"><span class="comment"># map遍历</span></span><br><span class="line">&lt;#<span class="keyword">list</span> map?keys as key&gt;</span><br><span class="line">&lt;div&gt;键：$&#123;key&#125; 键值：$&#123;map[key]&#125;, 索引：$&#123;key_index&#125;，是否有下一个：$&#123;key_has_next ? <span class="keyword">string</span>&#125;&lt;/div&gt;</span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量存在，输出该变量，否则不输出</span></span><br><span class="line"><span class="variable">$&#123;</span>emp.name ? if_exists&#125;  </span><br><span class="line"><span class="variable">$&#123;</span>emp.name ! &#125;</span><br><span class="line"><span class="comment"># 变量不存在，取默认值xxx</span></span><br><span class="line"><span class="variable">$&#123;</span>emp.name ? default(<span class="string">"xxx"</span>)&#125;</span><br><span class="line"><span class="variable">$&#123;</span>emp.name ! <span class="string">"xxx"</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"123&lt;br&gt;456"</span> ? html&#125;    　<span class="comment"># 对字符串进行HTML编码，对html中特殊字符进行转义，即网页显示该字符串内容</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"str"</span> ? cap_first&#125;    　　<span class="comment"># 使字符串第一个字母大写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"str"</span> ? uncap_first&#125;    　　<span class="comment"># 使字符串第一个字母大写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"Str"</span> ? lower_case&#125;       <span class="comment"># 将字符串转换成小写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"Str"</span> ? upper_case&#125;       <span class="comment"># 将字符串转换成大写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">" str "</span> ? trim&#125;           <span class="comment"># 去掉字符串前后的空白字符</span></span><br><span class="line"><span class="variable">$&#123;</span>str ? contains(<span class="string">"xx"</span>) ? string&#125;  <span class="comment"># 字符串是否包含"xxx",返回"true"或"false"</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"你好 $&#123;emp.name !&#125;"</span>&#125;    <span class="comment"># 输出你好+变量名  </span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"你好 "</span> + emp.name !&#125;        <span class="comment"># 使用+号来连接，输出你好+变量名</span></span><br><span class="line"><span class="variable">$&#123;</span>emp ? length&#125;      <span class="comment"># 字符串的长度</span></span><br><span class="line"><span class="variable">$&#123;</span>str ? index_of（<span class="string">"x"</span>）&#125;   <span class="comment"># 字符串对应"x"所在位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取子串</span></span><br><span class="line">&lt;<span class="comment">#assign str ="abcdefghijklmn"/&gt;</span></span><br><span class="line"><span class="variable">$&#123;</span>str ? substring(0 , <span class="number">4</span>)&#125;   <span class="comment"># 1、截取第0位到第3位，输出abcd</span></span><br><span class="line"><span class="variable">$&#123;</span>str[0]&#125; <span class="variable">$&#123;</span>str[<span class="number">4</span>]&#125;   <span class="comment"># 2、截取第0位和第4位结果是ae</span></span><br><span class="line"><span class="variable">$&#123;</span>str[<span class="number">1</span>..<span class="number">4</span>]&#125;         <span class="comment"># 3、截取第1位到第4位结果是bcde</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split分割字符串</span></span><br><span class="line">&lt;<span class="comment">#list "a|b|c" ? split("|") as item&gt;</span></span><br><span class="line"><span class="variable">$&#123;</span>item&#125;</span><br><span class="line">&lt;<span class="regexp">/#list&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、数字语法"><a href="#三、数字语法" class="headerlink" title="三、数字语法"></a>三、数字语法</h2><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign <span class="symbol">x</span> = <span class="number">2.582</span> /&gt;</span><br><span class="line">$&#123;<span class="symbol">x</span> ? <span class="built_in">string</span>.number&#125;  # 数字 <span class="number">2.582</span></span><br><span class="line">$&#123;<span class="symbol">x</span> ? <span class="built_in">string</span>.currency&#125;  # 货币 ￥<span class="number">2.58</span>  小数点<span class="number">2</span>位</span><br><span class="line">$&#123;<span class="symbol">x</span> ? <span class="built_in">string</span>.percent&#125;  # 百分号 <span class="number">258</span>%  无小数点</span><br><span class="line">$&#123;<span class="symbol">x</span> ? int&#125;  # 整型<span class="number">2</span></span><br><span class="line"></span><br><span class="line"># 数字格式化插值可采用＃&#123;expr; format&#125;形式来格式化数字，其中格式可以是</span><br><span class="line"># mX：小数部分最小X位</span><br><span class="line"># MX：小数部分最大X位</span><br><span class="line">&lt;#assign <span class="symbol">x</span> = <span class="number">2.582</span> /&gt;</span><br><span class="line">&lt;#assign <span class="symbol">y</span> = <span class="number">4</span> /&gt; </span><br><span class="line">&#123;<span class="symbol">x</span>; M2&#125; <span class="comment">//输出2.58 </span></span><br><span class="line">&#123;<span class="symbol">y</span>; M2&#125; <span class="comment">//输出4 </span></span><br><span class="line">&#123;<span class="symbol">x</span>; m2&#125; <span class="comment">//输出2.58 </span></span><br><span class="line">&#123;Y; m2&#125; <span class="comment">//输出4.0</span></span><br><span class="line">&#123;<span class="symbol">x</span>; m1M2&#125; <span class="comment">//输出2.58 </span></span><br><span class="line">&#123;<span class="symbol">x</span>; m1M2&#125; <span class="comment">//输出4.0</span></span><br></pre></td></tr></table></figure><h2 id="四、运算算符"><a href="#四、运算算符" class="headerlink" title="四、运算算符"></a>四、运算算符</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">表达式中支持的比较运算符符如下几个：</span><br><span class="line">=或==：判断两个值是否相等。</span><br><span class="line">！=：判断两个值是否不等。</span><br><span class="line">&gt; 或 gt：判断左边值是否大于右边值</span><br><span class="line">&lt;= 或 lte：判断左边值是否小于等于右边值</span><br><span class="line"></span><br><span class="line">算数运算符</span><br><span class="line">加减乘除：+, -, *, /, ％</span><br><span class="line">注意：</span><br><span class="line">（<span class="number">1</span>）运算符两边必须是数字</span><br><span class="line">（<span class="number">2</span>）使用+运算符时，如果一边是数字，一边是字符串，就会自动将数字转换为字符串再连接，</span><br><span class="line">     如：$ &#123;<span class="number">3</span> +“<span class="number">5</span>”&#125;，结果是：<span class="number">35</span></span><br><span class="line">     </span><br><span class="line">逻辑运算符</span><br><span class="line">逻辑与：&amp;&amp; </span><br><span class="line">逻辑或：|| </span><br><span class="line">逻辑非：！</span><br><span class="line">逻辑运算符只能作用于布尔值，否则将产生错误</span><br><span class="line"></span><br><span class="line">运算符优先级如下（由高到低排列）</span><br><span class="line"><span class="number">1</span>、一元运算符：！</span><br><span class="line"><span class="number">2</span>、内建函数：</span><br><span class="line"><span class="number">3</span>、乘除法：*，/，％</span><br><span class="line"><span class="number">4</span>、加减法： - ，+ </span><br><span class="line"><span class="number">5</span>、比较：&gt;，&lt;，&gt; =，&lt;=（lt，lte，gt，gte）</span><br><span class="line"><span class="number">6</span>、相等：==，=， ！= </span><br><span class="line"><span class="number">7</span>、逻辑与：&amp;&amp; </span><br><span class="line"><span class="number">8</span>、逻辑或：|| </span><br><span class="line"><span class="number">9</span>、数字范围：.. 实际上，我们在开发过程中应该使用括号来严格区分，这样的可读性好，出错少</span><br></pre></td></tr></table></figure><h2 id="五、条件判断"><a href="#五、条件判断" class="headerlink" title="五、条件判断"></a>五、条件判断</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> else逻辑判断</span><br><span class="line"><span class="comment"># 示例中conditioinN, N位序号。若其中不为空则执行该条件语句</span></span><br><span class="line">&lt;<span class="comment">#if condition1&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;<span class="comment">#elseif condition2&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;<span class="comment">#elseif condition3&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;<span class="comment">#else&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;/<span class="comment">#if&gt;</span></span><br><span class="line"><span class="comment"># 注意点：$&#123;..&#125;只能用于文本部分,不能用于表达式</span></span><br><span class="line">比如：</span><br><span class="line">&lt;<span class="comment">#if $&#123;isBig&#125;&gt;Wow!&lt;/#if&gt;   # 错误</span></span><br><span class="line">&lt;<span class="comment">#if isBig&gt;Wow!&lt;/#if&gt; #正确</span></span><br><span class="line"></span><br><span class="line">switch</span><br><span class="line"><span class="comment"># 跟java的switch一样，注意break，若无break，则执行后不跳出，而是直接执行下面的语句</span></span><br><span class="line">&lt;<span class="comment">#switch value&gt; </span></span><br><span class="line">&lt;<span class="comment">#case refValue1&gt; </span></span><br><span class="line"><span class="string">....</span></span><br><span class="line">&lt;<span class="comment">#break&gt; </span></span><br><span class="line">&lt;<span class="comment">#case refValue2&gt; </span></span><br><span class="line"><span class="string">....</span></span><br><span class="line">&lt;<span class="comment">#break&gt; </span></span><br><span class="line">&lt;<span class="comment">#case refValueN&gt; </span></span><br><span class="line"><span class="string">....</span></span><br><span class="line">&lt;<span class="comment">#break&gt; </span></span><br><span class="line">&lt;<span class="comment">#default&gt; </span></span><br><span class="line"><span class="string">....</span> </span><br><span class="line">&lt;/<span class="comment">#switch&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、支持转义字符"><a href="#六、支持转义字符" class="headerlink" title="六、支持转义字符"></a>六、支持转义字符</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\"</span> ：双引号(u0022)</span><br><span class="line"><span class="string">\'</span> ：单引号(u0027)</span><br><span class="line"><span class="string">\\</span> ：反斜杠(u005C)</span><br><span class="line"><span class="string">\n</span> ：换行(u000A)</span><br><span class="line"><span class="string">\r</span> ：回车(u000D)</span><br><span class="line"><span class="string">\t</span> ：Tab(u0009)</span><br><span class="line"><span class="string">\b</span> ：退格键(u0008)</span><br><span class="line"><span class="string">\f</span> ：Form feed(u000C)</span><br><span class="line"><span class="string">\l</span> ：&lt;</span><br><span class="line"><span class="string">\g</span> ：&gt;</span><br><span class="line"><span class="string">\a</span> ：&amp;</span><br><span class="line"><span class="string">\&#123;</span> ：&#123;</span><br><span class="line"><span class="string">\xCode</span> ：直接通过<span class="number">4</span>位的<span class="number">16</span>进制数来指定Unicode码,输出该unicode码对应的字符.</span><br><span class="line"></span><br><span class="line">如果某段文本中包含大量的特殊符号,FreeMarker提供了另一种特殊格式:可以在指定字符串内容的引号前增加r标记,在r标记后的文件将会直接输出.看如下代码:</span><br><span class="line">$&#123;r<span class="string">"$&#123;foo&#125;"</span>&#125; <span class="regexp">// 输出 $&#123;foo&#125;</span></span><br><span class="line"><span class="regexp">$&#123;r"C:/foo/bar"&#125; //</span> 输出 C:/foo/bar</span><br></pre></td></tr></table></figure><h2 id="七、include指令"><a href="#七、include指令" class="headerlink" title="七、include指令"></a>七、include指令</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># include指令的作用类似于JSP的包含指令: 用于导入文件,它可以在模版中插入其他的静态文件,或者是freemarker模版如：宏组件</span></span><br><span class="line"><span class="xml"># 注意点：引入同名的变量时就会被后引入的或者新定义的覆盖.这样就不是很好,因为只想让它们在"My Test Library"命名空间中.就需要用 import代替include了</span></span><br><span class="line"><span class="xml">//父页面ftl</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">#include</span> "/<span class="attr">inc</span>/<span class="attr">top.ftl</span>"/&gt;</span>  </span></span><br><span class="line"><span class="xml">        姓名：$</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        性别：$</span><span class="template-variable">&#123;student.studentSex&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        年龄：$</span><span class="template-variable">&#123;student.studentAge&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        生日：$</span><span class="template-variable">&#123;(student.studentBirthday)?string("yyyy-MM-dd")&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        网站地址：$</span><span class="template-variable">&#123;student.studentAddr&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        QQ：$</span><span class="template-variable">&#123;student.studentQQ&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#if</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">12</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个初中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">15</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个高中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">18</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#else</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">#if</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//子页面ftl</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎，进入学生管理系统！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 结果</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎，进入学生管理系统！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">         姓名：$</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        性别：$</span><span class="template-variable">&#123;student.studentSex&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        年龄：$</span><span class="template-variable">&#123;student.studentAge&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        生日：$</span><span class="template-variable">&#123;(student.studentBirthday)?string("yyyy-MM-dd")&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        网站地址：$</span><span class="template-variable">&#123;student.studentAddr&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        QQ：$</span><span class="template-variable">&#123;student.studentQQ&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#if</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">12</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个初中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">15</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个高中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">18</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#else</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">#if</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="八、import指令"><a href="#八、import指令" class="headerlink" title="八、import指令"></a>八、import指令</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/<span class="regexp">/ 类似于jsp里的import：它导入文件，然后就可以在当前文件里使用被导入文件里的宏组件。除了不能像include一样导入静态文件外，其他都一样。为防止出现覆盖问题，把其放入另一个空间中。</span></span><br><span class="line"><span class="regexp"># mylib.ftl</span></span><br><span class="line"><span class="regexp">&lt;#macro copyright date&gt;   </span></span><br><span class="line"><span class="regexp">&lt;p&gt;Copyright (C) $&#123;date&#125; Julia Smith. All rights reserved.   </span></span><br><span class="line"><span class="regexp">&lt;/</span><span class="comment">#macro&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># common.ftl</span></span><br><span class="line">&lt;<span class="comment">#import "/libs/mylib.ftl" as my&gt;</span></span><br><span class="line">&lt;@my.copyright date=<span class="string">"1999-2002"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&lt;p&gt;Copyright (C) <span class="number">1999</span>-<span class="number">2002</span> Julia Smith. All rights reserved.   </span><br><span class="line"></span><br><span class="line">/<span class="regexp">/ 上面的代码将导入/lib</span><span class="regexp">/common.ftl模板文件中的所有变量,交将这些变量放置在一个名为com的Map对象中，"my"在freemarker里被称作namespace，防止同一变量被覆盖</span></span><br></pre></td></tr></table></figure><h2 id="九、macro宏指令"><a href="#九、macro宏指令" class="headerlink" title="九、macro宏指令"></a>九、macro宏指令</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;#-- 定义宏 --&gt;</span><br><span class="line"># <span class="keyword">test</span>是自定义标签名，并且注意自定义标签名会影响同名变量</span><br><span class="line">&lt;#<span class="keyword">macro</span> <span class="keyword">test</span> foo bar=<span class="string">"Bar"</span> baaz=-1&gt; </span><br><span class="line">　　Text: <span class="variable">$&#123;foo&#125;</span>, <span class="variable">$&#123;bar&#125;</span>, <span class="variable">$&#123;baaz&#125;</span></span><br><span class="line">&lt;/#<span class="keyword">macro</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;#-- 使用宏 --&gt;</span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> bar=<span class="string">"b"</span> baaz=5*5/&gt;  <span class="comment">// 输出：Text: a, b, 25</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> bar=<span class="string">"b"</span>/&gt;    　　　　<span class="comment">// 输出：Text: a, b, -1</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> baaz=5*5-2/&gt; 　　　　<span class="comment">// 输出：Text: a, Bar, 23</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span>/&gt;                   <span class="comment">// 输出：Text: a, Bar, -1</span></span><br><span class="line"></span><br><span class="line">&lt;#-- 定义一个循环输出的宏 --&gt;</span><br><span class="line">&lt;#<span class="keyword">macro</span> <span class="keyword">list</span> title items&gt; </span><br><span class="line">　　<span class="variable">$&#123;title&#125;</span></span><br><span class="line">　　&lt;#<span class="keyword">list</span> items <span class="keyword">as</span> x&gt;</span><br><span class="line">　　　　<span class="variable">$&#123;x&#125;</span></span><br><span class="line">　　&lt;/#<span class="keyword">list</span>&gt; </span><br><span class="line">&lt;/#<span class="keyword">macro</span>&gt; </span><br><span class="line"></span><br><span class="line">&lt;#-- 使用宏 --&gt;</span><br><span class="line">&lt;@<span class="keyword">list</span> items=[<span class="string">"mouse"</span>, <span class="string">"elephant"</span>, <span class="string">"python"</span>] title=<span class="string">"Animals"</span>/&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Freemarker学习&quot;&gt;&lt;a href=&quot;#Freemarker学习&quot; class=&quot;headerlink&quot; title=&quot;Freemarker学习&quot;&gt;&lt;/a&gt;Freemarker学习&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意点：
      
    
    </summary>
    
    
      <category term="模板引擎" scheme="https://blog.deschen.cn/categories/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="Freemarker" scheme="https://blog.deschen.cn/tags/Freemarker/"/>
    
  </entry>
  
  <entry>
    <title>ELK部署——CentOS7.X</title>
    <link href="https://blog.deschen.cn/2021/02/03/ELK%E9%83%A8%E7%BD%B2%E2%80%94%E2%80%94CentOS7.X/"/>
    <id>https://blog.deschen.cn/2021/02/03/ELK%E9%83%A8%E7%BD%B2%E2%80%94%E2%80%94CentOS7.X/</id>
    <published>2021-02-03T10:42:58.000Z</published>
    <updated>2021-03-01T10:24:53.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK部署——CentOS7-X"><a href="#ELK部署——CentOS7-X" class="headerlink" title="ELK部署——CentOS7.X"></a>ELK部署——CentOS7.X</h1><h2 id="一、创建用户角色"><a href="#一、创建用户角色" class="headerlink" title="一、创建用户角色"></a>一、创建用户角色</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建用户组：groupadd <span class="built_in">es</span></span><br><span class="line">创建用户加入用户组：useradd <span class="built_in">es</span> -g <span class="built_in">es</span></span><br></pre></td></tr></table></figure><h2 id="二、下载和安装"><a href="#二、下载和安装" class="headerlink" title="二、下载和安装"></a>二、下载和安装</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">下载：</span><br><span class="line">    wget https:<span class="comment">//artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.3.tar.gz</span></span><br><span class="line">    wget https:<span class="comment">//artifacts.elastic.co/downloads/logstash/logstash-6.2.3.tar.gz</span></span><br><span class="line">    wget https:<span class="comment">//artifacts.elastic.co/downloads/kibana/kibana-6.2.3-linux-x86_64.tar.gz</span></span><br><span class="line">解压：</span><br><span class="line">tar -zxvf elasticsearch<span class="number">-6.2</span><span class="number">.3</span>.tar.gz -C /usr/local</span><br><span class="line">tar -zxvf logstash<span class="number">-6.2</span><span class="number">.3</span>.tar.gz -C /usr/local</span><br><span class="line">tar -zxvf kibana<span class="number">-6.2</span><span class="number">.3</span>-linux-x86_64.tar.gz -C /usr/local</span><br><span class="line">给es授权</span><br><span class="line">chown -R es.es /usr/local/elasticsearch<span class="number">-6.2</span><span class="number">.3</span></span><br><span class="line">chown -R es.es /usr/local/logstash<span class="number">-6.2</span><span class="number">.3</span></span><br><span class="line">chown -R es.es /usr/local/kibana<span class="number">-6.2</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><h2 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch配置：</span><br><span class="line">允许远程配置：</span><br><span class="line"><span class="keyword">cd</span> /usr/local/elasticsearch-<span class="number">6.2</span>.<span class="number">3</span></span><br><span class="line">elasticsearch-plugin install http<span class="variable">s:</span>//github.<span class="keyword">com</span>/medcl/elasticsearch-analysis-ik/releases/download/v7.<span class="number">6.2</span>/elasticsearch-analysis-ik-<span class="number">6.2</span>.<span class="number">3</span>.zip</span><br><span class="line"><span class="keyword">vi</span> config/elasticsearch.yml </span><br><span class="line">network.hos<span class="variable">t:</span> <span class="number">0.0</span>.<span class="number">0.0</span>  #改为<span class="number">0.0</span>.<span class="number">0.0</span>对外开放，如对特定ip开放则改为指定ip</span><br><span class="line">http.por<span class="variable">t:</span> <span class="number">9200</span>      #可更改端口不为<span class="number">9200</span></span><br><span class="line">修改配置，否则报异常：<span class="built_in">max</span> <span class="keyword">file</span> descriptors [<span class="number">4096</span>] <span class="keyword">for</span> elasticsearch process <span class="keyword">is</span> too low, increase <span class="keyword">to</span> at least [<span class="number">65535</span>]...</span><br><span class="line"><span class="keyword">vi</span> /etc/security/limits.<span class="keyword">conf</span>  # 在文末添加下面四个配置</span><br><span class="line">* soft nofile <span class="number">65536</span></span><br><span class="line">* hard nofile <span class="number">131072</span></span><br><span class="line">* soft nproc <span class="number">2048</span></span><br><span class="line">* hard nproc <span class="number">4096</span></span><br><span class="line">         <span class="keyword">vi</span> /etc/sysctl.<span class="keyword">conf</span></span><br><span class="line">         <span class="keyword">vm</span>.max_map_count=<span class="number">655360</span></span><br><span class="line">        </span><br><span class="line"> logstash配置：</span><br><span class="line"> <span class="keyword">cd</span> /usr/local/logstash-<span class="number">6.2</span>.<span class="number">3</span></span><br><span class="line"> logstash-plugin install logstash-codec-json_lines</span><br><span class="line"> <span class="keyword">vi</span> default.<span class="keyword">conf</span></span><br><span class="line"> # 监听<span class="number">5044</span>端口作为输入</span><br><span class="line">        <span class="built_in">input</span> &#123;</span><br><span class="line">            beats &#123;</span><br><span class="line">                port =&gt; <span class="string">"5044"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 数据过滤</span><br><span class="line">        <span class="built_in">filter</span> &#123;</span><br><span class="line">            grok &#123;</span><br><span class="line">                <span class="keyword">match</span> =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;COMBINEDAPACHELOG&#125;"</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            geoip &#123;</span><br><span class="line">                <span class="keyword">source</span> =&gt; <span class="string">"clientip"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 输出配置为本机的<span class="number">9200</span>端口，这是ElasticSerach服务的监听端口</span><br><span class="line">        output &#123;</span><br><span class="line">            elasticsearch &#123;</span><br><span class="line">                hosts =&gt; [<span class="string">"127.0.0.1:9200"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">Kibana远程配置：</span><br><span class="line"><span class="keyword">cd</span> /usr/local/kibana-<span class="number">6.2</span>.<span class="number">3</span>-linux-x86_64</span><br><span class="line"><span class="keyword">vi</span> config/kibana.yml</span><br><span class="line">server.hos<span class="variable">t:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line">elasticsearch.requestTimeou<span class="variable">t:</span> <span class="number">90000</span>  # 默认<span class="number">3000</span>会导致es连接失败</span><br></pre></td></tr></table></figure><h2 id="四、启动"><a href="#四、启动" class="headerlink" title="四、启动"></a>四、启动</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch</span><br><span class="line">切换账号：<span class="keyword">su</span> es</span><br><span class="line">启动：</span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/elasticsearch-6.2.3</span><br><span class="line">bin/elasticsearch -<span class="keyword">d</span>  # -<span class="keyword">d</span>后台启动</span><br><span class="line">     查看日志：tail -f logs/elasticsearch.<span class="keyword">log</span></span><br><span class="line">     测试：curl 127.0.0.1:9200</span><br><span class="line">     响应成功：</span><br><span class="line">     &#123;</span><br><span class="line">              <span class="string">"name"</span> : <span class="string">"mNuYQ8h"</span>,</span><br><span class="line">              <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">              <span class="string">"cluster_uuid"</span> : <span class="string">"1JsAZO0sTnuBYCREW97RDw"</span>,</span><br><span class="line">              <span class="string">"version"</span> : &#123;</span><br><span class="line">                <span class="string">"number"</span> : <span class="string">"6.2.3"</span>,</span><br><span class="line">                <span class="string">"build_hash"</span> : <span class="string">"c59ff00"</span>,</span><br><span class="line">                <span class="string">"build_date"</span> : <span class="string">"2018-03-13T10:06:29.741383Z"</span>,</span><br><span class="line">                <span class="string">"build_snapshot"</span> : false,</span><br><span class="line">                <span class="string">"lucene_version"</span> : <span class="string">"7.2.1"</span>,</span><br><span class="line">                <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"5.6.0"</span>,</span><br><span class="line">                <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"5.0.0"</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">            &#125;</span><br><span class="line">logstash</span><br><span class="line">启动：</span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/logstash-6.2.3</span><br><span class="line">bin/logstash -f default.<span class="keyword">conf</span> &amp;</span><br><span class="line">    查看日志：tail -f logs/logstash-plain.<span class="keyword">log</span></span><br><span class="line">Kibana</span><br><span class="line">切换账号：<span class="keyword">su</span> es</span><br><span class="line">启动：</span><br><span class="line"><span class="keyword">su</span></span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/kibana-6.2.3-linux-x86_64</span><br><span class="line">nohup bin/kibana &amp;</span><br><span class="line">查看日志：tail -f nohup.<span class="keyword">out</span></span><br></pre></td></tr></table></figure><h2 id="五、自启动"><a href="#五、自启动" class="headerlink" title="五、自启动"></a>五、自启动</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">以ES自启动为例</span><br><span class="line">cd /etc/init.d</span><br><span class="line">vim es-server</span><br><span class="line"></span><br><span class="line"><span class="comment">## 编写启动脚本</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#chkconfig: 345 63 37</span></span><br><span class="line"><span class="comment">#description: elasticsearch</span></span><br><span class="line"><span class="comment">#processname: elasticsearch-6.2.3</span></span><br><span class="line"><span class="comment">## 这个目录是你Es所在文件夹的目录</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ES_HOME</span>=/usr/local/elasticsearch-6.2.3</span><br><span class="line">case <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        start)</span><br><span class="line">        ## es 是启动es的账户，如果你的不是这个记得调整</span><br><span class="line">                su es&lt;&lt;!</span><br><span class="line">                cd <span class="variable">$ES_HOME</span></span><br><span class="line">                ./bin/elasticsearch -d -p pid</span><br><span class="line">                exit</span><br><span class="line">!</span><br><span class="line">                echo <span class="string">"elasticsearch is started"</span></span><br><span class="line">                ;;</span><br><span class="line">        stop)</span><br><span class="line">                <span class="attribute">pid</span>=`cat <span class="variable">$ES_HOME</span>/pid`</span><br><span class="line">                kill -9 <span class="variable">$pid</span></span><br><span class="line">                echo <span class="string">"elasticsearch is stopped"</span></span><br><span class="line">                ;;</span><br><span class="line">        restart)</span><br><span class="line">                <span class="attribute">pid</span>=`cat <span class="variable">$ES_HOME</span>/pid`</span><br><span class="line">                kill -9 <span class="variable">$pid</span></span><br><span class="line">                echo <span class="string">"elasticsearch is stopped"</span></span><br><span class="line">                sleep 1</span><br><span class="line">                su elk&lt;&lt;!     【es 这个是启动es的账户，如果你的不是这个记得调整】</span><br><span class="line">                cd <span class="variable">$ES_HOME</span></span><br><span class="line">                ./bin/elasticsearch -d -p pid</span><br><span class="line">                exit</span><br><span class="line">!</span><br><span class="line">                echo <span class="string">"elasticsearch is started"</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo <span class="string">"start|stop|restart"</span></span><br><span class="line">        ;; </span><br><span class="line">esac</span><br><span class="line">exit 0</span><br><span class="line"></span><br><span class="line"><span class="comment">## 退出</span></span><br><span class="line">:wq!</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改文件权限</span></span><br><span class="line">chmod 777 es-server</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加系统服务，开机自启</span></span><br><span class="line">chkconfig --<span class="builtin-name">add</span> es-server</span><br><span class="line"></span><br><span class="line"><span class="comment">##  启动，关闭、重启服务</span></span><br><span class="line">service es-server start</span><br><span class="line">service es-server stop</span><br><span class="line">service es-server restart</span><br></pre></td></tr></table></figure><h2 id="六、切换ELK-7-x异常处理"><a href="#六、切换ELK-7-x异常处理" class="headerlink" title="六、切换ELK 7.x异常处理"></a>六、切换ELK 7.x异常处理</h2><p>ES问题：</p><ol><li><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210220152128686.png" alt="image-20210220152128686"></p></li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">切换到es <span class="number">7</span>.x 目录：cd /usr/local/elasticsearch-<span class="number">7.6</span>.<span class="number">2</span></span><br><span class="line">修改配置文件：vi config/elasticsearch.yml</span><br><span class="line"><span class="keyword">node</span>.name:<span class="title"> node-1</span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"node-1"</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210301143942570.png" alt="image-20210301143942570"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">切换到es <span class="number">7.</span>x 目录：cd /usr/local/elasticsearch<span class="number">-7.6</span><span class="number">.2</span></span><br><span class="line">配置文件添加：config/elasticsearch.yml</span><br><span class="line">xpack.ml.enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210301144616286.png" alt="image-20210301144616286"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">切换到root用户修改配置sysctl.<span class="keyword">conf</span></span><br><span class="line"><span class="keyword">vi</span> /etc/sysctl.<span class="keyword">conf</span> </span><br><span class="line"><span class="keyword">vm</span>.max_map_count=<span class="number">655360</span></span><br><span class="line">sysctl -<span class="keyword">p</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ELK部署——CentOS7-X&quot;&gt;&lt;a href=&quot;#ELK部署——CentOS7-X&quot; class=&quot;headerlink&quot; title=&quot;ELK部署——CentOS7.X&quot;&gt;&lt;/a&gt;ELK部署——CentOS7.X&lt;/h1&gt;&lt;h2 id=&quot;一、创建用户角色&quot;
      
    
    </summary>
    
    
      <category term="ELK" scheme="https://blog.deschen.cn/categories/ELK/"/>
    
    
      <category term="ELK" scheme="https://blog.deschen.cn/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>VMware——CentOS7.X部署</title>
    <link href="https://blog.deschen.cn/2021/01/28/VMware%E2%80%94%E2%80%94CentOS7-X%E9%83%A8%E7%BD%B2/"/>
    <id>https://blog.deschen.cn/2021/01/28/VMware%E2%80%94%E2%80%94CentOS7-X%E9%83%A8%E7%BD%B2/</id>
    <published>2021-01-28T02:26:20.000Z</published>
    <updated>2021-01-29T01:37:27.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VMware——CentOS7-x部署"><a href="#VMware——CentOS7-x部署" class="headerlink" title="VMware——CentOS7.x部署"></a>VMware——CentOS7.x部署</h1><p>[toc]</p><h2 id="一、新建虚拟器"><a href="#一、新建虚拟器" class="headerlink" title="一、新建虚拟器"></a>一、新建虚拟器</h2><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210129093554506.png" alt="image-20210129093554506"></p><ul><li>确定好版本，要与自己软件一致</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210129093623268.png" alt="image-20210129093623268"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221170614834.png" alt="image-20201221170614834"></p><ul><li>要选择<strong>Linux</strong>系统，版本要跟自己下载的<strong>centos7.x</strong>一致</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221170652989.png" alt="image-20201221170652989"></p><ul><li><p>建议存放位置放在自定义的文件夹，方便管理</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221171956274.png" alt="image-20201221171956274"></p></li><li><p>设置处理器的和数，<strong>定情况而定</strong></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172108411.png" alt="image-20201221172108411"></p></li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172132879.png" alt="image-20201221172132879"></p><ul><li><p>接下来一直点击<strong>下一步</strong>，直到出现<strong>完成</strong>的这个界面，<strong>自定义硬件</strong></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172350769.png" alt="image-20201221172350769"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172534237.png" alt="image-20201221172534237"></p></li></ul><h2 id="二、安装centos-7-X"><a href="#二、安装centos-7-X" class="headerlink" title="二、安装centos 7.X"></a>二、安装centos 7.X</h2><blockquote><p>当看不见鼠标时，说明你点击了虚拟机，这时可以使用<strong>ctrl+alt</strong>跳出虚拟机</p></blockquote><ul><li><p>选择红框选项，按下回车键</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172836938.png" alt="image-20201221172836938"></p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163036413.png" alt="image-20201221163036413" style="zoom: 67%;" /></li><li><p>设置时间，建议时区选择上海</p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163656843.png" alt="image-20201221163656843" style="zoom:80%;" /><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163629221.png" alt="image-20201221163629221" style="zoom:80%;" /></li><li><p>显示界面（这里我使用原始界面）</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163927355.png" alt="image-20201221163927355"></p><p>PS：想要图形界面的话，可以选择方框选项</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164005808.png" alt="image-20201221164005808"></p></li><li><p>磁盘划分</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164114006.png" alt="image-20201221164114006"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164157112.png" alt="image-20201221164157112"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164758435.png" alt="image-20201221164758435"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221165029626.png" alt="image-20201221165029626"></p></li></ul><h2 id="三、连接虚拟机"><a href="#三、连接虚拟机" class="headerlink" title="三、连接虚拟机"></a>三、连接虚拟机</h2><ul><li><p>启动虚拟机，输入<strong>ip addr</strong>，获取虚拟机的ip</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175212858.png" alt="image-20201221175212858"></p></li><li><p>本地使用<strong>CMD</strong>输入<strong>ping 192.168.163.132</strong>查看本地是否与虚拟机联通</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175344603.png" alt="image-20201221175344603"></p></li><li><p>虚拟机使用<strong>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></strong> 查看虚拟机是否能联网</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175507224.png" alt="image-20201221175507224"></p></li><li><p>因为VM操作麻烦，建议使用xshell或其他软件连接虚拟机</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175924060.png" alt="image-20201221175924060"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175800476.png" alt="image-20201221175800476"></p><p>PS：如果出现ping不通的情况，解决方法</p><ol><li><p>查看是否是网络适配器红框部分禁用了，如果是，就右键启动</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221180143248.png" alt="image-20201221180143248"></p></li><li><p>服务列表关于VM部分是否没启用</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221180327045.png" alt="image-20201221180327045"></p></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VMware——CentOS7-x部署&quot;&gt;&lt;a href=&quot;#VMware——CentOS7-x部署&quot; class=&quot;headerlink&quot; title=&quot;VMware——CentOS7.x部署&quot;&gt;&lt;/a&gt;VMware——CentOS7.x部署&lt;/h1&gt;&lt;p&gt;[t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>IDEA Debug调试</title>
    <link href="https://blog.deschen.cn/2020/08/05/IDEA%20Debug%E8%B0%83%E8%AF%95/"/>
    <id>https://blog.deschen.cn/2020/08/05/IDEA%20Debug%E8%B0%83%E8%AF%95/</id>
    <published>2020-08-05T08:02:06.000Z</published>
    <updated>2021-03-21T15:59:06.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA-Debug调试"><a href="#IDEA-Debug调试" class="headerlink" title="IDEA Debug调试"></a>IDEA Debug调试</h1><p>[toc]</p><h2 id="一、为什么要调试"><a href="#一、为什么要调试" class="headerlink" title="一、为什么要调试"></a>一、为什么要调试</h2><ul><li>调试和日志是排查问题的两个主要手段。</li><li>如果没有调试功能，很多问题的排查更多地将依赖日志。但是日志我无法直观地了解代码运行的状态，无法实时地观察待调试地对象地各种属性值等</li><li>现在调试工具非常强大，很多调试器支持 “回退”，自定义表达式，远程调试等功能，对我们的学习和排查问题有很大帮助</li></ul><h2 id="二、调试的基本操作"><a href="#二、调试的基本操作" class="headerlink" title="二、调试的基本操作"></a>二、调试的基本操作</h2><ol><li>设置断点</li><li>调试模式运行</li><li>单步调试</li></ol><ul><li><p>以IDEA为例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321215809557.png" alt="image-20210321215809557"></p><ul><li>常见的调试功能按钮如上图所示（标有1~6的红框）<ul><li>1 表示 Step Over 即跳过，执行到下一行；</li><li>2 表示 Step Into 即步入，可以进入自定义的函数；</li><li>3 表示Force Step Into 即强制进入，可以进入到任何方法（包括第三方库或JDK源码）</li><li>4 表示 Step Out 即跳出，如果当前调试的方法没问题，可以使用此功能跳出当前函数；</li><li>5 表示 Drop frame 即移除帧，相当于回退到上一级；（以 “ JVM每执行一个方法会出现栈帧 ”理解）</li><li>6 表示 Run to Cursor 即执行到鼠标所在的代码行数。</li></ul></li><li>Variables（变量区）：用于观察 “当前” 的数据变化状况</li><li>Frames（栈帧）：用于记录执行的方法</li></ul></li></ul><h2 id="三、调试的高级技巧"><a href="#三、调试的高级技巧" class="headerlink" title="三、调试的高级技巧"></a>三、调试的高级技巧</h2><ol><li><p>多线程断点</p><ul><li><p>场景：直观调试多线程执行情况</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321222516302.png" alt="image-20210321222516302"></p></li><li><p>操作步骤</p><ul><li>设置断点时，在断点上右键可以选择断点的模式，选择 “Thread” 模式，可以开启多线程调试。</li><li>可以将一个线程断下来，通过 “Frames” 选项卡切换到不同线程线程（红框部分表示线程），控制不同线程的运<br>行。</li></ul></li></ul></li><li><p>条件断点</p><ul><li><p>场景：在测试环境中，如果设置普通断点，这样会对所有的请求暂停，影响其他功能调试</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321223027976.png" alt="image-20210321223027976"></p></li><li><p>操作步骤</p><ul><li>对断点设置条件，只有满足设置的条件才会生效。（这里使当 i 等于 4 时打上断点）</li></ul></li><li><p>PS：如果我们想对某个成员变量修改的地方打断点，但是修改的地方特别多怎么办？</p><ul><li><p>可以对属性设置条件</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321224048609.png" alt="image-20210321224048609"></p></li></ul></li></ul></li><li><p>“后悔药”，即回退方法</p><ul><li><p>场景：当我们有Resume Program或者Step Over跳到方法里面时，我们想要看到调用方法前的情况。</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321225511239.png" alt="image-20210321225511239"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321225517980.png" alt="image-20210321225517980"></p></li><li><p>操作步骤</p><ul><li>按<strong>红框的按键</strong>表示 Drop frame 即移除帧，相当于回退到上一级，这给我们提供了 “后悔药”。</li></ul></li></ul></li><li><p>“偷天换日”，即修改参数</p><ul><li><p>场景：我们实际调试代码时，会有这样的场景，调用的参数传错了。修改参数重新运行？</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321230027010.png" alt="image-20210321230027010"></p></li><li><p>操作步骤</p><ul><li>在 variables 选项卡中选中变量（这里时 count ），然后右键，选择 “set value” 菜单，即可对变<br>量的值进行修改。</li></ul></li></ul></li><li><p>表达式</p><ul><li><p>场景：设置或获取额外的信息，这对排查问题有很大帮助。</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321232011161.png" alt="image-20210321232011161"></p><ul><li>操作步骤有两种<ul><li>右键 <code>Evaluate Expression</code>，输入表达式获取额外信息</li></ul></li></ul></li></ul></li><li><p>watch</p><ul><li><p>场景：查看某个对象的某个属性，总是使用表达式很不方便，是否可以将表达式计算的结果总是显示在变量区域呢？</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321232017547.png" alt="image-20210321232017547"></p></li><li><p>操作步骤</p><ul><li>变量区<code>Variables</code>点击 <code>+</code> ，输入想要观察的表达式</li></ul></li></ul></li><li><p>看内存对象</p><ul><li><p>场景：想通过代码调试来研究内存对象</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321233053826.png" alt="image-20210321233053826"></p></li><li><p>操作步骤</p><ul><li>在 Memory 选项栏下，搜索 Integer 就可以看到该类对象的数量，双击就可以通过表达式来过滤，非常强大。</li></ul></li></ul></li><li><p>异常断点</p><ul><li><p>在一个循环中有一个数据报错，想在报错的时候断点，无法使用条件断点，而且循环次数很多，一次一次断掉放过非常麻烦。</p></li><li><p>测试用例</p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321234105069.png" alt="image-20210321234105069" style="zoom:150%;" /><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321234155317.png" alt="image-20210321234155317"></p></li><li><p>操作步骤</p><ul><li>第一步，在研究的地方断点（出异常的条件）</li><li>第二步：点击左下角的红色断点标记，打开断点设置界面</li><li>第三步：点击左上角的 + 号，添加 <code>Java Excepiton Breakpoints</code> 将异常（<code>IllegalArgumentException</code>)添加进去；</li><li>第四步：切换到我们的断点处，在断点处（如图所示<code>OrderParamTest.java:80</code>）的 处，在 “Disable untilbreakpoint is hit” 处选择该异常。</li><li>第五步：再执行断点调试，即可捕捉到发生异常的那次调用。通过调用栈查看整个调用过程，还可以通过移除 frame 来回退到上一层</li></ul></li></ul></li><li><p>远程调试</p><ul><li><p>场景：现在大多数公司的测试环境都会配置支持远程调试。</p></li><li><p>要求：远程调试要求本地代码和远程服务器的代码一致，如果使用 git ，切换到同一个分支的同一次提<br>交即可。</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321235336115.png" alt="image-20210321235336115"></p></li><li><p>操作步骤</p><ul><li>点击Edit Configurations</li><li>点击左上角 <code>+</code>，选择<code>Remote JVM Debug</code>，设置远程 host 及端口 port </li></ul></li></ul></li><li><p>其他</p><ul><li><p>例如主动抛出异常</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321235716527.png" alt="image-20210321235716527"></p><ul><li>操作步骤<ul><li>在 <code>Frames</code> 选择栈帧，右键选择 <code>Throw Exception</code> 抛出异常</li></ul></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IDEA-Debug调试&quot;&gt;&lt;a href=&quot;#IDEA-Debug调试&quot; class=&quot;headerlink&quot; title=&quot;IDEA Debug调试&quot;&gt;&lt;/a&gt;IDEA Debug调试&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、为什么要调试&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="编程工具" scheme="https://blog.deschen.cn/categories/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>面试</title>
    <link href="https://blog.deschen.cn/2020/06/10/%E9%9D%A2%E8%AF%95/"/>
    <id>https://blog.deschen.cn/2020/06/10/%E9%9D%A2%E8%AF%95/</id>
    <published>2020-06-10T13:48:47.000Z</published>
    <updated>2022-04-16T09:31:49.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ul><li><p>mysql与redis如何数据同步</p><ul><li>并发不高的情况下，读操作优先读取redis，不存在的话就去访问MySQL，并把读到的数据写回Redis中；写操作的话，直接写MySQL，成功后再写入Redis</li><li><a href="https://blog.csdn.net/ssspk_/article/details/90924226" target="_blank" rel="noopener">https://blog.csdn.net/ssspk_/article/details/90924226</a></li></ul></li><li><p>rabbitmq消息持久化，一致性</p><ul><li>RabbitMQ是一款消息中间件，解耦、异步</li><li>RabbitMQ工作模式<ul><li>简单模式：一个生产者、一个消费者</li><li>work工作模式：一个生产者，多个消费者</li><li>发布订阅：消费者监听队列，生产者发送消息通过交换机发送绑定其的队列</li><li>routing路由模式：生产者将消息发送给交换机按照路由判断,发送到匹配队列消费</li><li>topic 主题模式：跟路由模式相同，不过key可以模糊匹配对应队列<ul><li>星号代表多个单词,井号代表一个单词</li></ul></li></ul></li><li>RabbitMQ消息的可靠传输<ul><li>发送方确认模式：信道设置成 confirm 模式，发布的消息都会被指派一个唯一的 ID，发送到队列后，信道会发送确认给生产者，如果rabbitmq异常，会发送nack给生产者    </li><li>接收方确认机制：消费者接收每一条消息后都必须进行确认，只有消费者确认了消息，RabbitMQ 才能安全地把消息从队列中删除。</li></ul></li></ul></li><li><p>多线程</p><ul><li><p>什么是线程？线程是操作系统进行运算调度的最小单位。它被包含进程之中，是进程中的实际运作单位</p></li><li><p>什么是进程？进程是系统进行资源分配的独立实体，且每个进程拥有独立地址空间</p></li><li><p>什么是线程安全，线程不安全？</p><ul><li>通俗来讲，有加锁的是线程安全，没加锁的是线程不安全</li><li>解释：比如一个数据同时被多个线程访问写操作时，如果没有加锁，那么数据可能会出现进行多次修改，而导致数据脏读，这是线程不安全。而如果有加锁，线程访问时会进行保护，其他线程就无法写操作直到线程操作完才行，就不会出现脏读问题</li></ul></li><li><p>JVM内存结果为什么程序计数器、虚拟机栈、本地方法栈为线程私有，堆、方法区线程共享？</p><ul><li>程序计数器：字节码解释器通过改变程序计数器来依次读取指令，从而实现代码流程控制。如：顺序执行、选择、循环、异常处理。而在多线程情况下，程序计数器用于记录当前线程指令执行的位置，从而当线程被切换回来的时候能够知道线程上次运行到哪里。所以线程必须私有。</li><li>虚拟机栈和本地方法栈：方法执行时会创建一个栈帧保存局部变量表、操作数栈、常量池引用信息。从方法调用到执行完成过程，对应一个栈帧从入栈到出栈的过程。所以为了保证局部变量等信息不被其他线程访问到，虚拟机栈和本地方法栈必须线程私有</li><li>堆：存放所有的对象。所以线程共享</li><li>方法区：存放已加载的类信息、常量、静态变量。所以线程共享</li></ul></li><li><p>什么是上下文切换?</p><ul><li>CPU分配时间给每个线程，时间往往很短（就几十毫秒），所以CPU很快切换线程执行操作，而在我们看来就像多个线程同时执行</li><li>上下文切换过程中，CPU会保存上个线程的状态，以便于下次切换后能够加载操作。所以从保存到加载过程就是一次上下文切换。但是上下文切换会影响多线程执行效率</li><li>避免线程上下文切换：<ul><li>无锁编程，采用一些方式避免使用锁</li><li>CAS算法</li><li>避免创建不必要的线程</li></ul></li></ul></li><li><p>并发与并行？</p><ul><li>并发：多个任务交替执行</li><li>并行：多个任务同时进行</li><li>注意点：如果时单核，那么无法并行执行，只能通过CPU时间片切换时间交替执行，从而并发执行任务。要并行执行要拥有多核CPU</li></ul></li><li><p>线程的生命周期和状态?</p><ul><li><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态</p><ul><li>初始化（NEW）：线程被构建，但是没有调用start()方法</li><li>运行状态（RUNNABLE）：调用start()方法进入的状态。Java线程将操作系统中<strong>就绪</strong>和<strong>运行</strong>统称为<strong>运行中</strong></li><li>阻塞状态（BLOCKED）：表示线程阻塞与锁有关。例如进入同步代码块等待锁</li><li>等待状态（WAITING）：当前线程需要等待其他线程做出一些特定的动作（通知或中断）</li><li>超时等待状态（TIME_WAITING）：不同于等待状态，它可以在指定时间自动返回</li><li>终止状态（TERMINATED）：表示当前线程执行完毕</li></ul></li><li><p>Java线程执行切换过程</p><ul><li>线程创建之后它将处于 <strong>初始状态</strong>(NEW)，调用 <code>start()</code> 方法后开始运行，线程这时候处于 <strong>可运行状态</strong>(READY)。</li><li>可运行状态的线程获得了 <strong>CPU 时间片</strong>后就处于 <strong>运行状态</strong>(RUNNING)。</li><li>当线程执行 <code>wait()</code>方法之后，线程进入 <strong>等待状态</strong>(WAITING)，进入等待状态的线程需要依靠其他线程的通知才能够返回到<strong>运行状态【notify()】</strong>。</li><li><strong>超时等待(TIME_WAITING)</strong>相当于在等待状态的基础上增加了<strong>超时限制</strong>，【<code>sleep（long millis）/``wait（long millis）】，</code>当超时时间到达后 Java 线程将会返回到<strong>运行状态</strong>。</li><li>当线程调用<strong>同步方法</strong>时，在没有获取到锁的情况下，线程将会进入到<strong>阻塞状态</strong>(BLOCKED)。</li><li>线程在执行 Runnable 的<code>run()</code>方法之后将会进入到 <strong>终止状态</strong>(TERMINATED)。</li></ul></li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210309225407830.png" alt="image-20210309225407830"></p></li><li><p>sleep() 方法和 wait() 方法区别和共同点?</p><ul><li>相同点：两者都可以暂停线程的执行，都会让线程进入等待状态</li><li>不同点：<ul><li>sleep()方法没有释放锁，而 wait()方法释放了锁。</li><li>sleep()方法属于<strong>Thread类的静态方法</strong>，作用于<strong>当前线程</strong>；而wait()方法是<strong>Object类的实例方法</strong>，作用于<strong>对象本身</strong>。</li><li>执行sleep()方法后，可以通过<strong>超时</strong>或者调用<strong>interrupt()</strong>方法唤醒休眠中的线程；执行wait()方法后，通过调用<strong>notify()</strong>或<strong>notifyAll()</strong>方法唤醒等待线程。</li></ul></li></ul></li><li><p>什么是线程死锁?如何避免死锁?</p><ul><li>多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。假如线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。</li><li>避免死锁的几个常见方法：<ul><li>避免一个线程同时获取多个锁</li><li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li><li>尝试使用定时锁，使用 lock.tryLock(timeout) 来代替使用内部锁机制。</li><li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li></ul></li></ul></li><li><p>为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？</p><ul><li>调用start()执行的过程：new 一个 Thread，线程进入初始状态；调用 start()方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了    </li><li>直接执行run()方法，类似于在main线程下普通方法执行，并没有某个线程执行它，不属于多线程。</li></ul></li><li><p>多线程带来的问题及解决</p><ul><li>问题：<ul><li>线程安全问题：在某一线程从开始访问到结束访问<strong>某一数据</strong>期间，该数据被其他的线程所修改，那么对于当前线程而言，该线程就发生了线程安全问题，表现形式为<strong>数据的缺失，数据不一致</strong>等。<ul><li>存在条件<ul><li>多线程环境下，即存在包括自己在内存在有多个线程。</li><li>多线程环境下存在共享资源，且多线程操作该共享资源。</li><li>多个线程必须对该共享资源有非原子性操作。</li></ul></li><li>解决思路<ul><li>尽量不使用共享变量，将不必要的共享变量变成局部变量来使用</li><li>使用synchronized关键字同步代码块，或者使用jdk包中提供的Lock为操作进行加锁</li><li>使用ThreadLocal为每一个线程建立一个变量的副本，各个线程间独立操作，互不影响。</li></ul></li></ul></li><li>性能问题：线程的生命周期开销是非常大的，<strong>一个线程的创建到销毁都会占用大量的内存</strong>。同时如果不合理的创建了多个线程，cup的处理器数量小于了线程数量，那么将会有很多的线程被闲置，闲置的线程将会占用大量的内存，为垃圾回收带来很大压力，同时cup在分配线程时还会消耗其性能。<ul><li>解决思路：<strong>利用线程池</strong>，模拟一个池，预先创建有限合理个数的线程放入池中，当需要执行任务时从池中取出空闲的先去执行任务，执行完成后将线程归还到池中，这样就<strong>减少了线程的频繁创建和销毁，节省内存开销</strong>和减小了垃圾回收的压力。线程池还提供了拒绝策略，当任务数量到达某一临界区时，线程池将拒绝任务的进入，保持现有任务的顺利执行，减少池的压力。</li></ul></li><li>活跃性问题<ul><li><strong>死锁</strong>，假如线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。多个线程环形占用资源也是一样的会产生死锁问题。<ul><li>解决思路：以使用<strong>无锁函数</strong>（cas）或者使用<strong>重入锁</strong>（ReentrantLock），通过重入锁使线程中断或限时等待可以有效的规避死锁问题。</li></ul></li><li><strong>饥饿</strong>，<strong>指某一线程或多个线程因为某些原因一直获取不到资源，导致程序一直无法执行</strong>。如某一线程优先级太低导致一直分配不到资源，或者是某一线程一直占着某种资源不放，导致该线程无法执行等。<ul><li>解决思路：饥饿现象还是有可能在一段时间之后恢复执行的。<strong>可以设置合适的线程优先级来尽量避免饥饿的产生</strong>。</li></ul></li></ul></li></ul></li></ul></li><li><p>synchronized 关键字</p><ul><li>synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</li><li>synchronized关键字最主要的三种使用方式：<strong>修饰实例方法:、修饰静态方法、修饰代码块。</strong><ul><li>对于<strong>普通</strong>同步方法，锁是当前实例对象。</li><li>对于<strong>静态</strong>同步方法，锁是当前类的Class对象。</li><li>对于同步<strong>代码块</strong>，锁是synchronized括号里配置的对象。</li></ul></li><li>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。</li><li>synchronized在JVM里是怎么实现的？<ul><li>synchronized 同步语句块的实现使用的是 <strong>monitorenter 和 monitorexit</strong> 指令，其中 <strong>monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置</strong>。 当执行 monitorenter 指令时，线程试图获取锁也就是获取 monitor的持有权。当计数器为0则可以成功获取，获取后将锁计数器设为1也就是加1。相应的在执行 monitorexit 指令后，将锁计数器设为0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。(monitor对象存在于每个Java对象的对象头中，synchronized 锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因) </li></ul></li></ul></li><li><p>synchronized和 Lock 的区别？</p><ul><li><strong>Lock是一个接口，而synchronized是Java中的关键字</strong>，synchronized是内置的语言实现</li><li>synchronized在发生异常时，会<strong>自动</strong>释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果<strong>没有主动通过unLock()</strong>去释放锁，则很可能造成<strong>死锁</strong>现象，因此使用Lock时需要在<strong>finally</strong>块中释放锁；</li><li>Lock可以让等待锁的线程<strong>响应中断</strong>，而synchronized却不行，使用synchronized时，等待的线程会<strong>一直等待下去</strong>，不能够响应中断</li><li>通过Lock可以知道<strong>有没有成功获取锁</strong>（tryLock()方法：如果获取锁成功，则返回true），而synchronized却无法办到。</li><li>Lock可以提高多个线程进行读操作的效率。在性能上来说，如果<strong>竞争资源不激烈，两者的性能是差不多的</strong>，而当<strong>竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized</strong>。所以说，在具体使用时要根据适当情况选择。</li></ul></li><li><p>synchronized和ReentrantLock（重入锁） 的区别？</p><ul><li>两者都是<strong>可重进入锁</strong>，就是<strong>能够支持一个线程对资源的重复加锁。sychnronized关键字隐式的支持重进入</strong>，比如一个sychnronized修饰的递归方法，在方法执行时，执行线程在获取了锁之后仍能连续多次地获取该锁。<strong>ReentrantLock</strong>虽然没能像sychnronized关键字一样隐式的重进入，但是<strong>在调用lock()方法时，已经获取到锁的线程，能够再次调用lock()方法获取锁而不被阻塞</strong>。<ul><li>线程重复n次获取了锁，随后在第n次释放该锁后，其他线程能够获取到该锁。锁的最终释放要求<strong>锁对于获取进行计数自增，计数表示当前锁被重复获取的次数，而锁被释放时，计数自减，当计数等于0时表示锁已经成功被释放</strong>。</li></ul></li><li><strong>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API</strong>。ReentrantLock 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成）</li><li><strong>ReentrantLock 比 synchronized 增加了一些高级功能，主要有3点：①等待可中断；②可实现公平锁；③可实现选择性通知（锁可以绑定多个条件）</strong><ul><li><strong>ReentrantLock提供了一种能够中断等待锁的线程的机制</strong>，也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。通过lock.lockInterruptibly()来实现这个机制。</li><li><strong>ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。</strong>（公平锁就是先等待的线程先获得锁）</li><li>synchronized关键字与wait()和notify()/notifyAll()方法相结合可以实现等待/通知机制。ReentrantLock类当然也可以实现，但是需要借助于Condition接口与newCondition() 方法。用ReentrantLock类结合Condition实例可以实现“选择性通知” 。如果执行notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而Condition实例的signalAll()方法 只会唤醒注册在该Condition实例中的所有等待线程</li></ul></li></ul></li><li><p>volatile关键字</p><ul><li><strong>保证共享变量的“可见性”</strong>。可见性的意思是当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。</li><li>把变量声明为volatile，这就指示 JVM每次使用它都到主存中进行读取。</li></ul></li><li><p>synchronized 关键字和 volatile 关键字的区别</p><ul><li>volatile关键字是线程同步的轻量级实现，所以<strong>volatile性能比synchronized关键字要好</strong>。但是<strong>volatile关键字只能用于变量而synchronized关键字可以修饰方法以及代码块</strong>。</li><li>多线程访问volatile关键字<strong>不会发生阻塞</strong>，而synchronized关键字可能会发生<strong>阻塞</strong>。</li><li><strong>volatile</strong>关键字主要用于<strong>解决变量在多个线程之间的可见性</strong>，而 <strong>synchronized</strong>关键字解决的是<strong>多个线程之间访问资源的同步性</strong></li><li>volatile关键字能保证数据的可见性，但不能保证数据的原子性。synchronized关键字两者都能保证</li></ul></li><li><p>使用线程池的好处？</p><ul><li><strong>降低资源消耗</strong>。通过<strong>重复利用已创建的线程，降低线程创建和销毁造成的消耗</strong>。</li><li><strong>提高响应速度</strong>。<strong>当任务到达时，任务可以不需要等到线程创建就能立即执行</strong>。</li><li><strong>提高线程的可管理性</strong>。<strong>线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控</strong>。</li></ul></li><li><p>几种常见的线程池及适用场景？</p><ul><li><p>可以创建（<strong>Executors.newXXX</strong>）3种类型的ThreadPoolExecutor：<strong>FixedThreadPool</strong>、<strong>SingleThreadExecutor</strong>、<strong>CachedThreadPool</strong>。</p></li><li><p><strong>FixedThreadPool</strong>：<strong>可重用固定线程数的线程池</strong>。（适用于负载比较重的服务器）</p><ul><li><strong>FixedThreadPool使用无界队列LinkedBlockingQueue作为线程池的工作队列</strong></li><li>该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。</li></ul></li><li><p><strong>SingleThreadExecutor</strong>：<strong>只会创建一个线程执行任务。</strong>（适用于需要保证顺序执行各个任务；并且在任意时间点，没有多线程活动的场景。）</p><ul><li><strong><em>\</em>SingleThreadExecutorl也使用无界队列LinkedBlockingQueue作为工作队列**</strong></li><li>若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。</li></ul></li><li><p><strong>CachedThreadPool</strong>：<strong>是一个会根据需要调整线程数量的线程池</strong>。（大小无界，适用于执行很多的短期异步任务的小程序，或负载较轻的服务器）</p><ul><li><strong>CachedThreadPool使用没有容量的SynchronousQueue作为线程池的工作队列，但CachedThreadPool的maximumPool是无界的。</strong></li><li>线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。</li></ul></li><li><p><strong>ScheduledThreadPool</strong>：继承自ThreadPoolExecutor。它主要用来<strong>在给定的延迟之后运行任务，或者定期执行任务</strong>。使用DelayQueue作为任务队列。</p></li></ul></li></ul></li></ul><ul><li><p>nginx </p><ul><li>开发高并发系统时有三把利器用来保护系统：缓存、降级和限流<ul><li>缓存：缓存的目的是提升系统访问速度和增大系统处理容量</li><li>降级：降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行</li><li>限流：限流的目的是通过对并发访问/请求进行限速，或者对一个时间窗口内的请求进行限速来保护系统，一旦达到限制速率则可以拒绝服务、排队或等待、降级等处理</li></ul></li><li>高并发的限流操作<ul><li>限流算法<ul><li>计数器：限制接口在规定时间内访问次数。比如：在接口设置一个计数器，1分钟内请求接口不超过10次，每次请求时+1。当1分钟内计数器到10，那么其他接口就要等待；1分钟后的话，计数器就会重置<ul><li>弊端：可能出现临界聚集问题。比如：接口1分钟能处理10次，而当59秒~60秒和60秒到61秒突然有10个请求，60秒做为分界线。就会产生一个问题：59秒到61秒有20个请求，而接口1分钟能处理10个，这样会导致接口出现异常</li></ul></li><li>滑动窗口计数：每次访问进来时，先判断前N个单位时间内的访问量是否超过设置阈值，并对当前时间片请求+1。比如以每10秒做为一个单位，以6个单位做为一个窗口，每当过了10秒后，窗口会滑倒下一个单位。这样就保证1分钟内请求不会超过规定值</li><li>漏桶算法：水（请求）先进入到漏桶里，漏桶以一定的速度出水，当水流入速度过大会直接溢出，漏桶算法能强行限制接口调用的速率。</li><li>令牌桶算法：一个存放固定容量令牌的桶，按照固定速率往桶里添加令牌。接口拿到令牌就放行，没有令牌的接口要么放在队列等待，要么放弃</li><li>漏桶与令牌桶的对比<ul><li>令牌桶是按照固定速率往桶中添加令牌，请求是否被处理需要看桶中令牌是否足够，当令牌数减为零时则拒绝新的请求；漏桶则是按照常量固定速率流出请求，流入请求速率任意，当流入的请求数累积到漏桶容量时，则新流入的请求被拒绝；因此令牌桶能解决突发请求的情况（只要有令牌就可以）而漏通就不行</li></ul></li></ul></li></ul></li></ul></li><li><p>类加载过程</p><ul><li><p>过程：就是把.class文件加载进内存，解析生成对应的class对象。</p></li><li><p>注意点：JVM不是一开始把所有类都加载进内存的，而是需要时在加载，并且有且只有一次</p></li><li><p>五个阶段</p><ul><li>加载：将class文件通过类加载器存到内存<ul><li>通过类的全限定名获取类的二进制流，将这个字节流所代表的静态存储结构转化为方法区运行的数据结构，元空间会生成对应的class对象做为方法区这些数据的访问入口</li><li>类加载器<ul><li>启动类加载器：负责加载jre的核心类库，比如rt.jar等</li><li>扩展类加载器：负责加载jre的扩展目录ext中jar类包</li><li>系统类加载器：负责加载classpath路径下的包</li><li>用户自定义加载器：负责加载用户自定义路径下的类包</li></ul></li></ul></li><li>验证：保证加载进来的二进制流符合虚拟机规范<ul><li>文件格式规范验证：比如常量是否有不被支持的常量</li><li>元数据验证：比如该类是否继承被final修饰的类</li><li>字节码验证：比如方法体的类型转换是否有效。子类可以赋值给父类，反之报错</li><li>符号引用验证：比如符号引用中的访问性（private、public）是否被类访问</li></ul></li><li>准备<ul><li><strong>类的静态变量</strong>分配并赋予默认值</li><li>注意点：<ul><li><strong>实例变量只有在对象实例化时，随对象一起分配java堆</strong></li><li>初始化默认值规定：数据类型为0，引用类型为null，被final修饰直接定值</li></ul></li></ul></li><li>解析：将常量池内的符号引用替换为直接引用，即直接指向目标的指针</li><li>初始化：为类的静态变量赋予真正的初始值<ul><li>注意点：准备赋值的默认值时系统要求的默认值；初始化赋值是根据程序主观初始化类变量</li><li>初始化分为主动初始化和被动初始化<ul><li>主动引用：主动触发类的初始化<ul><li>创建类的实例</li><li>mian()方法的类</li><li>访问类的静态变量（不被final修饰的变量）</li><li>访问类的静态方法</li><li>反射</li></ul></li><li>被动引用：不触发类的初始化<ul><li>子类调用父类的静态变量，子类不初始化，而父类要</li><li>数据定义类，不触发类初始化</li><li>访问类的常量（final修饰），不触发初始化</li></ul></li></ul></li></ul></li></ul></li><li><p>类加载器</p><ul><li><p>类加载机制</p><ul><li><p>全盘委托：当类加载器加载一个类时，除非显示使用另一个类加载器，否则该类及所依赖和引用的类被这个类加载器加载</p></li><li><p>双亲委派：一个类加载器要加载一个类时，先判断是否已被加载，如果没有，它会先委托自己的父类加载器来加载， 以此类推，直到启动类加载器无法加载，向下委托子类加载器加载</p></li><li><p>如何打破双亲委派模型：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">因为ClassLoader#loadClass逻辑是</span><br><span class="line"><span class="number">1</span>、先查看该类是否已加载</span><br><span class="line"><span class="number">2</span>、如果没有就向上委托</span><br><span class="line"><span class="number">3</span>、启动类加载器加载，并向下委托加载</span><br><span class="line">想要打破双亲委派，可以在第二步开始，先判断该类是否是自定义加载器加载的类，是的话就用其加载，不是就用双亲委派机制加载，这样就避免该类依赖的其他类加载异常</span><br><span class="line">protected Class&lt;?&gt; load<span class="constructor">Class(String <span class="params">name</span>, <span class="params">boolean</span> <span class="params">resolve</span>)</span></span><br><span class="line">        throws ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (get<span class="constructor">ClassLoadingLock(<span class="params">name</span>)</span>) &#123;</span><br><span class="line">            <span class="comment">// 查看类是否已加载</span></span><br><span class="line">            Class&lt;?&gt; c = find<span class="constructor">LoadedClass(<span class="params">name</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (c<span class="operator"> == </span>null) &#123;</span><br><span class="line">                long t0 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>nano<span class="constructor">Time()</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 是否是启动类加载器，不是向上委托</span></span><br><span class="line">                    <span class="keyword">if</span> (parent != null) &#123;</span><br><span class="line">                        c = parent.load<span class="constructor">Class(<span class="params">name</span>, <span class="params">false</span>)</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = find<span class="constructor">BootstrapClassOrNull(<span class="params">name</span>)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c<span class="operator"> == </span>null) &#123;</span><br><span class="line">                   <span class="comment">// 使用类加载器加载</span></span><br><span class="line">                    c = find<span class="constructor">Class(<span class="params">name</span>)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolve<span class="constructor">Class(<span class="params">c</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            return c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><ul><li><p>判断对象是否垃圾回收</p><ul><li>堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断那些对象已经死亡</li><li>两种方法：<ul><li>引用计数法：就是给对象添加引用计数器，每当引用一次，它就加1，而当引用失效，它就减一。当计数器为0时，就被垃圾回收<ul><li>优点：方法简单，执行效率高。</li><li>缺点：对象如果存在循环依赖的话，即A引用B，B引用A，A，B不引用其他实例，导致其引用计数器不为0，无法通知GC回收器回收</li></ul></li><li>可达性分析法：从GC ROOT对象出发，节点开始向下搜索，搜索的路径称为引用链。当一个对象到GC ROOT没有任何引用链相连的话，那么证明对象不可用，会被垃圾回收<ul><li>CG ROOT根节点：类加载器、static成员变量等</li></ul></li></ul></li><li>finalize()方法最终判断对象是否存活<ul><li>即使时不可达的对象，也不一定被垃圾回收。要真正宣布该对象死亡，就要至少经历再一次标记过程</li><li>标记过程<ul><li>第一次标记：查看对象是否覆盖finalize()或者虚拟机已经调用了，虚拟机是为没必要执行，就垃圾回收</li><li>第二次标记：将对象放置在F-QUEUE队列中，稍后虚拟机会自动建立一条线程执行，但是不会立即执行或者等它运行结束。因为finalize()方法慢时，在极端情况下造成死循环，导致内存回收系统崩溃。其中finalize()方法实现其自身对象赋值于引用链中的对象，那么对象就会移除<strong>即将回收</strong>的集合。</li></ul></li></ul></li></ul></li><li><p>垃圾回收算法</p><ul><li>标记-清除算法：算法分为标记、清除。首先标记所有存活对象，在标记完成时，统一回收未标记的对象<ul><li>优点：执行效率高</li><li>缺点：存在大量不连续的内存碎片，造成无法存放内存大的对象</li></ul></li><li>复制算法：将内存分为大小相同的两块，每次只使用其中一块。当这块内存使用满后，就会把存活的对象复制到另一块去，在把原先那块回收<ul><li>优点：不存在大量内存碎片</li><li>缺点：使用效率低，因为每次只使用其中的一块</li></ul></li><li>标记-整理算法：根据老年代特点推出的一种标记算法，标记过程跟标记-清除算法一样，然后把存货的对象向一端移动，清理边外的内存<ul><li>优点：不存在大量内存碎片</li><li>缺点：整理要花一定时间</li></ul></li><li>分代收集算法<ul><li>当前虚拟机用分代收集算法，这种算法不是新思想，而是针对对象存活周期不同将内存分为几块，一般将java堆分为新生代、老年代，根据其中特征选择合适的收集算法<ul><li>新生代：有大量对象死去，选择复制算法，只需付出少量对象复制成本就完成垃圾回收</li><li>老年代：对象存活机率大，没有格外的空间分配担保，所以要用标记—清除或者标记-整理进行垃圾回收</li></ul></li></ul></li></ul></li><li><p>TCP协议中的三次握手和四次挥手</p><ul><li>三次握手<ul><li>第一次：客户端发送syn=1，seq=x发送服务端</li><li>第二次：服务端接收后，发送syn标志，确定标志ack给客户端ack=x+1</li><li>第三次：客户端接收后，发送seq=x+1，ack=y+1给服务端</li></ul></li><li>四次挥手<ul><li>第一次：客户端发送FIN,seq=x发送服务端，客户端进入fin-wait-1状态</li><li>第二次：服务端接收后，发送ack=x+1，seq=y给客户端，进入close-wait状态</li><li>第三次：客户端接收后，进入fin-wait-2状态，服务端发送seq=z，ack=x+1给客户端，服务端进入last-ack</li><li>第四次：客户端接收后，发送ack=z+1，客户端进入time-wait状态</li></ul></li></ul></li><li><p>jvm内存模型</p><ul><li>Jvm内存模型图</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210304212806496.png" alt="image-20210304212806496"></p><ul><li>线程私有<ul><li>程序计数器：记录虚拟机字节码的指令地址</li><li>虚拟机栈：每个方法执行时，都会创建一个栈帧，存储局部变量、操作数、动态链接、方法返回地址。方法从调用到执行完毕，对应栈帧在虚拟机栈入栈和出栈</li><li>本地方法栈：跟虚拟机栈类似，执行native方法</li></ul></li><li>线程共享<ul><li>堆：内存最大的区域，存储java对象</li><li>方法区：存储已被虚拟机加载的类信息、常量、静态变量等</li></ul></li></ul></li><li><p>Java堆的划分</p><ul><li>新生代（1:3）:存放新生的对象<ul><li>Eden(8:10)</li><li>From Survivor(1:10)</li><li>To Survivor(1:10)</li><li>过程：eden区存放新建对象。而当eden区内存不够时，就会触发垃圾回收，将其与from survivor区的存活对象，复制to survivor区，然后to survivor区变成from survivor区，from survivor区变成to survivor区。每经过一次垃圾回收，对象年龄+1，当超过默认15次时，会复制到老年代</li></ul></li><li>老年代(2:3)<ul><li>过程：老年代存放生命周期长的对象。而当老年代内存不够时，会触发full gc，比gc慢10倍左右。当时在装不下时，报出out of memory异常</li></ul></li></ul></li><li><p>Spring面试题</p><ul><li>spring：Spring是一个轻量级的IoC和AOP容器框架，用于简化企业应用程序的开发，它使得开发者只需要关心业务需求。</li><li>spring优点：<ul><li>低侵入式设计，代码的污染极低</li><li>DI机制将对象之间的依赖关系交由框架处理，减低组件的耦合性</li><li>AOP技术，将一些通用业务进行集中式管理，如事务、日志</li></ul></li><li>Spring的IoC理解：创建对象的控制权转移给Spring框架进行管理，创建对象的主动权以前由自己把控的，现在变成spring进行管理，通过java反射，运行时动态创建对象及管理对象调用方法<ul><li>IOC有三种注入方式 ：构造器注入、setter方法注入、根据注解注入</li></ul></li><li>AOP理解：面向切面，将那些与业务无关的通用逻辑，抽取并封装为一个可重用的模块，减低代码耦合<ul><li>AOP代理主要分为静态代理和动态代理<ul><li>静态代理：在编译阶段生成AOP代理类，并将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。</li><li>动态代理：<ul><li>JDK动态代理：只提供接口的代理，不支持类的代理，Proxy类创建代理类，当调用目标类方法时，InvocationHandler 通过invoke()方法反射来调用</li><li>GLIB动态代理：生成目标类的一个子类对象，并覆盖其中特定方法并添加增强代码</li></ul></li></ul></li><li>AOP术语<ul><li>连接点：执行的方法</li><li>切面（Aspect）：被抽取出来的公共模块</li><li>切点（Pointcut）：定义哪些要被org.springframework.aop.Pointcut接口进行拦截</li><li>通知（Advice）：指要在连接点上执行的动作，即增强的逻辑</li><li>目标对象（Target）：包含连接点的对象，称作被通知（Advice）的对象</li><li>织入（Weaving）：通过动态代理，在目标对象（Target）的方法（即连接点Join point）中执行增强逻辑（Advice）的过程</li><li>引入（Introduction）：添加额外的方法或者字段到被通知的类</li></ul></li></ul></li><li>bean生命周期<ul><li>实例化Bean、设置对象属性（依赖注入）、处理Aware接口、BeanPostProcessor前置处理、检查是否有InitializingBean处理，有的话调用afterPropertiesSet方法、检查是否有自定义的init-method、BeanPostProcessor后置处理器、注册必要的destruction回调接口、查看是否实现disposablebean接口、查看是否配置destory方法</li></ul></li></ul></li><li><p>Mybaits</p><ul><li>Mybatis是一个半ORM（对象关系映射）框架</li><li>#{}和${}的区别是什么<ul><li>${}是字符串替换，会直接替换成变量的值</li><li>#{}是预处理，会替换为?号，调用PreparedStatement的set方法来赋值；#{}可以有效的防止SQL注入，提高系统安全性。</li></ul></li><li>优缺点<ul><li>优点：基于SQL语句编程，相当灵活</li><li>缺点：对于多表关联，对编写SQL语句要有一定要求</li><li>Mybatis的一级、二级缓存<ul><li>一级缓存: 基于PerpetualCache 的 HashMap本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该Session中的所有 Cache 就将清空。</li><li>二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，</li><li>一级缓存的sql session互不影响，二级缓存的mapper(namespace)时可以跨多个sql session的</li></ul></li></ul></li></ul></li><li><p>todo</p></li><li><p>HashTable、HashMap、CurrentHashMap</p><ul><li>为什么使用2的n次方<ul><li>因为hash求余效率不如位移运算，源码就做了这种优化。因为hash%length==hash&amp;(length-1)前提是length是2的n次方</li></ul></li><li>HashMap特性<ul><li>hashMap底层</li></ul></li></ul></li><li><p>MySQL</p><ul><li><p>myisam与innodb区别</p><ul><li>myisam支持全文检索，但是不支持事务和行级锁，所以用于大量查询少量插入的场景</li><li>innodb基于聚簇索引建立，与myisam相反，它支持事务、外键</li></ul></li><li><p>mysql索引</p><ul><li>mysql索引是B+树索引，而B+树是左小右大的存储结构，节点只包含id索引列，叶子节点包含索引列和数据，而这种索引叫做聚簇索引</li><li>什么是非聚簇索引：跟聚簇索引相同结构，但是其叶子节点包含数据的存储地址，而Myisam使用这种索引</li></ul></li><li><p>锁类型</p><ul><li>mysql锁分为共享锁和排他锁，也成为读锁和写锁</li><li>读锁是共享的，但是这时候只读不写</li><li>写锁是排他锁，它会阻塞其他写锁和读锁，而按粒度来看，又分为行锁和表锁</li><li>表锁会锁定整个表，阻塞其他用户对该表的读写操作，比如alter修改表</li><li>行锁分为乐观锁和悲观锁，悲观锁用于for update，乐观锁通过版本号实现</li></ul></li><li><p>mysql主从表</p><ul><li>mysql主从同步原理<ul><li>master提交完事务后，写入binlog</li><li>master创建dump线程，推送binlog到slave</li><li>slave启动一个线程读取同步过来的master的binlog，记录到relay_log中继日志中</li><li>slave开启sql线程读取relay_log事件并在slave执行，完成同步</li><li>slave记录自己的binlog</li></ul></li><li>mysql默认的复制方式是异步的，主库发送日志后不再关心从库，而这样产生一个问题：主库挂了，从库处理失败，这时候从库身为主库，日志丢了。这时候有两种概念<ul><li>全同步复制：主库写入binlog后强制日志同步到从库，从库完成后才返回客户端</li><li>半同步复制：从库写入日志成功后发送ack给主库，主库收到ack就判断操作完成</li></ul></li></ul></li><li><p>事务</p><ul><li>事务的四大特性（ACID）</li></ul><ol><li>原子性(Atomicity)：事务执行操作，要么全部成功，要么全部失败。事务失败会回滚事务开始前的状态</li><li>一致性（Consistency）: 事务前后数据的完整性必须保持一致。比如A转账B，那么A减少金额，B一定增加对应的金额</li><li>隔离性（Isolation）: 同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A转账给B，那么A转钱过程中，C无法转钱给A</li><li>持久性（Durability）：事务一旦提交，数据库的数据改变时永久的</li></ol><ul><li>事务的四个隔离级别</li></ul><p>√: 可能出现  ×: 不会出现</p><table><thead><tr><th align="left">事务隔离级别（从低到高）</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="left">读未提交（read-uncommitted）</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">读已提交（read-committed）</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">可重复读（repeatable-read）</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="left">串行化（serializable）</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><ul><li>读未提交：事务A操作数据时，其他事务只允许对该行数据读取，虽然解决<strong>更新丢失</strong>问题。但是会照成<strong>脏读</strong>。<ul><li>什么是脏读：脏读就是事务A读取到事务B未提交的数据</li></ul></li><li>读已提交：事务A操作数据时，其他事务不允许对该行读写操作。这样能就解决<strong>脏读</strong>问题。但是会照成<strong>不可重复读</strong><ul><li>什么是不可重复读：事务A读取事务B操作前的数据和提交后的数据不一致</li></ul></li><li>可重复读：一个事务内，A读取数据，其他事务不允许对该行操作，这样多次读取的数据是一致的，解决了不可重复读的问题。但是会照成<strong>幻读</strong><ul><li>什么是幻读：事务A读取到事务B新增或者删除数据，导致数据个数不一致</li></ul></li><li>串行化：事务只能一个接着一个地执行，但不能并发执行。虽然能解决幻读问题。但是这种性能低，很少使用</li></ul></li><li><p>MySQL优化</p><ul><li>数据库设计优化<ul><li>选择合适的字段属性：比如性别有男、女，可以通过tinyint(1)来记录，不用varchar这样减少数据库不必要的内存同时整型处理效率比文本快，另外把所有的字段最好NOT ＮULL避免全表扫描</li></ul></li><li>使用join替代子查询，之所以效率高些，因为MySQL不需要在内存中创建临时表来完成两步查询操作</li><li>使用索引<ul><li>在where子句中的列设置索引</li><li>最左前缀原则</li><li>尽量使用覆盖索引。因为辅助索引的叶子节点包含索引值和主键，如果查询的列不包含在覆盖索引中，那么这些列会通过主键搜索主键索引，这种情况会可能照成全表扫描</li><li>不要使用````!=, not in, no exist, is null , is not null``，因为这样会造成全表扫描</li><li>不要再索引列进行操作</li></ul></li><li>优化语句<ul><li>使用explain优化语句<ul><li>id列：select序列号，id越大，优先级越高；id相同从上到下执行；id为null最后执行</li><li>select_type列<ul><li>select_type 表示对应行是简单还是复杂的查询。<ul><li>simple：简单查询。查询不包含子查询和union</li><li>primary：复杂查询中最外层的 select</li><li>subquery：包含在 select 中的子查询（不在 from 子句中）</li><li>derived：包含在 from 子句中的子查询。MySQL会将结果存放在一个临时表中，也称为<br>派生表（derived的英文含义）</li><li>union：在 union 中的第二个和随后的 select</li></ul></li></ul></li><li>table列<ul><li>访问哪个表</li><li>当 from 子句中有子查询时，table列是 &lt;deriven+id&gt; 格式，对应id的查询（如<deriven2>即id=2的查询）</li><li>当有 union 时，UNION RESULT 的 table 列的值为&lt;union1,2&gt;，1和2表示参与 union 的<br>select 行id。</li></ul></li><li>type列：表示查询使用那种类型、是否使用索引，反映语句的质量<ul><li>system&gt; const&gt; eq_ref&gt; ref&gt;rang&gt; index&gt; all,最少要得保证查询达到range级别，最好达到ref</li><li>ref 表示具有匹配索引的行都用到</li><li>range表示索引范围内查找</li><li>index表示全索引树查找</li><li>all表示全表扫描</li></ul></li><li>possible_keys：mysql试用了那些索引</li><li>key：显示使用的索引</li><li>key_len：表示使用索引的长度。比如覆盖索引，每一列有固定的长度，根据长度判断使用那个列</li><li>extra：包含mysql查询的详细信息<ul><li>Using index：使用覆盖索引</li><li>Using where：使用 where 语句来处理结果，查询的列未被索引覆盖</li><li>Using index condition：查询的列不完全被索引覆盖</li><li>Using filesort：将用外部排序而不是索引排序</li></ul></li></ul></li></ul></li></ul></li><li><p>Redis</p><ul><li><p>五种数据类型</p><ul><li>String字符串，格式：set key value，一般用于对象缓存</li><li>Hash（哈希），格式: hmset key value1 value2 value3，一般用于对象集合的缓存。比如商品中有一个需要修改，那么只要更新hash的缓存集合，不需要重新从数据库获取缓存</li><li>List（列表）有序、可重复，底层是链表，格式：lpush name value。可以对两端进行插入、弹出操作。可用于博客的用户列表</li><li>set是无序不可重复。可用于博客中用户之间的共同关注文章</li><li>zset，有序不可重复，根据分数进行排序。可用于热门的标签排序</li></ul></li><li><p>redis与mecache对比</p><ul><li>redis具有丰富的数据类型，mecache只支持key-value</li><li>redis可以把数据持久化，而mecache把数据保存到内存中，当程序关闭时，数据就会消失</li></ul></li><li><p>redis持久化</p><ul><li>什么是持久化？持久化就是将数据从内存保存到硬盘，防止redis宕机数据丢失</li><li>RDB和AOF<ul><li>RDB，将数据以快照的形式保存磁盘，是redis默认的方式。当redis重启时，会读取RDB文件。但是有个缺点，RDB不能实时备份数据，有部分时刻的数据会丢失</li><li>AOF，将redis写命令写入磁盘，这样能保证实时备份数据。可是如果命令过多，就会照成redis重启时间过长</li><li>redis 4.0后，出现混合持久化模式，结合两者优缺点。RDB的内容会写入AOF开头，这样既能提升加载速度，又能保证数据的实时性。但是因为两者结合AOF里面RDB内容可读性差</li></ul></li></ul></li><li><p>redis过期策略(Redis默认采用惰性策略+定时过期)</p><ul><li>定时策略：就是每个设置过期时间的key设置定时器，到过期时间就会清除</li><li>惰性策略：当访问一个key，才判断key是否已过期，过期清除</li><li>定时过期：每个一定时间，扫描一定数量的key，清除已过期的key</li></ul></li><li><p>redis淘汰策略</p><ul><li>noeviction：内存不足，写入新数据报错</li><li>allkeys-lru：内存不足，写入新数据，移除最近最少用的key</li><li>allkeys-random：内存不足，写入新数据，随机移除key</li><li>volatile-lru：内存不足，写入新数据，在设置过期时间的key中，移除最近最少用的key</li><li>volatile-random：内存不足，写入新数据，在设置过期时间的key中，移除最近最少用的key</li><li>volatile-ttl：内存不足，写入新数据，在设置过期时间的key中，移除最早过期的key</li></ul></li><li><p>Redis缓存穿透、雪崩、击穿</p><ul><li><p>缓存穿透：缓存穿透就是访问一个不存在的数据时，缓存没有命中，而访问数据库，在高并发情况下，数据库又因为压力而宕机</p><ul><li>解决方案<ul><li>布隆过滤器: 布隆过滤器实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</li><li>原理：当一个元素被加入集合时，通过K个散列函数将这个元素映射成一个位数组中的K个点，把它们置为1。检索时，我们只要看看这些点是不是都是1就（大约）知道集合中有没有它了：如果这些点有任何一个0，则被检元素一定不在；如果都是1，则被检元素很可能在。</li><li>优点：相比于其它的数据结构，布隆过滤器在空间和时间方面都有巨大的优势。布隆过滤器存储空间和插入/查询时间都是常数（O(k)）。而且它不存储元素本身，在某些对保密要求非常严格的场合有优势。</li><li>缺点：一定的误识别率和删除困难。<br>结合以上几点及去重需求（容忍误判，会误判在，在则丢，无妨），决定使用BlomFilter。</li></ul></li></ul></li><li><p>缓存雪崩：在缓存时设置相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，数据库瞬时压力过重雪崩。 </p><ul><li>解决方案：缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li></ul></li><li><p>缓存击穿：某个数据设置过期时间，而该数据是被高并发访问的热点数据，一旦过期，可能就会造成缓存被击穿的可能</p><ul><li>解决方案<ul><li>使用互斥锁解决</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(key)</span> </span>&#123;  </span><br><span class="line">      String value = redis.get(key);  </span><br><span class="line">      <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; <span class="comment">//代表缓存值过期  </span></span><br><span class="line">          <span class="comment">//设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db  </span></span><br><span class="line">          <span class="keyword">if</span> (redis.setnx(key_mutex, <span class="number">1</span>, <span class="number">3</span> * <span class="number">60</span>) == <span class="number">1</span>) &#123;  <span class="comment">//代表设置成功  </span></span><br><span class="line">               value = db.get(key);  </span><br><span class="line">               redis.set(key, value, expire_secs);  </span><br><span class="line">               redis.del(key_mutex);  </span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;  <span class="comment">//这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可  </span></span><br><span class="line">                      sleep(<span class="number">50</span>);  </span><br><span class="line">                      get(key);  <span class="comment">//重试  </span></span><br><span class="line">              &#125;  </span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">              <span class="keyword">return</span> value;        </span><br><span class="line">          &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>将该数据不设置过期时间，就不会造成缓存击穿问题</li></ul></li></ul></li></ul></li><li><p>Nginx</p><ul><li>Nginx是一个高性能的 HTTP 和 反向代理 服务器</li><li>Nginx负载均衡<ul><li>循环轮询</li><li>最少连接，即每次都找连接数最少的服务器来转发请求</li><li>IP地址来决定当前请求</li><li>权重算法，会根据每个服务的权重来分发请求，权重大的请求相对会多分发一点，权重小的会少分发一点。</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mysql与redis如何数据同步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发不高的情况下，读操作优先读取redis，不存在的
      
    
    </summary>
    
    
      <category term="学习" scheme="https://blog.deschen.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>docker部署svn</title>
    <link href="https://blog.deschen.cn/2020/05/13/docker%E9%83%A8%E7%BD%B2svn/"/>
    <id>https://blog.deschen.cn/2020/05/13/docker%E9%83%A8%E7%BD%B2svn/</id>
    <published>2020-05-13T10:21:45.000Z</published>
    <updated>2021-03-26T09:32:13.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker部署svn"><a href="#docker部署svn" class="headerlink" title="docker部署svn"></a>docker部署svn</h1><p>[toc]</p><h2 id="一、下载svn的镜像文件"><a href="#一、下载svn的镜像文件" class="headerlink" title="一、下载svn的镜像文件"></a>一、下载svn的镜像文件</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索svn镜像</span></span><br><span class="line"><span class="attribute">docker</span> search svn</span><br></pre></td></tr></table></figure><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210326171514270.png" alt="image-20210326171514270"></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 下拉镜像</span></span><br><span class="line">docker pull garethflowers/svn-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><h2 id="二、运行svn容器"><a href="#二、运行svn容器" class="headerlink" title="二、运行svn容器"></a>二、运行svn容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行命令，将容器的svn挂在到本地svn，这样可以在本地修改，不用到容器内部修改</span></span><br><span class="line">docker run -v /opt/svn:/var/opt/svn --name svn -p 3690:3690 -d garethflowers/svn-server</span><br><span class="line"><span class="comment"># 跳转到/opt/svn目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/svn</span><br><span class="line"><span class="comment"># 创建仓库，仓库名test</span></span><br><span class="line">svnadmin <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 修改配置文件授予权限</span></span><br><span class="line">- <span class="comment"># 跳转到/opt/svn/test/conf目录</span></span><br><span class="line">  <span class="built_in">cd</span> /opt/svn/<span class="built_in">test</span>/conf</span><br><span class="line">- <span class="comment"># 修改svnserve.conf,把注释去掉</span></span><br><span class="line">  anon-access = none     <span class="comment">#控制非鉴权用户访问版本库的权限</span></span><br><span class="line">  auth-access = write    <span class="comment">#控制鉴权用户访问版本库的权限</span></span><br><span class="line">  password-db = passwd   <span class="comment">#指定用户名口令文件名</span></span><br><span class="line">  authz-db = authz       <span class="comment">#指定权限配置文件</span></span><br><span class="line">- <span class="comment"># 修改passwd，添加用户和密码</span></span><br><span class="line">  <span class="built_in">test</span> = test123</span><br><span class="line">- <span class="comment"># 设置仓库权限</span></span><br><span class="line">  <span class="built_in">test</span> = <span class="built_in">test</span>  <span class="comment"># 第一个test是组名，第二个test是用户名</span></span><br><span class="line">  [<span class="built_in">test</span>:/]   <span class="comment"># test仓库名</span></span><br><span class="line">  @<span class="built_in">test</span> = rw   <span class="comment"># @组名</span></span><br><span class="line">  * = r</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 重启svn</span></span><br><span class="line">docker restart svn</span><br></pre></td></tr></table></figure><h2 id="三、测试svn是否可以访问"><a href="#三、测试svn是否可以访问" class="headerlink" title="三、测试svn是否可以访问"></a>三、测试svn是否可以访问</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本机测试</span></span><br><span class="line"><span class="attribute">curl</span> http://127.0.0.1:3690/test  <span class="comment"># test仓库名</span></span><br><span class="line">响应是如下图，则启动成功</span><br></pre></td></tr></table></figure><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210326172855979.png" alt="image-20210326172855979"></p><h2 id="四、异常处理"><a href="#四、异常处理" class="headerlink" title="四、异常处理"></a>四、异常处理</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异常</span></span><br><span class="line">docker: <span class="builtin-name">Error</span> response <span class="keyword">from</span> daemon: driver failed programming external connectivity on endpoint svn (6de16f10af6e0d3c8865e8172c501c1872cc17947001d25b73011fc28cb9081c):  (iptables failed: iptables --wait -t<span class="built_in"> nat </span>-A DOCKER -p tcp -d 0/0 --dport 3690 -j DNAT --to-destination 172.17.0.2:3690 ! -i docker0: iptables: <span class="literal">No</span> chain/target/match by that name.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方法</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker部署svn&quot;&gt;&lt;a href=&quot;#docker部署svn&quot; class=&quot;headerlink&quot; title=&quot;docker部署svn&quot;&gt;&lt;/a&gt;docker部署svn&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、下载svn的镜像文件&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="docker" scheme="https://blog.deschen.cn/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么使用ThreadPoolExecutor创建线程池</title>
    <link href="https://blog.deschen.cn/2020/03/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8ThreadPoolExecutor%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://blog.deschen.cn/2020/03/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8ThreadPoolExecutor%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2020-03-28T09:00:33.000Z</published>
    <updated>2021-03-20T15:04:37.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么使用ThreadPoolExecutor创建线程池"><a href="#为什么使用ThreadPoolExecutor创建线程池" class="headerlink" title="为什么使用ThreadPoolExecutor创建线程池"></a>为什么使用ThreadPoolExecutor创建线程池</h1><p>[toc]</p><h2 id="一、为什么要使用线程池"><a href="#一、为什么要使用线程池" class="headerlink" title="一、为什么要使用线程池"></a>一、为什么要使用线程池</h2><ol><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ol><h2 id="二、为什么不使用Excutors创建线程"><a href="#二、为什么不使用Excutors创建线程" class="headerlink" title="二、为什么不使用Excutors创建线程"></a>二、为什么不使用Excutors创建线程</h2><ul><li><p>阿里编程规范</p><ul><li><p>【强制】线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明：Executors返回的线程池对象的弊端如下： </p><ul><li><p><code>FixedThreadPool和SingleThreadPool</code>： 允许的<strong>请求队列</strong>长度为<code>Integer.MAX_VALUE</code>，可能会堆积大量的请求，从而导致OOM。 </p></li><li><p><code>CachedThreadPool和ScheduledThreadPool</code>： 允许的创建<strong>线程数量</strong>为<code>Integer.MAX_VALUE</code>，可能会创建大量的线程，从而导致OOM。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个单线程化线程池，它只会用唯一的工作线程执行任务，保证所有任务按照指定顺序（FIFO，LIFO，优先级）执行</span></span><br><span class="line">Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">// 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</span></span><br><span class="line">Executors.newFixedThreadPool();</span><br><span class="line"><span class="comment">// 创建一个定长线程池，可控制线程最大并发数，超出线程会在队列中等待</span></span><br><span class="line">Executors.newCachedThreadPool();  </span><br><span class="line"><span class="comment">// 创建一个定长线程池，支持定时及周期性任务执行</span></span><br><span class="line">Executors.newScheduledThreadPool();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ThreadPoolExecutor创建线程池的优势</p><ul><li>在创建线程池时需根据自己的情况来合理设置线程池。ThreadPoolExecutor构造方法提供了多种参数定义线程池。具体说明如下</li></ul></li></ul></li></ul><h2 id="三、使用ThreadPoolExecutor创建线程池"><a href="#三、使用ThreadPoolExecutor创建线程池" class="headerlink" title="三、使用ThreadPoolExecutor创建线程池"></a>三、使用ThreadPoolExecutor创建线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">    * parameters and default thread factory.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">    *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">    *        pool</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">    *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">    *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">    *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">    *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment">    *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment">    *         or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">            Executors.defaultThreadFactory(), handler);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><code>corePoolSize</code> &amp; <code>maximumPoolSize</code><ul><li><code>corePoolSize</code>：核心线程数。如果没有设置<code>allowCoreThreadTimeOut</code>超时时间，那么空闲的线程不会销毁</li><li>````maximumPoolSize``：最大线程数。线程池允许的最大线程数</li><li>当一个新任务被提交到池中，如果当前运行线程小于核心线程数<code>corePoolSize</code>，即使当前有空闲线程，也会新建一个线程来处理新提交的任务；如果当前运行线程数大于核心线程数<code>corePoolSize</code>并小于最大线程数<code>maximumPoolSize</code>，只有当等待队列已满的情况下才会新建线程。</li></ul></li><li><code>keepAliveTime</code> &amp; <code>unit</code><ul><li><code>keepAliveTime</code>：超过核心线程数的线程最大空闲时间。</li><li><code>unit</code>：<code>keepAliveTime</code>的时间单位</li></ul></li><li><code>workQueue</code>：等待队列：用于移交或者保存提交（执行``execute<code>方法）的任务（</code>Runnable`的任务），但线程池中线程执行完后就执行队列任务。<ul><li>如果运行线程数小于<code>corePoolSize</code>，提交新任务时就会新建一个线程来运行；</li><li>如果运行线程数大于或等于<code>corePoolSize</code>，新提交的任务就会入列等待；如果队列已满，并且运行线程数小于<code>maximumPoolSize</code>，也将会新建一个线程来运行；</li><li>如果线程数大于<code>maximumPoolSize</code>，新提交的任务将会根据<strong>拒绝策略</strong>来处理。</li><li>三种通用的<strong>入队策略</strong>（PS：<strong>不是拒绝策略</strong>）<ul><li><strong>直接传递</strong>：通过·<code>SynchronousQueue</code> 直接把任务传递给线程。如果当前没可用线程，尝试入队操作会失败，然后再创建一个新的线程。当处理可能具有内部依赖性的请求时，该策略会避免请求被锁定。直接传递通常需要无界的最大线程数（<code>maximumPoolSize</code>），避免拒绝新提交的任务。当任务持续到达的平均速度超过可处理的速度时，可能导致线程的无限增长。</li><li><strong>无界队列</strong>：使用无界队列（如 <code>LinkedBlockingQueue</code>）作为等待队列，当所有的核心线程都在处理任务时， 新提交的任务都会进入队列等待。因此，不会有大于 <code>corePoolSize</code> 的线程会被创建（<code>maximumPoolSize</code>也将失去作用）。这种策略适合每个任务都完全独立于其他任务的情况；例如网站服务器。这种类型的等待队列可以使瞬间爆发的高频请求变得平滑。当任务持续到达的平均速度超过可处理速度时，可能导致等待队列无限增长。</li><li><strong>有界队列</strong>：当使用有限的最大线程数时，有界队列（如 <code>ArrayBlockingQueue</code>）可以防止资源耗尽，但是难以调整和控制。队列大小和线程池大小可以相互作用：使用大的队列和小的线程数可以减少CPU使用率、系统资源和上下文切换的开销，但是会导致吞吐量变低，如果任务频繁地阻塞（例如被I/O限制），系统就能为更多的线程调度执行时间。使用小的队列通常需要更多的线程数，这样可以最大化CPU使用率，但可能会需要更大的调度开销，从而降低吞吐量。</li></ul></li></ul></li><li><code>handler</code>：当线程池已经关闭或达到饱和（最大线程和队列都已满）状态时，新提交的任务将会被拒绝。<ul><li>ThreadPoolExecutor 定义了四种拒绝策略：<ul><li><strong>AbortPolicy</strong>：默认策略，在需要拒绝任务时抛出``RejectedExecutionException`；</li><li><strong>CallerRunsPolicy</strong>：直接在 <code>execute</code> 方法的调用线程中运行被拒绝的任务，如果线程池已经关闭，任务将被丢弃；</li><li><strong>DiscardPolicy</strong>：直接丢弃任务；</li><li><strong>DiscardOldestPolicy</strong>：丢弃队列中等待时间最长的任务，并执行当前提交的任务，如果线程池已经关闭，任务将被丢弃。</li></ul></li><li>我们也可以自定义拒绝策略，只需要实现<code>RejectedExecutionHandler</code>；需要注意的是，拒绝策略的运行需要指定线程池和队列的容量</li></ul></li></ul></li></ul><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>线程池执行流程图</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320222223985.png" alt="image-20210320222223985"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ThreadPoolExecutor创建线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//核心线程数</span></span><br><span class="line">        <span class="keyword">int</span> corePoolSize = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//最大线程数</span></span><br><span class="line">        <span class="keyword">int</span> maximumPoolSize = <span class="number">6</span>;</span><br><span class="line">        <span class="comment">//超过 corePoolSize 线程数量的线程最大空闲时间</span></span><br><span class="line">        <span class="keyword">long</span> keepAliveTime = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//以秒为时间单位</span></span><br><span class="line">        TimeUnit unit = TimeUnit.SECONDS;</span><br><span class="line">        <span class="comment">//创建工作队列，用于存放提交的等待执行任务</span></span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建线程池</span></span><br><span class="line">            threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize,</span><br><span class="line">                    maximumPoolSize,</span><br><span class="line">                    keepAliveTime,</span><br><span class="line">                    unit,</span><br><span class="line">                    workQueue,</span><br><span class="line">                    <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环提交任务</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//提交任务的索引</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> index = (i + <span class="number">1</span>);</span><br><span class="line">                threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                    <span class="comment">//线程打印输出</span></span><br><span class="line">                    System.out.println(<span class="string">"大家好，我是线程："</span> + index);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//模拟线程执行时间，10s</span></span><br><span class="line">                        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                        <span class="comment">// System.out.println("线程" + index + "执行完");</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">//每个任务提交后休眠500ms再提交下一个任务，用于保证提交顺序</span></span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPoolExecutor.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 单元测试中主线程执行完，不管子线程是否执行都会关闭程序，所以要使主线程等待到子线程全部执行完</span></span><br><span class="line">            <span class="comment">// 而mian()方法则不会，他会等待子线程执行完关闭程序</span></span><br><span class="line">            Thread.sleep(<span class="number">100000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果预估</p><ul><li><p>因为最大线程数<code>maximumPoolSize</code>是6，<code>队列</code>容量是2时，即执行线程数超过8时，就会执行拒绝策略</p></li><li><p>不超过就执行<strong>流程图中流程2</strong>的过程</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320223342834.png" alt="image-20210320223342834"></p></li><li><p>超过之后根据拒绝策略，判断是否放弃任务</p><ul><li><p>把执行的任务数量变成9，策略是<code>AbortPolicy</code>，在需要拒绝任务时抛出``RejectedExecutionException`</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320223912156.png" alt="image-20210320223912156"></p></li><li><p>把执行的任务数量变成9，策略是<code>CallerRunsPolicy</code>，直接在 <code>execute</code> 方法的调用线程中运行被拒绝的任务，如果线程池已经关闭，任务将被丢弃</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320224101466.png" alt="image-20210320224101466"></p></li><li><p>把执行的任务数量变成9，策略是<code>DiscardPolicy</code>，直接丢弃任务</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320224212232.png" alt="image-20210320224212232"></p></li><li><p>把执行的任务数量变成9，策略是<code>DiscardOldestPolicy</code>，丢弃队列中等待时间最长的任务，并执行当前提交的任务，如果线程池已经关闭，任务将被丢弃</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320224346228.png" alt="image-20210320224346228"></p></li></ul></li></ul><h2 id="五、线程池设置设置多大比较合适"><a href="#五、线程池设置设置多大比较合适" class="headerlink" title="五、线程池设置设置多大比较合适"></a>五、线程池设置设置多大比较合适</h2><ul><li><p>有一个简单并且适用面比较广的公式：</p><ul><li><strong>CPU 密集型任务(N+1)：</strong> 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1，比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。</li><li><strong>I/O 密集型任务(2N)：</strong> 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。</li></ul></li><li><p>如何判断是 CPU 密集任务还是 IO 密集任务？</p><p>CPU 密集型简单理解就是利用 CPU 计算能力的任务比如你在内存中对大量数据进行排序。单凡涉及到网络读取，文件读取这类都是 IO 密集型，这类任务的特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，大部分时间都花在了等待 IO 操作完成上。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么使用ThreadPoolExecutor创建线程池&quot;&gt;&lt;a href=&quot;#为什么使用ThreadPoolExecutor创建线程池&quot; class=&quot;headerlink&quot; title=&quot;为什么使用ThreadPoolExecutor创建线程池&quot;&gt;&lt;/a&gt;为什
      
    
    </summary>
    
    
      <category term="多线程" scheme="https://blog.deschen.cn/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="ThreadPoolExecutor" scheme="https://blog.deschen.cn/tags/ThreadPoolExecutor/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM--类加载器</title>
    <link href="https://blog.deschen.cn/2020/02/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    <id>https://blog.deschen.cn/2020/02/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</id>
    <published>2020-02-29T09:37:09.000Z</published>
    <updated>2020-03-20T11:15:34.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解JVM–类加载器"><a href="#深入理解JVM–类加载器" class="headerlink" title="深入理解JVM–类加载器"></a>深入理解JVM–类加载器</h1><h2 id="一、类与类加载器的关系"><a href="#一、类与类加载器的关系" class="headerlink" title="一、类与类加载器的关系"></a>一、类与类加载器的关系</h2><ul><li><p>任意一个类,都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性</p></li><li><p>每个类加载器都有各自的命名空间，命名空间由该加载器及所有父加载器所加载的类组成。 </p></li></ul><h2 id="二、类加载器种类"><a href="#二、类加载器种类" class="headerlink" title="二、类加载器种类"></a>二、类加载器种类</h2><p>启动类加载器： 由C++编写，无法通过程序得到。主要负责加载JAVA中的 一些核心类库，主要是位于<JAVA_HOME>/lib/rt.jar中 </p><p>扩展类加载器： 要加载JAVA中的一些拓展类，主要位于<JAVA_HOME>/lib/ext </p><p>系统类加载器： 主要用于加载CLASSPATH路径下的类 </p><h2 id="三、类加载机制"><a href="#三、类加载机制" class="headerlink" title="三、类加载机制"></a>三、类加载机制</h2><p>全盘委托： 指当一个类加载器加载一个类时，除非显示地使用另一个类加载器，否则该类所依赖与引用的类也由这个类加载器加载。 </p><p>双亲委派： 一个类加载器要加载一个类时，先判断是否已被加载，如果没有，它会先委托自己的父类加载器来加载， 以此类推，直到启动类加载器无法加载，向下委托子类加载器加载 </p><h2 id="四、双亲委派模型源码分析"><a href="#四、双亲委派模型源码分析" class="headerlink" title="四、双亲委派模型源码分析"></a>四、双亲委派模型源码分析</h2><p><img src="C:%5CUsers%5C20423%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1583074859678.png" alt="1583074859678"></p><p><img src="C:%5CUsers%5C20423%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1583075146217.png" alt="1583075146217">)<img src="C:%5CUsers%5C20423%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1583075296256.png" alt="1583075296256"></p><p><img src="C:%5CUsers%5C20423%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1583075400741.png" alt="1583075400741"></p><h2 id="五、自定义类加载器"><a href="#五、自定义类加载器" class="headerlink" title="五、自定义类加载器"></a>五、自定义类加载器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.deschen.jvm.gc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomClassLoaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        CustomClassLoader loader01 = <span class="keyword">new</span> CustomClassLoader(<span class="string">"F:\\java-note\\jvm-note\\classes\\"</span>, <span class="string">".class"</span>, <span class="string">"loader01"</span>);</span><br><span class="line">        CustomClassLoader loader02 = <span class="keyword">new</span> CustomClassLoader(<span class="string">"F:\\java-note\\jvm-note\\classes\\"</span>, <span class="string">".class"</span>, <span class="string">"loader02"</span>);</span><br><span class="line">        Class&lt;?&gt; class01 = loader01.loadClass(<span class="string">"cn.deschen.jvm.gc.C"</span>);</span><br><span class="line">        System.out.println(<span class="string">"class01 类加载器："</span> + class01.getClassLoader());</span><br><span class="line">        Class&lt;?&gt; class02 = loader02.loadClass(<span class="string">"cn.deschen.jvm.gc.C"</span>);</span><br><span class="line">        System.out.println(<span class="string">"class02 类加载器："</span> + class02.getClassLoader());</span><br><span class="line">        <span class="comment">// 结果是false</span></span><br><span class="line">        <span class="comment">// 为什么都是C类，结果是false呢？ =》因为loader01与loader02不是同一个类加载器，因此类的命令空间不同，因此两个类是不一样的</span></span><br><span class="line">        System.out.println(<span class="string">"class01 == class02："</span> + (class01 == class02));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: java-note</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: deschen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义类加载器</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String loadPath;   <span class="comment">// 文件路径</span></span><br><span class="line">    <span class="keyword">private</span> String filePrefix;   <span class="comment">// 文件后缀</span></span><br><span class="line">    <span class="keyword">private</span> String loaderName;   <span class="comment">// 类加载器名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认应用类加载器作为自定义类加载器的父类加载器</span></span><br><span class="line"><span class="comment">     * 调用父类构造方法</span></span><br><span class="line"><span class="comment">     * java.lang.ClassLoader.ClassLoader()&#123;</span></span><br><span class="line"><span class="comment">     *     this(checkCreateClassLoader(), getSystemClassLoader());</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * getSystemClassLoader()就是应用程序类加载器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomClassLoader</span><span class="params">(String loadPath, String filePrefix, String loaderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.loadPath = loadPath;</span><br><span class="line">        <span class="keyword">this</span>.filePrefix = filePrefix;</span><br><span class="line">        <span class="keyword">this</span>.loaderName = loaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomClassLoader</span><span class="params">(ClassLoader parent, String loadPath, String filePrefix, String loaderName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置应用类加载器的父类加载器</span></span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        <span class="keyword">this</span>.loadPath = loadPath;</span><br><span class="line">        <span class="keyword">this</span>.filePrefix = filePrefix;</span><br><span class="line">        <span class="keyword">this</span>.loaderName = loaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoadPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loadPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadPath</span><span class="params">(String loadPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadPath = loadPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFilePrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filePrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilePrefix</span><span class="params">(String filePrefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filePrefix = filePrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoaderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoaderName</span><span class="params">(String loaderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loaderName = loaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * class文件转换为字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name  类的二进制名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassData(String name) &#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream bao = <span class="keyword">null</span>;</span><br><span class="line">        name = name.replace(<span class="string">"."</span>, <span class="string">"//"</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(loadPath + name + filePrefix);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            bao = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> ch;</span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != (ch = fis.read())) &#123;</span><br><span class="line">               bao.write(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != bao) &#123;</span><br><span class="line">                    bao.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != fis) &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = loadClassData(name);</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、打破双亲委派机制"><a href="#六、打破双亲委派机制" class="headerlink" title="六、打破双亲委派机制"></a>六、打破双亲委派机制</h2><img src=" https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584533309335.png " alt="1584533309335" style="zoom:200%;" /><p>`</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解JVM–类加载器&quot;&gt;&lt;a href=&quot;#深入理解JVM–类加载器&quot; class=&quot;headerlink&quot; title=&quot;深入理解JVM–类加载器&quot;&gt;&lt;/a&gt;深入理解JVM–类加载器&lt;/h1&gt;&lt;h2 id=&quot;一、类与类加载器的关系&quot;&gt;&lt;a href=&quot;#一、
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://blog.deschen.cn/categories/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>IDEA 配置Gradle</title>
    <link href="https://blog.deschen.cn/2020/01/05/IDEA%20%E9%85%8D%E7%BD%AEGradle/"/>
    <id>https://blog.deschen.cn/2020/01/05/IDEA%20%E9%85%8D%E7%BD%AEGradle/</id>
    <published>2020-01-05T08:02:06.000Z</published>
    <updated>2021-03-22T09:24:54.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA-配置Gradle"><a href="#IDEA-配置Gradle" class="headerlink" title="IDEA 配置Gradle"></a>IDEA 配置Gradle</h1><p>[toc]</p><h2 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h2><ul><li><a href="https://gradle.org/releases/" target="_blank" rel="noopener">下载网址</a></li><li>解压到磁盘（如：D:\Gradle6.5.1）</li></ul><h2 id="二、配置win10环境变量"><a href="#二、配置win10环境变量" class="headerlink" title="二、配置win10环境变量"></a>二、配置win10环境变量</h2><ul><li><p>我的电脑 》右键》属性》高级系统设置 》高级》环境变量 》系统变量 》Path添加gradle的bin路径</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210322161606954.png" alt="image-20210322161606954"></p></li></ul><h2 id="三、IDEA配置Gradle"><a href="#三、IDEA配置Gradle" class="headerlink" title="三、IDEA配置Gradle"></a>三、IDEA配置Gradle</h2><ul><li><p>IDEA 》 setting 》Build，Execution… 》Build Tools 》 Gradle</p><ul><li>设置Gradle user home，用于存储 jar 包的仓库（可在全局setting设置）</li><li>点击项目，在Build and run using 和 Run tests using 设置为 IntelliJ IDEA，不然build很慢的</li><li>设置Use Gradle from 为 Specified location ，右边是gradle的安装目录</li><li>PS：全局setting只有Gradle user home，其他步骤只有在项目设置才会显示</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210322172320885.png" alt="image-20210322172320885"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IDEA-配置Gradle&quot;&gt;&lt;a href=&quot;#IDEA-配置Gradle&quot; class=&quot;headerlink&quot; title=&quot;IDEA 配置Gradle&quot;&gt;&lt;/a&gt;IDEA 配置Gradle&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、下载安装包&quot;
      
    
    </summary>
    
    
      <category term="编程工具" scheme="https://blog.deschen.cn/categories/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解JVM--七种垃圾收集器</title>
    <link href="https://blog.deschen.cn/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E4%B8%83%E7%A7%8D%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>https://blog.deschen.cn/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E4%B8%83%E7%A7%8D%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</id>
    <published>2019-10-11T08:18:05.000Z</published>
    <updated>2021-03-04T09:57:45.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解JVM–七种垃圾收集器"><a href="#深入理解JVM–七种垃圾收集器" class="headerlink" title="深入理解JVM–七种垃圾收集器"></a>深入理解JVM–七种垃圾收集器</h1><h2 id="一、垃圾收集器"><a href="#一、垃圾收集器" class="headerlink" title="一、垃圾收集器"></a>一、垃圾收集器</h2><ul><li><p>七种垃圾收集器组合</p><p> <img src="http://img.blog.csdn.net/20170102225015393" alt="img"></p></li><li><p>区域划分</p><ul><li>新生代收集器：Serial、ParNew、Parallel Scavenge；</li><li>老年代收集器：Serial Old、Parallel Old、CMS；</li><li>整堆收集器：G1；</li></ul></li></ul><h2 id="二、并发垃圾收集和并行垃圾收集的区别"><a href="#二、并发垃圾收集和并行垃圾收集的区别" class="headerlink" title="二、并发垃圾收集和并行垃圾收集的区别"></a>二、并发垃圾收集和并行垃圾收集的区别</h2><ul><li>并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态；如：ParNew、Parallel Scavenge、Parallel Old；</li><li>并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行）；用户程序在继续运行，而垃圾收集程序线程运行于另一个CPU上；如：CMS、G1（也有并行）；</li></ul><h2 id="三、收集器详解"><a href="#三、收集器详解" class="headerlink" title="三、收集器详解"></a>三、收集器详解</h2><h3 id="1、Serial收集器"><a href="#1、Serial收集器" class="headerlink" title="1、Serial收集器"></a>1、Serial收集器</h3><p>Serial（串行）收集器收集器是<strong>最基本、历史最悠久</strong>的垃圾收集器了。大家看名字就知道这个收集器是一个<strong>单线程收集器</strong>了。它的单线程的意义不仅仅意味着它<strong>只会使用一条垃圾收集线程去完成垃圾收集</strong>工作，更重要的是<strong>它在进行垃圾收集工作的时候必须暂停其他所有的工作线程</strong>（ <strong>“Stop The World”</strong> ），直到它收集结束。</p><p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong></p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584521520253.png" alt="1584521520253"></p><h3 id="2、ParNew收集器"><a href="#2、ParNew收集器" class="headerlink" title="2、ParNew收集器"></a>2、ParNew收集器</h3><p>ParNew收集器其实就是<strong>Serial收集器的多线程版本</strong>，除了<strong>使用多线程进行垃圾收集外</strong>，<strong>其余行为</strong>（控制参数、收集算法、回收策略等等）和Serial收集器<strong>完全一样</strong>。</p><p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong></p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584521563004.png" alt="1584521563004"></p><h3 id="3、Parallel-Scavenge收集器"><a href="#3、Parallel-Scavenge收集器" class="headerlink" title="3、Parallel Scavenge收集器"></a>3、Parallel Scavenge收集器</h3><p>Parallel Scavenge 收集器<strong>类似于ParNew 收集器，是Server 模式</strong>（内存大于2G，2个cpu）下的<strong>默认收集器</strong>，那么它有什么特别之处呢？</p><p>Parallel Scavenge收集器<strong>关注点是吞吐量（高效率的利用CPU）</strong>。所谓吞吐量就是<strong>CPU中用于运行用户代码的时间与CPU总消耗时间的比值</strong>。 </p><p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong></p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584521574511.png" alt="1584521574511"></p><h3 id="4、Serial-Old收集器"><a href="#4、Serial-Old收集器" class="headerlink" title="4、Serial Old收集器"></a>4、Serial Old收集器</h3><p><strong>Serial</strong>收集器的<strong>老年代版本</strong>，它同样是一个<strong>单线程</strong>收集器。它主要有两大用途：一种用途是在<strong>JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用</strong>，另一种用途是作<strong>为CMS收集器的后备方案</strong>。  </p><h3 id="5、Parallel-Old收集器"><a href="#5、Parallel-Old收集器" class="headerlink" title="5、Parallel Old收集器"></a>5、Parallel Old收集器</h3><p> <strong>Parallel Scavenge</strong>收集器的<strong>老年代</strong>版本。使用多线程和“标记-整理”算法。在注重吞吐量以及CPU资源的场合，都可以优先考虑 Parallel Scavenge收集器和Parallel Old收集器。</p><h3 id="6、CMS收集器"><a href="#6、CMS收集器" class="headerlink" title="6、CMS收集器"></a>6、CMS收集器</h3><p>CMS（Concurrent Mark Sweep）收集器是一种以<strong>获取最短回收停顿时间为目标的收集器</strong>。它而非常符合在注重用户体验的应用上使用，它是HotSpot虚拟机第一款真正意义上的并发收集器，它第一次实现了让<strong>垃圾收集线程与用户线程（基本上）同时工作。</strong></p><p>从名字中的<strong>Mark Sweep</strong>这两个词可以看出，CMS收集器是一种 <strong>“标记-清除”算法</strong>实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：</p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程(<strong>STW</strong>)，并记录下<strong>直接与root相连的对象，速度很快</strong> ；</li><li><strong>并发标记：</strong> <strong>同时开启GC和用户线程</strong>，用一个<strong>闭包结构</strong>去<strong>记录可达对象</strong>。但在这个阶段结束，这个闭包结构<strong>并不能保证包含当前所有的可达对象</strong>。因为<strong>用户线程</strong>可能会<strong>不断的更新引用域</strong>，所以GC线程无法保证可达性分析的<strong>实时性</strong>。所以这个算法里会<strong>跟踪记录这些发生引用更新的地方</strong>。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了<strong>修正</strong>并发标记期间因为用户程序继续运行而导致<strong>标记产生变动的那一部分对象的标记记录</strong>，这个阶段的停顿时间一般<strong>会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</strong></li><li><strong>并发清除：</strong> 开启用户线程，同时<strong>GC线程开始对未标记的区域做清扫</strong>。</li></ul><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584521588277.png" alt="1584521588277"></p><p>从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点：<strong>并发收集、低停顿</strong>。但是它有下面三个明显的缺点：</p><ul><li>对<strong>CPU资源敏感</strong>（会和服务抢资源）；</li><li><strong>无法处理浮动垃圾(</strong>在java业务程序线程与垃圾收集线程并发执行过程中又产生的垃圾，这种浮动垃圾只能等到下一次gc再清理了)；</li><li>它使用的回收算法<strong>-“标记-清除”</strong>算法会导致收集结束时会有大量空间碎片产生<strong>。</strong></li></ul><h3 id="7、G1收集器-XX-UseG1GC"><a href="#7、G1收集器-XX-UseG1GC" class="headerlink" title="7、G1收集器(-XX:+UseG1GC)"></a>7、G1收集器(-XX:+UseG1GC)</h3><p><strong>G1</strong> (Garbage-First)是一款<strong>面向服务器的垃圾收集器</strong>,主要针对配备<strong>多颗处理器及大容量内存的机器</strong>. 以极<strong>高概率满足GC停顿时间要求的同时,还具备高吞吐量性能特征</strong>.</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image002.gif" alt="截图.png"></p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image004.gif" alt="截图.png"></p><p>G1将<strong>Java堆划分为多个大小相等的独立区域</strong>（<strong>Region</strong>），虽保留新生代和老年代的<strong>概念</strong>，但不再是<strong>物理隔阂</strong>了，它们都是（可以不连续）<strong>Region</strong>的集合。</p><p><strong>分配大对象</strong>（直接进<strong>Humongous区</strong>，专门<strong>存放短期巨型对象</strong>， <strong>当分配的对象大于等于Region大小的一半</strong>的时候就会被认为是巨型对象 ）不会因为无法找到连续空间而提前触发下一次GC。</p><p>G1收集器的运作大致分为以下几个步骤：</p><ul><li><strong>初始标记</strong>（initial mark，STW）：在此阶段，标记 GC Roots能直接关联到的对象。 需要停顿线程，但耗时很短 </li><li><strong>并发标记</strong>（Concurrent Marking）： GC Root开始对堆中对象进行<strong>可达性分析，找出存活的对象，</strong>这阶段耗时较长，但可与用户程序并发执行 </li><li><strong>最终标记</strong>（Remark，STW）： 修正在并发标记期间因<strong>用户程序继续运作而导致标记产生变动的那一部分标记记录</strong> </li><li><strong>筛选回收</strong>（Cleanup，STW）：筛选回收阶段首先对各个Region的回收价值和成本进行排序，<strong>根据用户所期望的GC停顿时间来制定回收计划</strong>.</li></ul><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image006.gif" alt="clipboard.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解JVM–七种垃圾收集器&quot;&gt;&lt;a href=&quot;#深入理解JVM–七种垃圾收集器&quot; class=&quot;headerlink&quot; title=&quot;深入理解JVM–七种垃圾收集器&quot;&gt;&lt;/a&gt;深入理解JVM–七种垃圾收集器&lt;/h1&gt;&lt;h2 id=&quot;一、垃圾收集器&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://blog.deschen.cn/categories/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解JVM--四种垃圾收集算法</title>
    <link href="https://blog.deschen.cn/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E5%9B%9B%E7%A7%8D%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
    <id>https://blog.deschen.cn/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E5%9B%9B%E7%A7%8D%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</id>
    <published>2019-10-11T07:56:36.000Z</published>
    <updated>2020-03-18T11:37:07.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解JVM–四种垃圾收集算法"><a href="#深入理解JVM–四种垃圾收集算法" class="headerlink" title="深入理解JVM–四种垃圾收集算法"></a>深入理解JVM–四种垃圾收集算法</h1><h2 id="一、标记-清除算法"><a href="#一、标记-清除算法" class="headerlink" title="一、标记-清除算法"></a>一、标记-清除算法</h2><p>算法分为“标记”和“清除”阶段：首先<strong>标记所有存活</strong>的对象，在标记完成后<strong>统一回收所有未标记</strong>的对象。它是最基础的收集算法，效率也很高。</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584530746245.png" alt="1584530746245"></p><p>优点：执行效率高</p><p>缺点：1、标记清除后会产生大量不连续的碎片；2、分配速度慢，因为存在大量不连续碎片，每次分配都需要遍历空闲链表，找到足够大的内存空间存放对象</p><h2 id="二、复制算法"><a href="#二、复制算法" class="headerlink" title="二、复制算法"></a>二、复制算法</h2><p>为了解决标记-清除算法问题，“复制”收集算法出现了。它可以将<strong>内存分为大小相同的两块</strong>，<strong>每次使用其中的一块</strong>。当这一块的内存<strong>使用完后</strong>，就将<strong>还存活的对象有序复制到另一块</strong>去，然后再<strong>把使用的空间一次清理</strong>掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584530755486.png" alt="1584530755486"></p><p>优点：不存在大量不连续的内存碎片</p><p>缺点：使用效率低下，因为每次只使用其中一块内存空间</p><h2 id="三、标记-整理算法"><a href="#三、标记-整理算法" class="headerlink" title="三、标记-整理算法"></a>三、标记-整理算法</h2><p>根据老年代的特点特出的一种标记算法，<strong>标记</strong>过程仍然与<strong>“标记-清除”算法一样</strong>，清除的过程不同，让<strong>所有存活的对象向一端移动</strong>，然后<strong>直接清理掉端边界以外的内存</strong>。</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584530762589.png" alt="1584530762589"></p><p>优点：不存在大量不连续的内存碎片</p><p>缺点： 整理会花一定的时间 </p><h2 id="四、分代收集算法"><a href="#四、分代收集算法" class="headerlink" title="四、分代收集算法"></a>四、分代收集算法</h2><p>当前<strong>虚拟机的垃圾收集都采用分代收集算法</strong>，这种算法没有什么新的思想，只是<strong>根据对象存活周期的不同将内存分为几块</strong>。一般将java堆分为新生代和老年代，这样我们就可以根据<strong>各个年代的特点选择合适的垃圾收集算法</strong>。</p><p>比如在<strong>新生代</strong>中，每次收集都会有<strong>大量对象死去</strong>，所以可以选择<strong>复制算法</strong>，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而<strong>老年代</strong>的对象存活几率是比较高的，而且没<strong>有额外的空间对它进行分配担保</strong>，所以我们必须选择<strong>“标记-清除”或“标记-整理”</strong>算法进行垃圾收集。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解JVM–四种垃圾收集算法&quot;&gt;&lt;a href=&quot;#深入理解JVM–四种垃圾收集算法&quot; class=&quot;headerlink&quot; title=&quot;深入理解JVM–四种垃圾收集算法&quot;&gt;&lt;/a&gt;深入理解JVM–四种垃圾收集算法&lt;/h1&gt;&lt;h2 id=&quot;一、标记-清除算法
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://blog.deschen.cn/categories/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解JVM--对象存活分析算法</title>
    <link href="https://blog.deschen.cn/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E4%B8%A4%E7%A7%8D%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/"/>
    <id>https://blog.deschen.cn/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E4%B8%A4%E7%A7%8D%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</id>
    <published>2019-10-11T06:24:15.000Z</published>
    <updated>2021-02-12T11:14:04.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解JVM–对象存活分析算法"><a href="#深入理解JVM–对象存活分析算法" class="headerlink" title="深入理解JVM–对象存活分析算法"></a>深入理解JVM–对象存活分析算法</h1><blockquote><p> 堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断那些对象已经死亡（即不能再被任何途径使用的对象）。</p></blockquote><h2 id="一、引用计数法"><a href="#一、引用计数法" class="headerlink" title="一、引用计数法"></a>一、引用计数法</h2><ul><li><p>概念：给对象中添加一个<strong>引用计数器</strong>，每当有一个地方<strong>引用</strong>它，计数器就<strong>加1</strong>；当<strong>引用失效</strong>，计数器就减1；任何时候计数器<strong>为0</strong>的对象就是<strong>不可能再被使用</strong>的。</p></li><li><p>分析：这个方法实现<strong>简单，效率高</strong>，但是目前<strong>主流的虚拟机</strong>中并<strong>没有选择这个算法</strong>来管理内存，其最主要的<strong>原因是</strong>它很难解决<strong>对象之间相互循环引用</strong>的问题。 所谓对象之间的相互引用问题，如下面代码所示：除了对象<strong>testA</strong> 和 <strong>testB</strong> <strong>相互引用</strong>着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的<strong>引用计数器都不为0</strong>，于是引用计数算法无法通知 GC 回收器回收他们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test testA = <span class="keyword">new</span> Test();</span><br><span class="line">        Test testA = <span class="keyword">new</span> Test();</span><br><span class="line">        testA.setObj(testB);</span><br><span class="line">        testB.setObj(testA);</span><br><span class="line">        testA = <span class="keyword">null</span>;</span><br><span class="line">        testB = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、可达性分析算法"><a href="#二、可达性分析算法" class="headerlink" title="二、可达性分析算法"></a>二、可达性分析算法</h2><ul><li>概念：这个算法的基本思想就是通过一系列的称为 <strong>“GC Roots”</strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的。</li><li><strong>GC Roots</strong>根节点：<strong>类加载器</strong>、<strong>Thread</strong>、虚拟机栈的本地变量表、<strong>static成员</strong>、<strong>常量引用</strong>、本地方法栈的变量等等</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210212191352321.png" alt="image-20210212191352321"></p><ul><li><strong>finalize()</strong>方法最终判定对象<strong>是否存活</strong><ul><li>即使在可达性分析算法中<strong>不可达的对象</strong>，也<strong>并非是一定会被回收</strong>的。要真正宣告一个对象死亡，至少要经历<strong>再次标记</strong>过程。</li><li>标记的前提是对象在进行可达性分析后发现没有与GC Roots相连接的引用链。</li><li>标记过程：<ul><li>第一次标记。筛选的条件是此对象是否<strong>有必要执行finalize()</strong>方法。当对象<strong>没有覆盖finalize方法</strong>，或者<strong>finalize方法已经被虚拟机调用过</strong>，虚拟机将这两种情况都视为“没有必要执行”，对象被回收。</li><li>第二次标记。如果这个对象被判定为有必要执行finalize()方法，那么这个对象将会被<strong>放置在一个名为：F-Queue的队列</strong>之中，并在稍后由一条<strong>虚拟机自动建立的、低优先级的Finalizer线程</strong>去执行。这里所谓的“执行”是指虚拟机会<strong>触发这个方法，但并不承诺会等待它运行结束</strong>。这样做的原因是，如果一个对象f<strong>inalize()方法中执行缓慢，或者发生死循环（更极端的情况）</strong>，将很可能会导致F-Queue<strong>队列中的其他对象永久处于等待状态，甚至导致整个内存回收系统崩溃</strong>。</li><li>finalize()–只要<strong>重新与引用链上的任何的一个对象建立关联</strong>即可，譬如把自己赋值给某个类变量或对象的成员变量，那在第二次标记时它将移除出“即将回收”的集合。如果对象这时候还没逃脱，那基本上它就真的被回收了。</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解JVM–对象存活分析算法&quot;&gt;&lt;a href=&quot;#深入理解JVM–对象存活分析算法&quot; class=&quot;headerlink&quot; title=&quot;深入理解JVM–对象存活分析算法&quot;&gt;&lt;/a&gt;深入理解JVM–对象存活分析算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://blog.deschen.cn/categories/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解JVM--类加载过程详解</title>
    <link href="https://blog.deschen.cn/2019/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.deschen.cn/2019/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</id>
    <published>2019-10-01T07:00:21.000Z</published>
    <updated>2020-03-18T13:39:14.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解JVM–类加载过程详解"><a href="#深入理解JVM–类加载过程详解" class="headerlink" title="深入理解JVM–类加载过程详解"></a>深入理解JVM–类加载过程详解</h1><blockquote><p>如果向学习和理解JVM的话，《深入理解JVM虚拟机》这本圣经必不可少的，我也是你们其中一份子，这本书看了一遍后有很多不懂，沮丧。。。也不敢装懂，不过该懂得还是懂一些，因此打算写几篇JVM得博客，巩固知识，也希望大伙能提点我的错误和不足</p><p>《深入理解JVM虚拟机》的分享链接：链接：<a href="https://pan.baidu.com/s/1fnTMWfC7Zi3HVJ5C78O80Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1fnTMWfC7Zi3HVJ5C78O80Q</a><br>提取码：hhmo</p></blockquote><h2 id="一、Java文件从编码完成到最终执行过程"><a href="#一、Java文件从编码完成到最终执行过程" class="headerlink" title="一、Java文件从编码完成到最终执行过程"></a>一、Java文件从编码完成到最终执行过程</h2><ul><li>编译：Java文件通过javac命令编译生成字节码，也就是.class文件</li><li>运行：.class文件交给JVM虚拟机进行<strong>类加载</strong>，到最后执行过程</li></ul><h2 id="二、类加载过程详解"><a href="#二、类加载过程详解" class="headerlink" title="二、类加载过程详解"></a>二、类加载过程详解</h2><h3 id="1、类加载的过程"><a href="#1、类加载的过程" class="headerlink" title="1、类加载的过程"></a>1、类加载的过程</h3><ul><li><p>过程： JVM虚拟机把.class文件中类信息加载进内存，并进行解析生成对应的class对象的过程。</p></li><li><p>注意点：JVM<strong>不是一开始把所有的类</strong>加载进内存，而是需要的时候<strong>有且仅有一次</strong>加载</p></li></ul><h3 id="2、类加载五个阶段："><a href="#2、类加载五个阶段：" class="headerlink" title="2、类加载五个阶段："></a>2、类加载五个阶段：</h3><blockquote><p>类加载的顺序除了<strong>解析</strong>之外是<strong>固定</strong>的(  可以在<strong>初始化阶段之后</strong>再开始，这是为了支持Java语言的<strong>运行时绑定</strong>。例如<strong>多态</strong> )，但是<strong>不是连续</strong>(  因为这些阶段通常都是<strong>互相交叉的混合进行</strong>，通常会在一个阶段执行的过程中调用或者激活另一个阶段 )</p></blockquote><h4 id="2-1-加载："><a href="#2-1-加载：" class="headerlink" title="2.1 加载："></a>2.1 加载：</h4><ul><li>加载：将<strong>class文件</strong>通过<strong>类加载器</strong>存到内存中<ul><li>过程:<ol><li>通过一个<strong>类的全限定名来获取</strong>定义此类的二进制字节流。</li><li>将这个字节流所代表的<strong>静态存储结构</strong>转化为<strong>方法区的运行时数据结构</strong>。</li><li>在<strong>元空间</strong>中生成一个代表这个类的java.lang.<strong>Class对象</strong>，作为方法区这些数据的访问<strong>入口</strong>。（字段，方法名，常量池…）</li></ol></li><li>注意点：类的全限定名获取的<strong>来源</strong>没有确定，可以很多途径《深入理解Java虚拟机》书中有提，不会坑你们，嘻嘻</li><li>.class文件来源：<ol><li>本地磁盘</li><li>网络下载</li><li>下载的war，jar包</li><li>从专门的数据库中读取. class文件(少见)</li><li>将java源文件动态编译成 class文件1) 典型的就是动态代理,通过运行期生成 class文件 2) jsp转换成的servlet,而serlvet是一个java文件，会被编译成 class文件</li></ol></li><li>类加载器：( 这个在第二篇就会详细讲解 )<ul><li><strong>启动类加载器</strong>：负责加载JRE的核心类库，如jre目标下的rt.jar,charsets.jar等</li><li><strong>扩展类加载器</strong>：负责加载JRE扩展目录ext中JAR类包</li><li><strong>系统类加载器</strong>：负责加载ClassPath路径下的类包</li><li><strong>用户自定义加载器</strong>：负责加载用户自定义路径下的类包</li></ul></li></ul></li></ul><h4 id="2-2-链接：包含验证、准备、解析三个过程"><a href="#2-2-链接：包含验证、准备、解析三个过程" class="headerlink" title="2.2 链接：包含验证、准备、解析三个过程"></a>2.2 链接：包含验证、准备、解析三个过程</h4><h5 id="2-21-验证"><a href="#2-21-验证" class="headerlink" title="2.21 验证"></a>2.21 验证</h5><ul><li><p>验证： 为了保证加载进来的字节流<strong>符合虚拟机规范</strong>，不会造成安全错误。 </p></li><li><p>四种检验：</p><ol><li>文件格式的验证<ul><li>常量中是否有不被支持的常量？</li><li>指向常量的索引值是否指向不存在或不符合类型的常量等。</li><li>目的：保证输入的<strong>字节流</strong>能正确地<strong>解析并存储于方法区</strong>之内,格式上符合描述一个Java类型信息的要求。</li></ul></li><li>元数据的验证<ul><li>该类是否继承了被final修饰的类？</li><li>类中的字段，方法是否与父类冲突？是否出现了不合理的重载等？</li><li>目的：类的元数据信息进行语义校验,保证<strong>不存在不符合</strong>Java语言规范的<strong>元数据信息。</strong></li></ul></li><li>字节码的验证<ul><li>方法体的类型转换是否有效？例如：<strong>子类</strong>对象可以赋值于<strong>父类数据类型</strong>，反之发报错。</li><li><strong>任意时刻</strong>操作数栈的指令类型与指令代码序列是否配合工作。例如：操作数栈放置<strong>int类型</strong>，使用确实<strong>long类型</strong>载入本地变量表。</li><li>目的：通过数据流和控制流分析,确定程序语义是<strong>合法的、符合逻辑</strong>的。是对<strong>类的方法体的校验</strong></li></ul></li><li>符号引用的验证<ul><li>校验符号引用中通过全限定名是否能够找到对应的类？</li><li>校验符号引用中的访问性（private，public等）是否可被当前类访问？</li><li>目的：确保解析动作能正常执行</li></ul></li></ol></li></ul><h5 id="2-22-准备"><a href="#2-22-准备" class="headerlink" title="2.22 准备"></a>2.22 准备</h5><ul><li><p>准备：为类的<strong>静态变量</strong>分配内存并将其<strong>初始化为默认值</strong>，这些内存都将在<strong>方法区</strong>中进行分配。</p></li><li><p>注意点：</p><ol><li>类变量(被 <strong>static</strong>修饰的变量)，而<strong>不包括实例变量</strong>，实例变量将在对象实例化时随着对象一起分配在Java堆中。</li><li>这里所说的初始值“通常情况”下是数据类型的零值，引用类型是null。特殊情况：被final修饰的变量，会直接赋值<strong>给定值</strong></li></ol></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>   <span class="comment">// 准备阶段是：value=0，而不是123</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>   <span class="comment">// 准备阶段是：value=123</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-23-解析"><a href="#2-23-解析" class="headerlink" title="2.23 解析"></a>2.23 解析</h5><ul><li><p>解析：虚拟机将常量池内的符号引用替换为直接引用的过程</p></li><li><p>符号引用(Symlxiuc References)：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量, 只要使用时能无歧义地定位到目标即可。符号引用是与虚拟机实现的内存布局<strong>无关</strong>的</p></li><li><p>直接引用(Direct References)：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局<strong>相关</strong>的</p></li></ul><h4 id="2-3-初始化"><a href="#2-3-初始化" class="headerlink" title="2.3 初始化"></a>2.3 初始化</h4><ul><li><p>初始化： 为类的静态变量赋予<strong>真正</strong>的初始值 </p></li><li><p>与准备阶段的差别：</p><ul><li>准备阶段，变量已经赋过一次系统要求的<strong>初始值( 默认值 )</strong></li><li>初始化阶段，根据程序员通过程序制定的<strong>主观</strong>计划去<strong>初始化类变量和其他资源</strong></li></ul></li><li><p><code>&lt;clinit&gt;</code>方法描述：是由编译器自动收集类中的<strong>所有类变量的赋值动作</strong>和<strong>静态语句块( static块)</strong>中的语句合并产生的,编译器收集的顺序是由语句在<strong>源文件中出现的顺序</strong>所决定的</p></li><li><p>初始化分为<strong>主动引用</strong>和<strong>被动引用</strong></p><ul><li>主动引用：主动触发类的初始化<ul><li>对于初始化阶段虚拟机规范是严格规定了如下几种情况，如果类未初始化会对类进行初始化。 <ol><li>创建<strong>类的实例</strong></li><li>访问类的<strong>静态变量</strong>( 不被<strong>final</strong>修饰的变量 )</li><li>访问类的<strong>静态方法</strong></li><li><strong>反射</strong></li><li>当初始化一个类时，发现其<strong>父类还未初始化</strong>，则先出发父类的初始化</li><li>虚拟机启动时，定义了<strong>main()</strong>方法的那个类先初始化</li></ol></li></ul></li><li>被动引用：不触发类的初始化<ul><li>子类调用<strong>父类的静态变量</strong>，子类不会被初始化。只有<strong>父类被初始化</strong></li><li>通过<strong>数组</strong>定义来引用类，不会触发类的初始化</li><li>访问<strong>类的常量</strong>，不会初始化类( 注意跟主动引用2情况区分 )</li></ul></li></ul></li><li><p>测试用例( 要用<code>System.out.println(&quot;***********主动引用X*********************&quot;);</code>分隔每个用例，要一个一个测试，不要全部，不然会造成误解。因为类<strong>有且仅有一次</strong>初始化，全部运行，运行结果又造成误解 )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.deschen.jvm.gc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MainClass init 1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MainClass init 2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用7*********************");   //主动引用7，直接运行，就可以了，结果如下图，其他大家可以自己测试</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用1*********************");</span></span><br><span class="line"><span class="comment">//        new SuperClass();</span></span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用2*********************");</span></span><br><span class="line"><span class="comment">//        System.out.println(SuperClass.value);</span></span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用3*********************");</span></span><br><span class="line"><span class="comment">//        SuperClass.method();</span></span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用4*********************");</span></span><br><span class="line"><span class="comment">//        Class.forName("cn.deschen.jvm.gc.ExtendClass");</span></span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用5*********************");</span></span><br><span class="line"><span class="comment">//        System.out.println(ExtendClass.value);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("***********被动引用1*********************");</span></span><br><span class="line"><span class="comment">//        System.out.println(SuperClass.value);// 被动引用1</span></span><br><span class="line"><span class="comment">//        System.out.println("***********被动引用2*********************");</span></span><br><span class="line"><span class="comment">//        SuperClass[] superClasses = new SuperClass[10];// 被动引用2</span></span><br><span class="line"><span class="comment">//        System.out.println("***********被动引用3*********************");</span></span><br><span class="line"><span class="comment">//        System.out.println(SuperClass.VALUE);// 被动引用3</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"SuperClass init 1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> VALUE = <span class="number">456</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SuperClass init 2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ExtendClass static Method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"ExtendClass init 1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtendClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ExtendClass init 2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><p> <img src="https://img-blog.csdnimg.cn/20200205143024192.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-qmlTk2Zj-1580884042274)(C:\Users\20423\AppData\Roaming\Typora\typora-user-images\1580884002599.png)]"> </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解JVM–类加载过程详解&quot;&gt;&lt;a href=&quot;#深入理解JVM–类加载过程详解&quot; class=&quot;headerlink&quot; title=&quot;深入理解JVM–类加载过程详解&quot;&gt;&lt;/a&gt;深入理解JVM–类加载过程详解&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;如果向学习
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://blog.deschen.cn/categories/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-阅读与评论功能</title>
    <link href="https://blog.deschen.cn/2019/08/14/Hexo-%E9%98%85%E8%AF%BB%E4%B8%8E%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>https://blog.deschen.cn/2019/08/14/Hexo-%E9%98%85%E8%AF%BB%E4%B8%8E%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</id>
    <published>2019-08-14T05:45:03.401Z</published>
    <updated>2022-01-27T06:32:54.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-阅读与评论功能"><a href="#Hexo-阅读与评论功能" class="headerlink" title="Hexo-阅读与评论功能"></a>Hexo-阅读与评论功能</h1><blockquote><p>Hexo支持集成Valine的实现阅读和评论功能</p><p>官方地址：<a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a></p></blockquote><h2 id="一、LeanCloud相关配置"><a href="#一、LeanCloud相关配置" class="headerlink" title="一、LeanCloud相关配置"></a>一、LeanCloud相关配置</h2><ul><li><p><a href="https://console.leancloud.cn/login?from=%2Fapps" target="_blank" rel="noopener">注册</a>，进入控制台创建应用</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220127135444950.png" alt="image-20220127135444950"></p></li><li><p>进入刚刚创建的应用=》设置=》应用凭证获取AppID 和 AppKey</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220127135715504.png" alt="image-20220127135715504"></p></li><li><p>数据存储=》结构化数据=》创建class，命名：Counter（hexo规定的）并设置为无限制状态。主要用于存储博客的阅读量，充当数据库的作用</p><ul><li>PS：Comment充当记录评论的作用</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220127140905321.png" alt="image-20220127140905321"></p></li></ul><h2 id="二、Hexo集成配置"><a href="#二、Hexo集成配置" class="headerlink" title="二、Hexo集成配置"></a>二、Hexo集成配置</h2><ul><li><p>集成对应依赖</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-leancloud-counter-<span class="keyword">security</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-leancloud-counter-<span class="keyword">security</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">根目录配置文件_config.yml</span></span><br><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line">  <span class="attr">enable_sync:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">主题配置文件_config.yml</span></span><br><span class="line"><span class="comment">## 阅读配置</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">LeanCloud的AppID</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">LeanCloud的AppKey</span></span><br><span class="line">  <span class="comment"># 解决阅读次数Counter not initialized! More info at console err msg异常。针对域名是Https,而valine试用Http</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">betterPerformance:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">## 评论配置</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 启动</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="string">LeanCloud的AppID</span></span><br><span class="line">  <span class="attr">appkey:</span>  <span class="string">LeanCloud的AppKey</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">请发表有价值的评论，共同维护学习氛围</span>   <span class="comment"># 评论开头显示</span></span><br></pre></td></tr></table></figure></li><li><p>启动并运行，效果如下图</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  清除</span><br><span class="line">hexo g -d  构建并发布</span><br><span class="line">hexo<span class="built_in"> server </span>启动</span><br></pre></td></tr></table></figure><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220127143114155.png" alt="image-20220127143114155"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220127143252645.png" alt="image-20220127143252645"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo-阅读与评论功能&quot;&gt;&lt;a href=&quot;#Hexo-阅读与评论功能&quot; class=&quot;headerlink&quot; title=&quot;Hexo-阅读与评论功能&quot;&gt;&lt;/a&gt;Hexo-阅读与评论功能&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo支持集成Valine的实现
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>深入理解Redis--集群部署</title>
    <link href="https://blog.deschen.cn/2019/08/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>https://blog.deschen.cn/2019/08/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</id>
    <published>2019-08-01T02:25:06.000Z</published>
    <updated>2021-02-24T09:32:24.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解Redis–集群部署"><a href="#深入理解Redis–集群部署" class="headerlink" title="深入理解Redis–集群部署"></a>深入理解Redis–集群部署</h1><h2 id="一、启动集群"><a href="#一、启动集群" class="headerlink" title="一、启动集群"></a>一、启动集群</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8001/</span>redis.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8002/</span>redis.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8003/</span>redis.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8004/</span>redis.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8005/</span>redis.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8006/</span>redis.conf</span><br></pre></td></tr></table></figure><p># 客户端连接8001端口的redis实例</p><figure class="highlight plain"><figcaption><span>-a deschen -c -h 192.168.0.61 -p 8001````</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">\# 查看集群状态</span><br><span class="line"></span><br><span class="line">192.168.0.61:8001&gt; cluster nodes</span><br><span class="line"></span><br><span class="line">![clipboard.png](https:&#x2F;&#x2F;root-1258715043.cos.ap-guangzhou.myqcloud.com&#x2F;blog&#x2F;01&#x2F;clip_image002.gif)</span><br><span class="line"></span><br><span class="line">从上图可以看出，整个集群运行正常，三个master节点和三个slave节点，8001端口的实例节点存储0-5460这些hash槽，8002端口的实例节点存储5461-10922这些hash槽，8003端口的实例节点存储10923-16383这些hash槽，这三个master节点存储的所有hash槽组成redis集群的存储槽位，slave点是每个主节点的备份从节点，不显示存储槽位  </span><br><span class="line"></span><br><span class="line">## 二、集群操作</span><br><span class="line"></span><br><span class="line">我们在原始集群基础上再增加一主(8007)一从(8008)，增加节点后的集群参见下图，新增节点用虚线框表示</span><br><span class="line"></span><br><span class="line">![clipboard.png](https:&#x2F;&#x2F;root-1258715043.cos.ap-guangzhou.myqcloud.com&#x2F;blog&#x2F;01&#x2F;clip_image004.gif)</span><br><span class="line"></span><br><span class="line">### 1、增加redis实例</span><br><span class="line"></span><br><span class="line">在&#x2F;usr&#x2F;local&#x2F;redis-cluster下创建8007和8008文件夹，并拷贝8001文件夹下的redis.conf文件到8007和8008这两个文件夹下</span><br></pre></td></tr></table></figure><p>mkdir 8008</p><p>mkdir 8008</p><p>cd 8001</p><p>cp redis.conf /usr/local/redis-cluster/8007/</p><p>cp redis.conf /usr/local/redis-cluster/8008/</p><p>修改8007文件夹下的redis.conf配置文件</p><p>vim /usr/local/redis-cluster/8007/redis.conf</p><p>修改如下内容：</p><p>port:8007</p><p>dir /usr/local/redis-cluster/8007/</p><p>cluster-config-file nodes-8007.conf</p><p>修改8008文件夹下的redis.conf配置文件</p><p>vim /usr/local/redis-cluster/8008/redis.conf</p><p>修改内容如下：</p><p>port:8008</p><p>dir /usr/local/redis-cluster/8008/</p><p>cluster-config-file nodes8008.conf</p><p>启动8007和8008俩个服务并查看服务状态</p><p> /usr/local/redis-5.0.2/src/redis-server /usr/local/redis-cluster/8007/redis.conf</p><p> /usr/local/redis-5.0.2/src/redis-server /usr/local/redis-cluster/8008/redis.conf</p><p> ps -el | grep redis</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### <span class="number">2</span>、查看redis集群的命令帮助</span><br></pre></td></tr></table></figure><p>cd /usr/local/redis-5.0.2</p><p>src/redis-cli –cluster help</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">clipboard.png</span>](<span class="link">https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image006.gif</span>)</span><br></pre></td></tr></table></figure><p>1、create：创建一个集群环境host1:port1 … hostN:portN</p><p>2、call：可以执行redis命令</p><p>3、add-node：将一个节点添加到集群里，第一个参数为新节点的ip:port，第二个参数为集群中任意一个已经存在的节点的ip:port </p><p>4、del-node：移除一个节点</p><p>5、reshard：重新分片</p><p>6、check：检查集群状态</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">### 3、 配置8007为集群主节点</span></span><br><span class="line"></span><br><span class="line">使用<span class="code">```</span><span class="code">`add-node`</span><span class="code">```</span>命令新增一个主节点8007(master)，绿色为新增节点，红色为已知存在节点，看到日志最后有<span class="code">```</span><span class="code">`"[OK] New node added correctly"`</span><span class="code">```</span>提示代表新节点加入成功</span><br><span class="line"></span><br><span class="line"><span class="code">```</span><span class="code">`/usr/local/redis-5.0.2/src/redis-cli --cluster add-node 192.168.0.64:8007 192.168.0.61:8001`</span><span class="code">```</span> </span><br><span class="line"></span><br><span class="line">查看集群状态</span><br><span class="line"></span><br><span class="line">![<span class="string">clipboard.png</span>](<span class="link">https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image008.gif</span>)</span><br><span class="line"></span><br><span class="line">注意：当添加节点成功以后，新增的节点不会有任何数据，因为它还没有分配任何的slot(hash槽)，我们需要为新节点手工分配hash槽 </span><br><span class="line"></span><br><span class="line">使用redis-cli命令为8007分配hash槽，找到集群中的任意一个主节点(红色位置表示集群中的任意一个主节点)，对其进行重新分片工作。</span><br><span class="line"></span><br><span class="line"><span class="code">```</span>`/usr/local/redis-5.0.2/src/redis-cli --cluster reshard 192.168.0.61:8001</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">输出如下：</span><br><span class="line"></span><br><span class="line">How many slots <span class="keyword">do</span> you want <span class="keyword">to</span> move (<span class="keyword">from</span> 1 <span class="keyword">to</span> 16384)? 600</span><br><span class="line"></span><br><span class="line">(ps:需要多少个槽移动到新的节点上，自己设置，比如600个hash槽)</span><br><span class="line"></span><br><span class="line">What is the receiving node ID? eb57a5700ee6f9ff099b3ce0d03b1a50ff247c3c</span><br><span class="line"></span><br><span class="line">(ps:把这600个hash槽移动到哪个节点上去，需要指定节点id)</span><br><span class="line"></span><br><span class="line">Please enter all the source node IDs.</span><br><span class="line"></span><br><span class="line"><span class="built_in"> Type </span><span class="string">'all'</span> <span class="keyword">to</span> use all the nodes as source nodes <span class="keyword">for</span> the hash slots.</span><br><span class="line"></span><br><span class="line"><span class="built_in"> Type </span><span class="string">'done'</span> once you entered all the source nodes IDs.</span><br><span class="line"></span><br><span class="line">Source node 1:all</span><br><span class="line"></span><br><span class="line">(ps:输入all为从所有主节点(8001,8002,8003)中分别抽取相应的槽数指定到新节点中，抽取的总槽数为600个)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> proceed with the proposed reshard plan (<span class="literal">yes</span>/<span class="literal">no</span>)? <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">(ps:输入<span class="literal">yes</span>确认开始执行分片任务)</span><br></pre></td></tr></table></figure><p>查看下最新的集群状态</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image010.gif" alt="clipboard.png"></p><p>如上图所示，现在我们的8007已经有hash槽了，也就是说可以在8007上进行读写数据啦！到此为止我们的8007已经加入到集群中，并且是主节点(Master)</p><h3 id="4、配置8008为8007的从节点"><a href="#4、配置8008为8007的从节点" class="headerlink" title="4、配置8008为8007的从节点"></a>4、配置8008为8007的从节点</h3><p>添加从节点8008到集群中去并查看集群状态</p><figure class="highlight plain"><figcaption><span>--cluster add-node 192.168.0.64:8008 192.168.0.61:8001````</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![clipboard.png](https:&#x2F;&#x2F;root-1258715043.cos.ap-guangzhou.myqcloud.com&#x2F;blog&#x2F;01&#x2F;clip_image012.gif)</span><br><span class="line"></span><br><span class="line">如图所示，还是一个master节点，没有被分配任何的hash槽。</span><br><span class="line"></span><br><span class="line">我们需要执行replicate命令来指定当前节点(从节点)的主节点id为哪个,首先需要连接新加的8008节点的客户端，然后使用集群命令进行操作，把当前的8008(slave)节点指定到一个主节点下(这里使用之前创建的8007主节点，红色表示节点id)</span><br></pre></td></tr></table></figure><p>/usr/local/redis-5.0.2/src/redis-cli -c -h 192.168.0.64 -p 8008</p><p>192.168.0.61:8008&gt; cluster replicate eb57a5700ee6f9ff099b3ce0d03b1a50ff247c3c</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">\# 查看集群状态，<span class="number">8008</span>节点已成功添加为<span class="number">8007</span>节点的从节点</span><br><span class="line"></span><br><span class="line">![clipboard.png](https:<span class="comment">//root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image014.gif)</span></span><br><span class="line"></span><br><span class="line">### <span class="number">5</span>、删除<span class="number">8008</span>从节点</span><br><span class="line"></span><br><span class="line">用del-node删除从节点<span class="number">8008</span>，指定删除节点ip和端口，以及节点id(红色为<span class="number">8008</span>节点id)</span><br><span class="line"></span><br><span class="line">````/usr/local/redis<span class="number">-5.0</span><span class="number">.2</span>/src/redis-cli --cluster del-node <span class="number">192.168</span><span class="number">.0</span><span class="number">.64</span>:<span class="number">8008</span> <span class="number">1805</span>b6339d91b0e051f46845eebacb9bc43baefe</span><br></pre></td></tr></table></figure><p>再次查看集群状态，如下图所示，8008这个slave节点已经移除，并且该节点的redis服务也已被停止</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image016.gif" alt="clipboard.png"></p><h3 id="6、删除8007主节点"><a href="#6、删除8007主节点" class="headerlink" title="6、删除8007主节点"></a>6、删除8007主节点</h3><p>最后，我们尝试删除之前加入的主节点8007，这个步骤相对比较麻烦一些，因为主节点的里面是有分配了hash槽的，所以我们这里必须先把8007里的hash槽放入到其他的可用主节点中去，然后再进行移除节点操作，不然会出现数据丢失问题(目前只能把master的数据迁移到一个节点上，暂时做不了平均分配功能)，执行命令如下：</p><figure class="highlight plain"><figcaption><span>--cluster reshard 192.168.0.64:8007````</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输出如下：</span><br></pre></td></tr></table></figure><p>How many slots do you want to move (from 1 to 16384)? 600</p><p>What is the receiving node ID? deedad3c34e8437baa6ff013fd3d1461a0c2e761</p><p>(ps:这里是需要把数据移动到哪？8001的主节点id)</p><p>Please enter all the source node IDs.</p><p> Type ‘all’ to use all the nodes as source nodes for the hash slots.</p><p> Type ‘done’ once you entered all the source nodes IDs.</p><p>Source node 1:eb57a5700ee6f9ff099b3ce0d03b1a50ff247c3c</p><p>(ps:这里是需要数据源，也就是我们的8007节点id)</p><p>Source node 2:done</p><p>(ps:这里直接输入done 开始生成迁移计划)</p><p>Do you want to proceed with the proposed reshard plan (yes/no)? Yes</p><p>(ps:这里输入yes开始迁移)</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">至此，我们已经成功的把<span class="number">8007</span>主节点的数据迁移到<span class="number">8001</span>上去了，我们可以看一下现在的集群状态如下图，你会发现<span class="number">8007</span>下面已经没有任何hash槽了，证明迁移成功！</span><br><span class="line"></span><br><span class="line">![clipboard.png](https:<span class="comment">//root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image018.gif)</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">最后我们直接使用del-node命令删除<span class="number">8007</span>主节点即可（红色表示<span class="number">8007</span>的节点id）。</span><br><span class="line"></span><br><span class="line">````/usr/local/redis<span class="number">-5.0</span><span class="number">.2</span>/src/redis-cli --cluster del-node <span class="number">192.168</span><span class="number">.0</span><span class="number">.64</span>:<span class="number">8007</span>  eb57a5700ee6f9ff099b3ce0d03b1a50ff247c3c</span><br></pre></td></tr></table></figure><p># 查看集群状态，一切还原为最初始状态啦！大功告成！</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image020.gif" alt="clipboard.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解Redis–集群部署&quot;&gt;&lt;a href=&quot;#深入理解Redis–集群部署&quot; class=&quot;headerlink&quot; title=&quot;深入理解Redis–集群部署&quot;&gt;&lt;/a&gt;深入理解Redis–集群部署&lt;/h1&gt;&lt;h2 id=&quot;一、启动集群&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="中间件" scheme="https://blog.deschen.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="redis" scheme="https://blog.deschen.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Redis--集群讲解</title>
    <link href="https://blog.deschen.cn/2019/07/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-%E9%9B%86%E7%BE%A4%E8%AE%B2%E8%A7%A3/"/>
    <id>https://blog.deschen.cn/2019/07/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-%E9%9B%86%E7%BE%A4%E8%AE%B2%E8%A7%A3/</id>
    <published>2019-07-20T00:41:38.000Z</published>
    <updated>2021-02-24T09:32:15.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis集群详解"><a href="#Redis集群详解" class="headerlink" title="Redis集群详解"></a>Redis集群详解</h1><h2 id="一、Redis有三种集群模式"><a href="#一、Redis有三种集群模式" class="headerlink" title="一、Redis有三种集群模式"></a>一、Redis有三种集群模式</h2><ul><li>主从模式</li><li>Sentinel模式( 哨兵模式 )</li><li>Cluster模式( 集群模式 )</li></ul><p>PS ：集群查看命令： <code>info replication</code> </p><h2 id="二、主从模式"><a href="#二、主从模式" class="headerlink" title="二、主从模式"></a>二、主从模式</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>主从模式是三种模式中最简单的，在主从复制中，数据库分为两类：主数据库(master)和从数据库(slave)。</p><h3 id="2、工作机制："><a href="#2、工作机制：" class="headerlink" title="2、工作机制："></a>2、工作机制：</h3><p>当slave启动后，主动向master发送SYNC命令。master接收到SYNC命令后在后台保存快照（RDB持久化）和缓存保存快照这段时间的命令，然后将保存的快照文件和缓存的命令发送给slave。slave接收到快照文件和命令后加载快照文件和缓存的执行命令。复制初始化后，master每次接收到的写命令都会同步发送给slave，保证主从数据一致性。</p><h3 id="3、优缺点"><a href="#3、优缺点" class="headerlink" title="3、优缺点"></a>3、优缺点</h3><ul><li>优点：<ul><li>1、高可靠性，主从实时备份，有效解决单节点数据丢失问题。</li><li>2、可做读写分离，从库分担读操作，缓解主库压力</li></ul></li><li>缺点：主库异常，需要手动主从切换</li></ul><h2 id="三、Sentinel模式"><a href="#三、Sentinel模式" class="headerlink" title="三、Sentinel模式"></a>三、Sentinel模式</h2><h3 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h3><p> 监控redis集群的运行状况 </p><h3 id="2、工作机制：-1"><a href="#2、工作机制：-1" class="headerlink" title="2、工作机制："></a>2、工作机制：</h3><ul><li><p>假设主节点宕机，第一个哨兵先检测到这个结果，第一个哨兵主标志为<strong>主观下线</strong>。</p></li><li><p>当后面的哨兵也检测到主节点为<strong>主观下线</strong>，并且数量达到一定值时，就会标志为<strong>客观下线</strong></p></li><li><p>在认为主节点<strong>客观下线</strong>的情况下,哨兵节点节点间会发起一次选举，如果超过半数以上的节点返回，则将该节点标记为leader的情况下，对<strong>故障的主节点</strong>所属的<strong>从节点中</strong>选取<strong>新的主节点</strong></p><p>当使用sentinel模式的时候，客户端就不要直接连接Redis，而是连接sentinel的ip和port，由sentinel来提供具体的可提供服务的Redis实现，这样当master节点挂掉以后，sentinel就会感知并将新的master节点提供给使用者。 </p></li></ul><h3 id="3、优缺点-1"><a href="#3、优缺点-1" class="headerlink" title="3、优缺点"></a>3、优缺点</h3><ul><li>优点：有效解决主从模式主库异常手动主从切换的问题</li><li>缺点：运维复杂，哨兵选举期间，不能对外提供服务</li></ul><h2 id="四、Cluster模式"><a href="#四、Cluster模式" class="headerlink" title="四、Cluster模式"></a>四、Cluster模式</h2><h3 id="1、介绍-2"><a href="#1、介绍-2" class="headerlink" title="1、介绍"></a>1、介绍</h3><p> redis集群是一个由多个主从节点群组成的分布式服务器群，它具有复制、高可用和分片特性。Redis集群不需要sentinel哨兵也能完成节点移除和故障转移的功能。  </p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1581473766762.png" alt="1581473766762"></p><h3 id="3、槽位"><a href="#3、槽位" class="headerlink" title="3、槽位"></a>3、槽位</h3><p>Redis Cluster 将所有数据划分为 <strong>16384</strong> 的 slots( 槽位 ）</p><p>当 Redis Cluster 的客户端来连接集群时，它也会得到一份集群的槽位配置信息并将其缓存在客户端本地。这样当客户端要查找某个 key 时，可以直接定位到目标节点。同时因为槽位的信息可能会存在客户端与服务器不一致的情况，还需要纠正机制来实现槽位信息的校验调整。</p><h3 id="4、槽位定位算法"><a href="#4、槽位定位算法" class="headerlink" title="4、槽位定位算法"></a>4、槽位定位算法</h3><p>Cluster 默认会对 key 值使用 crc16 算法进行 hash 得到一个整数值，然后用这个整数值对 16384 进行取模来得到具体槽位。</p><p>HASH_SLOT = CRC16(key) mod 16384</p><h3 id="5、跳转重定位"><a href="#5、跳转重定位" class="headerlink" title="5、跳转重定位"></a>5、跳转重定位</h3><p>当客户端向一个错误的节点发出了指令，该节点会发现指令的 key 所在的槽位并不归自己管理，这时它会向客户端发送一个特殊的跳转指令携带目标操作的节点地址，告诉客户端去连这个节点去获取数据。客户端收到指令后除了跳转到正确的节点上去操作，还会同步更新纠正本地的槽位映射表缓存，后续所有 key 将使用新的槽位映射表。</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1581474165999.png" alt="1581474165999"></p><h3 id="6、网络抖动"><a href="#6、网络抖动" class="headerlink" title="6、网络抖动"></a>6、网络抖动</h3><p>真实世界的机房网络往往并不是风平浪静的，它们经常会发生各种各样的小问题。比如网络抖动就是非常常见的一种现象，突然之间部分连接变得不可访问，然后很快又恢复正常。</p><p>为解决这种问题，Redis Cluster 提供了一种选项cluster-node-timeout，表示当某个节点持续 timeout 的时间失联时，才可以认定该节点出现故障，需要进行主从切换。如果没有这个选项，网络抖动会导致主从频繁切换 (数据的重新复制)。</p><h3 id="7、选举原理分析"><a href="#7、选举原理分析" class="headerlink" title="7、选举原理分析"></a>7、选举原理分析</h3><p>当slave发现自己的master变为FAIL状态时，便尝试进行Failover，以期成为新的master。由于挂掉的master可能会有多个slave，从而存在多个slave竞争成为master节点的过程， 其过程如下：</p><p>1.slave发现自己的master变为FAIL</p><p>2.将自己记录的集群cluster_current_epoch(选举周期)加1( 查看命令：<code>cluster info</code>)，并广播FAILOVER_AUTH_REQUEST 信息</p><p>3.其他节点收到该信息，只有master响应，判断请求者的合法性，并发送FAILOVER_AUTH_ACK，对每一个epoch只发送一次ack</p><p>4.尝试failover的slave收集FAILOVER_AUTH_ACK</p><p>5.超过半数后变成新Master</p><p>6.广播通知其他集群节点。</p><p>从节点并不是在主节点一进入 FAIL 状态就马上尝试发起选举，而是有一定延迟，一定的延迟确保我们等待FAIL状态在集群中传播，slave如果立即尝试选举，其它masters或许尚未意识到FAIL状态，可能会拒绝投票</p><p>延迟计算公式：</p><p> DELAY = 500ms + random(0 ~ 500ms) + SLAVE_RANK * 1000ms</p><p>•SLAVE_RANK表示此slave已经从master复制数据的总量的rank。Rank越小代表已复制的数据越新。这种方式下，持有最新数据的slave将会首先发起选举（理论上）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis集群详解&quot;&gt;&lt;a href=&quot;#Redis集群详解&quot; class=&quot;headerlink&quot; title=&quot;Redis集群详解&quot;&gt;&lt;/a&gt;Redis集群详解&lt;/h1&gt;&lt;h2 id=&quot;一、Redis有三种集群模式&quot;&gt;&lt;a href=&quot;#一、Redis有三种集
      
    
    </summary>
    
    
      <category term="中间件" scheme="https://blog.deschen.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="redis" scheme="https://blog.deschen.cn/tags/redis/"/>
    
  </entry>
  
</feed>
