<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式-中介者模式</title>
      <link href="/2022/02/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-中介者模式"><a href="#设计模式-中介者模式" class="headerlink" title="设计模式-中介者模式"></a>设计模式-中介者模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>中介者对象</strong>，<strong>封装一组对象</strong>，<strong>协调和管理</strong>调用者与对象之间的<strong>交互</strong>，减低对象间<strong>耦合度</strong></li><li>主要用途<ul><li>解耦对象之间的关系：如果交互关系发生变化，只需修改中介者对象，无需对对象进行处理</li><li>集中控制和管理对象交互，提高系统的可维护性和灵活性</li></ul></li><li>代码：中介者、交互的对象</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以消息通信为例：文件上传时，通知文件存储、搜索引擎、日志模块处理上传的文件</p></li><li><p>中介者：消息中介者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgMediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主题与消费者订阅关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Topic, List&lt;IConsumer&gt;&gt; subscribe;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MsgMediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        subscribe = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        subscribe.put(Topic.FILE_UPLOAD, <span class="keyword">new</span> ArrayList&lt;IConsumer&gt;() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                add(<span class="keyword">new</span> FileStorageConsumer());</span><br><span class="line">                add(<span class="keyword">new</span> FileSearchConsumer());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        subscribe.put(Topic.WRITE_LOG, <span class="keyword">new</span> ArrayList&lt;IConsumer&gt;()&#123;</span><br><span class="line">            &#123;</span><br><span class="line">                add(<span class="keyword">new</span> LogConsumer());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(Topic topic, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Topic, List&lt;IConsumer&gt;&gt; entry : subscribe.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getKey() == topic) &#123;</span><br><span class="line">                <span class="keyword">for</span> (IConsumer consumer : entry.getValue()) &#123;</span><br><span class="line">                    consumer.handle(topic, msg);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSubscribe</span><span class="params">(Topic topic, IConsumer consumer)</span> </span>&#123;</span><br><span class="line">        List&lt;IConsumer&gt; consumers = subscribe.get(topic);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == consumers) &#123;</span><br><span class="line">            consumers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        consumers.add(consumer);</span><br><span class="line">        subscribe.put(topic, consumers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>交互对象：消费者对象集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消费者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic 主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(Topic topic, String msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件搜索引擎消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSearchConsumer</span> <span class="keyword">implements</span> <span class="title">IConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Topic topic, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (topic) &#123;</span><br><span class="line">            <span class="keyword">case</span> FILE_UPLOAD:</span><br><span class="line">                handleUploadFile(msg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleUploadFile</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【FileSearchConsumer】将消息反序列化成对象"</span>);</span><br><span class="line">        System.out.println(<span class="string">"【FileSearchConsumer】根据对象参数，更新搜索引擎索引"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件存储消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileStorageConsumer</span> <span class="keyword">implements</span> <span class="title">IConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Topic topic, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (topic) &#123;</span><br><span class="line">            <span class="keyword">case</span> FILE_UPLOAD:</span><br><span class="line">                handleUploadFile(msg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleUploadFile</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【FileStorageConsumer】将消息反序列化成对象"</span>);</span><br><span class="line">        System.out.println(<span class="string">"【FileStorageConsumer】根据对象参数，保存文件到存储引擎，同时存储文件管理系统与存储引擎的关系"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogConsumer</span> <span class="keyword">implements</span> <span class="title">IConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Topic topic, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (topic) &#123;</span><br><span class="line">            <span class="keyword">case</span> WRITE_LOG:</span><br><span class="line">                writeLog(msg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeLog</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【LogConsumer】将消息反序列化成对象"</span>);</span><br><span class="line">        System.out.println(<span class="string">"【LogConsumer】根据对象参数，记录文件上传日志"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消息主题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Topic &#123;</span><br><span class="line"></span><br><span class="line">    FILE_UPLOAD,</span><br><span class="line"></span><br><span class="line">    WRITE_LOG,</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MsgMediator mediator = <span class="keyword">new</span> MsgMediator();</span><br><span class="line">        mediator.sendMsg(Topic.FILE_UPLOAD, <span class="string">"&#123;\"fileId\": 1,\"fileName\": \"resource.txt\",\"filePath\": \"/resources\",\"uploader\": \"张三\",\"uploadTime\": \"2022-02-17\"&#125;"</span>);</span><br><span class="line">        mediator.sendMsg(Topic.WRITE_LOG, <span class="string">"&#123;\"fileId\": 1,\"fileName\": \"resource.txt\",\"filePath\": \"/resources\",\"uploader\": \"张三\",\"uploadTime\": \"2022-02-17\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">【FileStorageConsumer】将消息反序列化成对象</span><br><span class="line">【FileStorageConsumer】根据对象参数，保存文件到存储引擎，同时存储文件管理系统与存储引擎的关系</span><br><span class="line">【FileSearchConsumer】将消息反序列化成对象</span><br><span class="line">【FileSearchConsumer】根据对象参数，更新搜索引擎索引</span><br><span class="line">【LogConsumer】将消息反序列化成对象</span><br><span class="line">【LogConsumer】根据对象参数，记录文件上传日志</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中介者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-访问者模式</title>
      <link href="/2022/02/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-访问者模式"><a href="#设计模式-访问者模式" class="headerlink" title="设计模式-访问者模式"></a>设计模式-访问者模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义<strong>访问者接口</strong>和<strong>一组具体的访问者类</strong>，将<strong>访问对象</strong> <strong>注入</strong> <strong>被访问者对象</strong>中，实现对被访问者对象的<strong>访问和操作</strong></li><li>主要用途：将数据结构和操作分离。通过新增访问者，不修改对被访问者结构情况下，实现新的功能</li><li>代码：访问者接口、一组具体访问者类、被访问者类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以患者病历在不同角色展示信息为例</p></li><li><p>访问者接口：角色访问病历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问病历信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(MedicalRecord record)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一组具体访问者类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 医生</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Doctor</span> <span class="keyword">implements</span> <span class="title">IVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(MedicalRecord record)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">"医生访问患者病历信息\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"姓名："</span>).append(record.getPatient().getName()).append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"身份证："</span>).append(record.getPatient().getIdCard()).append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"病情："</span>).append(record.getIllness()).append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"药方："</span>).append(record.getPrescription()).append(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(builder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 护士</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Nurse</span> <span class="keyword">implements</span> <span class="title">IVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(MedicalRecord record)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">"护士访问患者病历信息\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"姓名："</span>).append(record.getPatient().getName()).append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"身份证："</span>).append(record.getPatient().getIdCard()).append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"金额："</span>).append(record.getPatient().getAmount()).append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"药方："</span>).append(record.getPrescription()).append(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(builder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 患者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Patient</span> <span class="keyword">implements</span> <span class="title">IVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(MedicalRecord record)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">"患者访问患者病历信息\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"姓名："</span>).append(record.getPatient().getName()).append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"身份证："</span>).append(record.getPatient().getIdCard()).append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"地址："</span>).append(record.getPatient().getAddress()).append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"金额："</span>).append(record.getPatient().getAmount()).append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"病情："</span>).append(record.getIllness()).append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"药方："</span>).append(record.getPrescription()).append(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(builder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>被访问者类：患者病历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MedicalRecord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PatientInfo patientInfo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String illness;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String prescription;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(IVisitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PatientInfo <span class="title">getPatient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> patientInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPatient</span><span class="params">(PatientInfo patientInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.patientInfo = patientInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIllness</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> illness;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIllness</span><span class="params">(String illness)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.illness = illness;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prescription;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrescription</span><span class="params">(String prescription)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prescription = prescription;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PatientInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String idCard;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Long amount;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getIdCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> idCard;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdCard</span><span class="params">(String idCard)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.idCard = idCard;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> address;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.address = address;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">getAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(Long amount)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.amount = amount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MedicalRecord record = <span class="keyword">new</span> MedicalRecord();</span><br><span class="line">        MedicalRecord.PatientInfo patientInfo = <span class="keyword">new</span> MedicalRecord.PatientInfo();</span><br><span class="line">        patientInfo.setName(<span class="string">"张三"</span>);</span><br><span class="line">        patientInfo.setIdCard(<span class="string">"440582199902020202"</span>);</span><br><span class="line">        patientInfo.setAddress(<span class="string">"XX省XX市XX区XX"</span>);</span><br><span class="line">        patientInfo.setAmount(<span class="number">100000000L</span>);</span><br><span class="line">        record.setPatient(patientInfo);</span><br><span class="line">        record.setIllness(<span class="string">"感冒"</span>);</span><br><span class="line">        record.setPrescription(<span class="string">"感冒药"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 同一份数据，针对不同角色，展示不同信息</span></span><br><span class="line"><span class="comment">         * 医生：患者姓名、身份证、病情、药方</span></span><br><span class="line"><span class="comment">         * 护士：患者姓名、身份证、金额、药方</span></span><br><span class="line"><span class="comment">         * 患者：患者姓名、身份证、地址、金额、病情、药方</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        IVisitor visitor = <span class="keyword">new</span> Doctor();</span><br><span class="line">        record.accept(visitor);</span><br><span class="line"></span><br><span class="line">        visitor = <span class="keyword">new</span> Nurse();</span><br><span class="line">        record.accept(visitor);</span><br><span class="line"></span><br><span class="line">        visitor = <span class="keyword">new</span> Patient();</span><br><span class="line">        record.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">医生访问患者病历信息</span><br><span class="line">姓名：张三</span><br><span class="line">身份证：<span class="number">440582199902020202</span></span><br><span class="line">病情：感冒</span><br><span class="line">药方：感冒药</span><br><span class="line"></span><br><span class="line">护士访问患者病历信息</span><br><span class="line">姓名：张三</span><br><span class="line">身份证：<span class="number">440582199902020202</span></span><br><span class="line">金额：<span class="number">100000000</span></span><br><span class="line">药方：感冒药</span><br><span class="line"></span><br><span class="line">患者访问患者病历信息</span><br><span class="line">姓名：张三</span><br><span class="line">身份证：<span class="number">440582199902020202</span></span><br><span class="line">地址：XX省XX市XX区XX</span><br><span class="line">金额：<span class="number">100000000</span></span><br><span class="line">病情：感冒</span><br><span class="line">药方：感冒药</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 访问者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-解释器模式</title>
      <link href="/2022/02/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-解释器模式"><a href="#设计模式-解释器模式" class="headerlink" title="设计模式-解释器模式"></a>设计模式-解释器模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：用于<strong>解析</strong>和<strong>解释</strong> <strong>语言</strong>的行为模式。定义统一<strong>解释</strong>的<strong>抽象类解释器接口</strong>，以及<strong>终结符解释器</strong>和<strong>非终结符解释器</strong>两种实现类。终结符解释器解释<strong>无法再分解的语言单元</strong>，非终结符解释器解释<strong>由终结符组成的语法规则</strong>，如表达式等。结合<strong>提供全局信息的上下文</strong>对语言进行解析和解释</li><li>主要用途：<ul><li>解析和解释语法规则，通过解释器逐个解释和执行规则</li><li>新增或者修改原有规则时，只需扩展新的解释器，无需修改原有代码</li></ul></li><li>代码：抽象类解释器、终止符解释器、非终止符解释器、提供全局信息的上下文</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><blockquote><p>案例参考《设计模式就该这样学》</p></blockquote><ul><li><p>以数字运算表达式为例：计算表达式的值</p></li><li><p>抽象类解释器：输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpreter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>终结符解释器：输出数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumberExpression</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpreter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>非终结符表达式：输出两个数字运算结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左操作数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Expression leftOperand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右边操作数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Expression rightOperand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String operator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryExpression</span><span class="params">(Expression leftOperand, String operator, Expression rightOperand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftOperand = leftOperand;</span><br><span class="line">        <span class="keyword">this</span>.operator = operator;</span><br><span class="line">        <span class="keyword">this</span>.rightOperand = rightOperand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpreter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operator) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                <span class="keyword">return</span> leftOperand.interpreter() + rightOperand.interpreter();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                <span class="keyword">return</span> leftOperand.interpreter() - rightOperand.interpreter();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                <span class="keyword">return</span> leftOperand.interpreter() * rightOperand.interpreter();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"/"</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == rightOperand.interpreter()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"被除数不能为0"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> leftOperand.interpreter() / rightOperand.interpreter();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"非法运算符: "</span> + operator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供全局信息的上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.deschen.designPattern.interpreter.expression;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> hanbin_chen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 算法上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathExpressionContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作数栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Expression&gt; numberStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;String&gt; operatorStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算表达式的值</span></span><br><span class="line"><span class="comment">     * 有括号先算括号里面的，在乘除，后加减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expression</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String expression)</span> </span>&#123;</span><br><span class="line">        numberStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        operatorStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表达式按照空格切割成字符</span></span><br><span class="line">        String[] symbols = formatExpression(expression).split(<span class="string">"\\s+"</span>);</span><br><span class="line">        <span class="comment">// 遍历字符</span></span><br><span class="line">        <span class="keyword">for</span> (String symbol : symbols) &#123;</span><br><span class="line">            <span class="comment">// 如果是数值，则入操作数栈</span></span><br><span class="line">            <span class="keyword">if</span> (isNumber(symbol)) &#123;</span><br><span class="line">                numberStack.push(<span class="keyword">new</span> NumberExpression(Integer.valueOf(symbol)));</span><br><span class="line">                System.out.println(<span class="string">"操作数入栈："</span> + symbol);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果是加减法</span></span><br><span class="line"><span class="comment">             * 1、如果前面有加减乘除，计算前面的表达式，更新操作符栈和操作数栈</span></span><br><span class="line"><span class="comment">             * 2、把操作符在入栈</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">            <span class="keyword">if</span> (isAdd(symbol) || isSub(symbol)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!operatorStack.isEmpty() &amp;&amp; (</span><br><span class="line">                        isAdd(operatorStack.peek()) || isSub(operatorStack.peek()) || isMulti(operatorStack.peek()) || isDiv(operatorStack.peek())</span><br><span class="line">                )) &#123;</span><br><span class="line">                    calculate(numberStack, operatorStack);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 操作符入栈</span></span><br><span class="line">                operatorStack.push(symbol);</span><br><span class="line">                System.out.println(<span class="string">"操作符入栈："</span> + symbol);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果是乘除</span></span><br><span class="line"><span class="comment">             * 1、如果操作符栈有乘除，计算前面表达式，更新操作符栈和操作数栈</span></span><br><span class="line"><span class="comment">             * 2、把操作符入栈</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (isMulti(symbol) || isDiv(symbol)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!operatorStack.isEmpty() &amp;&amp; (</span><br><span class="line">                        isMulti(operatorStack.peek()) || isDiv(operatorStack.peek())</span><br><span class="line">                )) &#123;</span><br><span class="line">                    calculate(numberStack, operatorStack);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 操作符入栈</span></span><br><span class="line">                operatorStack.push(symbol);</span><br><span class="line">                System.out.println(<span class="string">"操作符入栈："</span> + symbol);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果是左括号，则不做处理，直接入栈</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (isLeftBracket(symbol)) &#123;</span><br><span class="line">                <span class="comment">// 操作符入栈</span></span><br><span class="line">                operatorStack.push(symbol);</span><br><span class="line">                System.out.println(<span class="string">"操作符入栈："</span> + symbol);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果是有括号</span></span><br><span class="line"><span class="comment">             * 操作数栈出栈，直到左括号，计算括号里面的表达式</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (isRightBracket(symbol)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!isLeftBracket(operatorStack.peek())) &#123;</span><br><span class="line">                    calculate(numberStack, operatorStack);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 操作符出栈</span></span><br><span class="line">                String operator = operatorStack.pop();</span><br><span class="line">                System.out.println(<span class="string">"操作符出栈："</span> + operator);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 计算转换后的表达式</span></span><br><span class="line"><span class="comment">         * 因为转换后的表达式，已经把优先级高的执行完了，剩下的都是同级的，所以从右到左计算是不影响结果</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (!operatorStack.isEmpty()) &#123;</span><br><span class="line">            calculate(numberStack, operatorStack);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> numberStack.pop().interpreter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化表达式，使运算符和括号前后加入空格</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expression</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">formatExpression</span><span class="params">(String expression)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expression.replaceAll(<span class="string">"([+\\-*/()])"</span>, <span class="string">" $1 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算最新录入的表达式的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> numberStack 操作数栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operatorStack 操作符栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(Stack&lt;Expression&gt; numberStack, Stack&lt;String&gt; operatorStack)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 计算前面表达式</span></span><br><span class="line">        Expression rightNumber = numberStack.pop();</span><br><span class="line">        Expression leftNumber = numberStack.pop();</span><br><span class="line">        String operator = operatorStack.pop();</span><br><span class="line">        <span class="comment">// 计算值入栈</span></span><br><span class="line">        numberStack.push(<span class="keyword">new</span> BinaryExpression(leftNumber, operator, rightNumber));</span><br><span class="line">        System.out.println(<span class="string">"操作数出栈："</span> + leftNumber.interpreter());</span><br><span class="line">        System.out.println(<span class="string">"操作数出栈："</span> + rightNumber.interpreter());</span><br><span class="line">        System.out.println(<span class="string">"操作符出栈："</span> + operator);</span><br><span class="line">        System.out.println(<span class="string">"操作数入栈："</span> + numberStack.peek().interpreter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是加法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAdd</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">"+"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是减法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSub</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">"-"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是乘法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMulti</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是除法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isDiv</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是左括号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLeftBracket</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">"("</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是右括号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRightBracket</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.matches(<span class="string">"\\d+"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isOperator</span><span class="params">(<span class="keyword">char</span> symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MathExpressionContext context = <span class="keyword">new</span> MathExpressionContext();</span><br><span class="line">        String expression = <span class="string">"1-2+3-4+5*(6/2*7+(8*9))-10*11-12"</span>;</span><br><span class="line">        <span class="keyword">int</span> result = context.calculate(expression);</span><br><span class="line">        System.out.println(<span class="string">"Result: "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">操作数入栈：<span class="number">1</span></span><br><span class="line">操作符入栈：-</span><br><span class="line">操作数入栈：<span class="number">2</span></span><br><span class="line">操作数出栈：<span class="number">1</span></span><br><span class="line">操作数出栈：<span class="number">2</span></span><br><span class="line">操作符出栈：-</span><br><span class="line">操作数入栈：-<span class="number">1</span></span><br><span class="line">操作符入栈：+</span><br><span class="line">操作数入栈：<span class="number">3</span></span><br><span class="line">操作数出栈：-<span class="number">1</span></span><br><span class="line">操作数出栈：<span class="number">3</span></span><br><span class="line">操作符出栈：+</span><br><span class="line">操作数入栈：<span class="number">2</span></span><br><span class="line">操作符入栈：-</span><br><span class="line">操作数入栈：<span class="number">4</span></span><br><span class="line">操作数出栈：<span class="number">2</span></span><br><span class="line">操作数出栈：<span class="number">4</span></span><br><span class="line">操作符出栈：-</span><br><span class="line">操作数入栈：-<span class="number">2</span></span><br><span class="line">操作符入栈：+</span><br><span class="line">操作数入栈：<span class="number">5</span></span><br><span class="line">操作符入栈：*</span><br><span class="line">操作符入栈：(</span><br><span class="line">操作数入栈：<span class="number">6</span></span><br><span class="line">操作符入栈：/</span><br><span class="line">操作数入栈：<span class="number">2</span></span><br><span class="line">操作数出栈：<span class="number">6</span></span><br><span class="line">操作数出栈：<span class="number">2</span></span><br><span class="line">操作符出栈：/</span><br><span class="line">操作数入栈：<span class="number">3</span></span><br><span class="line">操作符入栈：*</span><br><span class="line">操作数入栈：<span class="number">7</span></span><br><span class="line">操作数出栈：<span class="number">3</span></span><br><span class="line">操作数出栈：<span class="number">7</span></span><br><span class="line">操作符出栈：*</span><br><span class="line">操作数入栈：<span class="number">21</span></span><br><span class="line">操作符入栈：+</span><br><span class="line">操作符入栈：(</span><br><span class="line">操作数入栈：<span class="number">8</span></span><br><span class="line">操作符入栈：*</span><br><span class="line">操作数入栈：<span class="number">9</span></span><br><span class="line">操作数出栈：<span class="number">8</span></span><br><span class="line">操作数出栈：<span class="number">9</span></span><br><span class="line">操作符出栈：*</span><br><span class="line">操作数入栈：<span class="number">72</span></span><br><span class="line">操作符出栈：(</span><br><span class="line">操作数出栈：<span class="number">21</span></span><br><span class="line">操作数出栈：<span class="number">72</span></span><br><span class="line">操作符出栈：+</span><br><span class="line">操作数入栈：<span class="number">93</span></span><br><span class="line">操作符出栈：(</span><br><span class="line">操作数出栈：<span class="number">5</span></span><br><span class="line">操作数出栈：<span class="number">93</span></span><br><span class="line">操作符出栈：*</span><br><span class="line">操作数入栈：<span class="number">465</span></span><br><span class="line">操作数出栈：-<span class="number">2</span></span><br><span class="line">操作数出栈：<span class="number">465</span></span><br><span class="line">操作符出栈：+</span><br><span class="line">操作数入栈：<span class="number">463</span></span><br><span class="line">操作符入栈：-</span><br><span class="line">操作数入栈：<span class="number">10</span></span><br><span class="line">操作符入栈：*</span><br><span class="line">操作数入栈：<span class="number">11</span></span><br><span class="line">操作数出栈：<span class="number">10</span></span><br><span class="line">操作数出栈：<span class="number">11</span></span><br><span class="line">操作符出栈：*</span><br><span class="line">操作数入栈：<span class="number">110</span></span><br><span class="line">操作数出栈：<span class="number">463</span></span><br><span class="line">操作数出栈：<span class="number">110</span></span><br><span class="line">操作符出栈：-</span><br><span class="line">操作数入栈：<span class="number">353</span></span><br><span class="line">操作符入栈：-</span><br><span class="line">操作数入栈：<span class="number">12</span></span><br><span class="line">操作数出栈：<span class="number">353</span></span><br><span class="line">操作数出栈：<span class="number">12</span></span><br><span class="line">操作符出栈：-</span><br><span class="line">操作数入栈：<span class="number">341</span></span><br><span class="line">输出结果: <span class="number">341</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解释器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-状态模式</title>
      <link href="/2022/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-状态模式"><a href="#设计模式-状态模式" class="headerlink" title="设计模式-状态模式"></a>设计模式-状态模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义提供<strong>行为</strong>的<strong>状态接口</strong>，对象根据<strong>内部状态不同</strong>，<strong>改变其执行行为</strong></li><li>主要用途：<ul><li>对象多个状态且不同状态之间转换，执行不同的行为</li><li>避免大量条件判断</li></ul></li><li>代码：状态接口、封装行为的状态、包含状态的对象</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>订单状态转换为例：待支付 -&gt; 已支付 -&gt; 待发货 -&gt; 已发货 -&gt; 已完成</p></li><li><p>状态接口：订单状态接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行对应状态的行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体行为的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 待支付</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingPayState</span> <span class="keyword">implements</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行待支付逻辑"</span>);</span><br><span class="line">        System.out.println(<span class="string">"更新订单状态为：已支付"</span>);</span><br><span class="line">        order.setState(<span class="keyword">new</span> PaidState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已支付</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaidState</span> <span class="keyword">implements</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行已支付逻辑"</span>);</span><br><span class="line">        System.out.println(<span class="string">"更新订单状态：待发货"</span>);</span><br><span class="line">        order.setState(<span class="keyword">new</span> PendingShipState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 待发货</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingShipState</span> <span class="keyword">implements</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行待发货逻辑"</span>);</span><br><span class="line">        System.out.println(<span class="string">"更新订单状态：已发货"</span>);</span><br><span class="line">        order.setState(<span class="keyword">new</span> ShippedState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已发货</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShippedState</span> <span class="keyword">implements</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行已发货逻辑"</span>);</span><br><span class="line">        System.out.println(<span class="string">"更新订单状态：已完成"</span>);</span><br><span class="line">        order.setState(<span class="keyword">new</span> CompleteState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已完成</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompleteState</span> <span class="keyword">implements</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行已完成逻辑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包含状态的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OrderState state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">new</span> PendingPayState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.execute(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(OrderState state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order = <span class="keyword">new</span> Order(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        order.process();</span><br><span class="line">        order.process();</span><br><span class="line">        order.process();</span><br><span class="line">        order.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">执行待支付逻辑</span><br><span class="line">更新订单状态为：已支付</span><br><span class="line">执行已支付逻辑</span><br><span class="line">更新订单状态：待发货</span><br><span class="line">执行待发货逻辑</span><br><span class="line">更新订单状态：已发货</span><br><span class="line">执行已发货逻辑</span><br><span class="line">更新订单状态：已完成</span><br><span class="line">执行已完成逻辑</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状态模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-命令模式</title>
      <link href="/2022/02/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-命令模式"><a href="#设计模式-命令模式" class="headerlink" title="设计模式-命令模式"></a>设计模式-命令模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：将<strong>请求</strong>封装成<strong>命令对象</strong>，使<strong>发送者</strong>和<strong>接收者</strong>解耦，不需要了解<strong>执行细节</strong></li><li>主要用途：<ul><li>解耦请求发送者和接收者，发送者只需发送命令，这只需执行命令，不需要了解执行细节</li><li>支持请求的排队、记录、撤销和重做等操作</li><li>提供了一种可扩展的方式来组织和管理命令。方便添加和移除命令，无需改动现有代码</li></ul></li><li>代码：命令接口、具体命令、命令队列（按需）</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件版本保存和回退为例，结合<strong>文件备忘录案例</strong></p></li><li><p>命令接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**     * 执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 撤回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体命令：上传文件，同一文件标识上传，会覆盖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadFileCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileManager fileManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File file;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UploadFileCommand</span><span class="params">(FileManager fileManager, File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileManager = fileManager;</span><br><span class="line">        <span class="keyword">this</span>.file = file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fileManager.uploadFile(file);</span><br><span class="line">        System.out.println(<span class="string">"上次文件："</span> + file.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileMemento lastVersion = fileManager.rollbackPreVersion(file.getFileId());</span><br><span class="line">        file.restoreFromMemento(lastVersion);</span><br><span class="line">        System.out.println(<span class="string">"撤回上一版文件："</span> + file.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命令队列：保存命令集合，使其顺序执行或撤回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Command&gt; queue = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        queue.add(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeCommands</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Command command : queue) &#123;</span><br><span class="line">            command.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undoReverseCommands</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = queue.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            queue.get(i).undo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileManager fileManager = <span class="keyword">new</span> FileManagerImpl();</span><br><span class="line">        CommandQueue commandQueue = <span class="keyword">new</span> CommandQueue();</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="number">1L</span>, <span class="string">"test.doc"</span>, <span class="number">1024L</span>, <span class="string">"Hello World Version"</span>, <span class="string">"张三"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1L</span>; i &lt;= <span class="number">10L</span>; i++) &#123;</span><br><span class="line">            File uploadFile = <span class="keyword">new</span> File(<span class="number">1L</span>, <span class="string">"test"</span> + i + <span class="string">".doc"</span>, <span class="number">1024L</span>, <span class="string">"Hello World Version"</span> + i, <span class="string">"张三"</span>);</span><br><span class="line">            System.out.println(<span class="string">"第"</span> + i + <span class="string">"版文件: "</span> + uploadFile.toString());</span><br><span class="line">            UploadFileCommand uploadFileCommand = <span class="keyword">new</span> UploadFileCommand(fileManager, uploadFile);</span><br><span class="line">            commandQueue.addCommand(uploadFileCommand);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========队列执行命令==========="</span>);</span><br><span class="line">        commandQueue.executeCommands();</span><br><span class="line">        file.restoreFromMemento(fileManager.getLastVersion(file.getFileId()));</span><br><span class="line">        System.out.println(<span class="string">"当前文件："</span> + file.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        测试时，二选一，因为公用一个file，会受到上一个版本影响</span></span><br><span class="line"><span class="comment">//        System.out.println("=========队列执行撤销命令===========");</span></span><br><span class="line"><span class="comment">//        commandQueue.undoReverseCommands();</span></span><br><span class="line"><span class="comment">//        file.restoreFromMemento(fileManager.getLastVersion(file.getFileId()));</span></span><br><span class="line"><span class="comment">//        System.out.println("当前文件：" + file.toString());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">第<span class="number">1</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test1.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version1'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">2</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test2.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version2'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">3</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test3.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version3'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">4</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test4.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version4'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">5</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test5.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version5'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">6</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test6.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version6'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">7</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test7.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version7'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">8</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test8.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version8'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">9</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test9.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version9'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">第<span class="number">10</span>版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test10.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version10'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">=========队列执行撤销命令===========</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test10.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version10'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test9.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version9'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test8.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version8'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test7.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version7'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test6.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version6'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test5.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version5'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test4.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version4'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test3.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version3'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test2.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version2'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test1.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version1'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">当前文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line"></span><br><span class="line">=========队列执行撤销命令===========</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test10.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version10'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test9.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version9'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test8.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version8'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test7.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version7'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test6.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version6'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test5.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version5'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test4.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version4'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test3.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version3'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test2.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version2'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">撤回上一版文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test1.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version1'</span>, operator=<span class="string">'张三'</span>&#125;</span><br><span class="line">当前文件：File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World Version'</span>, operator=<span class="string">'张三'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-备份录模式</title>
      <link href="/2022/02/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E4%BB%BD%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E4%BB%BD%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-备份录模式"><a href="#设计模式-备份录模式" class="headerlink" title="设计模式-备份录模式"></a>设计模式-备份录模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个封装<strong>对象内部状态</strong>的<strong>备份类</strong>，通过<strong>管理者</strong> <strong>保存和恢复对象的状态</strong></li><li>主要用途：<ul><li>提供对象快照和恢复机制，不破坏对象的情况下，保存和恢复对象状态。例如：文件版本保存和撤回</li><li>支持对象的撤销和重做机制</li><li>提供对象状态的历史记录</li></ul></li><li>代码：待备份类、备份类、管理者</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件版本保存和回退为例</p></li><li><p>带备份对象：文件类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long fileId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> fileSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作人&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 这里加这个字段，主要表示为什么&lt;b&gt;备份类不直接继承被备份的类&lt;/b&gt;：因为备份类主要是&lt;b&gt;备份应该备份的内容&lt;/b&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String operator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(Long fileId, String fileName, <span class="keyword">long</span> fileSize, String content, String operator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileId = fileId;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.operator = operator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileMemento <span class="title">backup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileMemento(fileId, fileName, fileSize, content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreFromMemento</span><span class="params">(FileMemento fileMemento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fileMemento) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.fileId = fileMemento.getFileId();</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileMemento.getFileName();</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileMemento.getFileSize();</span><br><span class="line">        <span class="keyword">this</span>.content = fileMemento.getContent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getFileId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileId</span><span class="params">(Long fileId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileId = fileId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFileSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileSize</span><span class="params">(<span class="keyword">long</span> fileSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"File&#123;"</span> +</span><br><span class="line">                <span class="string">"fileId="</span> + fileId +</span><br><span class="line">                <span class="string">", fileName='"</span> + fileName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", fileSize="</span> + fileSize +</span><br><span class="line">                <span class="string">", content='"</span> + content + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", operator='"</span> + operator + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>备份类：备份文件名字、内容等，添加备份标识（属于哪个文件、备份时间）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMemento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long fileId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> fileSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备份时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileMemento</span><span class="params">(Long fileId, String fileName, <span class="keyword">long</span> fileSize, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileId = fileId;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getFileId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileId</span><span class="params">(Long fileId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileId = fileId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFileSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileSize</span><span class="params">(<span class="keyword">long</span> fileSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimestamp</span><span class="params">(Date timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FileMemento&#123;"</span> +</span><br><span class="line">                <span class="string">", timestamp="</span> + timestamp +</span><br><span class="line">                <span class="string">"&#125; "</span> + <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>管理者：保存和恢复对象状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管理者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * 保存文件并备份</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(File file)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取最新一版文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileId 文件标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">FileMemento <span class="title">getLastVersion</span><span class="params">(Long fileId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚到上一版本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileId 文件标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">FileMemento <span class="title">rollbackPreVersion</span><span class="params">(Long fileId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileManagerImpl</span> <span class="keyword">implements</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, File&gt; FILE_STORAGE = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, List&lt;FileMemento&gt;&gt; FILE_MEMENTO_STORAGE = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        FILE_STORAGE.put(file.getFileId(), file);</span><br><span class="line">        List&lt;FileMemento&gt; fileMementos = FILE_MEMENTO_STORAGE.get(file.getFileId());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fileMementos) &#123;</span><br><span class="line">            fileMementos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        fileMementos.add(file.backup());</span><br><span class="line">        FILE_MEMENTO_STORAGE.put(file.getFileId(), fileMementos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileMemento <span class="title">getLastVersion</span><span class="params">(Long fileId)</span> </span>&#123;</span><br><span class="line">        List&lt;FileMemento&gt; fileMementos = FILE_MEMENTO_STORAGE.get(fileId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fileMementos || fileMementos.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileMementos.get(fileMementos.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileMemento <span class="title">rollbackPreVersion</span><span class="params">(Long fileId)</span> </span>&#123;</span><br><span class="line">        List&lt;FileMemento&gt; fileMementos = FILE_MEMENTO_STORAGE.get(fileId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fileMementos || fileMementos.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileMemento fileMemento = fileMementos.remove(fileMementos.size() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fileMemento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileManager fileManager = <span class="keyword">new</span> FileManagerImpl();</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="number">1L</span>, <span class="string">"test.doc"</span>, <span class="number">1024L</span>, <span class="string">"Hello World"</span>, <span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(<span class="string">"第一版文件: "</span> + file.toString());</span><br><span class="line">        fileManager.uploadFile(file);</span><br><span class="line">        <span class="comment">// 修改文件名</span></span><br><span class="line">        file.setContent(<span class="string">"Yes I can"</span>);</span><br><span class="line">        fileManager.uploadFile(file);</span><br><span class="line">        System.out.println(<span class="string">"第二版文件: "</span> + file.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上一版文件</span></span><br><span class="line">        FileMemento lastVersion = fileManager.getLastVersion(file.getFileId());</span><br><span class="line">        file.restoreFromMemento(lastVersion);</span><br><span class="line">        System.out.println(<span class="string">"上一版文件: "</span> + file.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">第一版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World'</span>&#125;</span><br><span class="line">第二版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Yes I can'</span>&#125;</span><br><span class="line">上一版文件: File&#123;fileId=<span class="number">1</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=<span class="string">'Hello World'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备份录模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-职责链模式</title>
      <link href="/2022/02/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-职责链模式"><a href="#设计模式-职责链模式" class="headerlink" title="设计模式-职责链模式"></a>设计模式-职责链模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>抽象处理器</strong> 和 <strong>多个具体处理器</strong>，构建<strong>链结构</strong>，将请求<strong>处理和传递</strong>给下一个处理器</li><li>主要用途：<ul><li>解耦发送者和接口者，提高代码的灵活和可维护性</li><li>根据具体场景，灵活配置处理链，无需修改已有代码</li></ul></li><li>代码：抽象类处理器、具体处理器</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件上传服务为例：上传文件前，需要校验参数是否合理、是否有权限上传、是否存在病毒等</p></li><li><p>抽象类处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> FileHandler nextHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加下一个文件处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileHandler 文件处理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextHandler</span><span class="params">(FileHandler fileHandler)</span> </span>&#123;</span><br><span class="line">        nextHandler = fileHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主要逻辑</span></span><br><span class="line"><span class="comment">     * 1、处理这个处理器自身逻辑</span></span><br><span class="line"><span class="comment">     * 2、下一个处理器处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleFile</span><span class="params">(File file)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileHandler <span class="title">getNextHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理链</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileProcessChain</span> <span class="keyword">extends</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加下一个处理器，构建成链</span></span><br><span class="line"><span class="comment">     * 不同于其他处理器，其他处理器只需添加下一个处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileHandler 文件处理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextHandler</span><span class="params">(FileHandler fileHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == nextHandler) &#123;</span><br><span class="line">            nextHandler = fileHandler;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            FileHandler currentHandler = nextHandler;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">null</span> != currentHandler.getNextHandler()) &#123;</span><br><span class="line">                currentHandler = nextHandler.getNextHandler();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            currentHandler.setNextHandler(fileHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断下一个处理是否存在</span></span><br><span class="line"><span class="comment">     *      不存在，则跳过</span></span><br><span class="line"><span class="comment">     *      存在，则下一个处理器处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == nextHandler) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nextHandler.handleFile(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateParamFileHandler</span> <span class="keyword">extends</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件参数校验 file: "</span> + file.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != nextHandler) &#123;</span><br><span class="line">            nextHandler.handleFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//权限处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionFileHandler</span> <span class="keyword">extends</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、获取用户信息</span></span><br><span class="line"><span class="comment">     * 2、判断该用户是否有操作该文件夹的权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前用户是否有权限操作"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != nextHandler) &#123;</span><br><span class="line">            nextHandler.handleFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 病毒扫描处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VirusScanFileHandler</span> <span class="keyword">extends</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件病毒扫描"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != nextHandler) &#123;</span><br><span class="line">            nextHandler.handleFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServiceImpl</span> <span class="keyword">implements</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件服务：上传文件 文件路径："</span> + filePath + <span class="string">" 文件名："</span> + fileName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File();</span><br><span class="line">        file.setFilePath(<span class="string">"/resources"</span>);</span><br><span class="line">        file.setFileName(<span class="string">"test.doc"</span>);</span><br><span class="line">        file.setFileSize(<span class="number">10000L</span>);</span><br><span class="line">        file.setContent(<span class="string">"Hello World"</span>);</span><br><span class="line"></span><br><span class="line">        FileProcessChain fileProcessChain = <span class="keyword">new</span> FileProcessChain();</span><br><span class="line">        fileProcessChain.setNextHandler(<span class="keyword">new</span> ValidateParamFileHandler());</span><br><span class="line">        fileProcessChain.setNextHandler(<span class="keyword">new</span> PermissionFileHandler());</span><br><span class="line">        fileProcessChain.setNextHandler(<span class="keyword">new</span> VirusScanFileHandler());</span><br><span class="line"></span><br><span class="line">        fileProcessChain.handleFile(file);</span><br><span class="line"></span><br><span class="line">        FileService fileService = <span class="keyword">new</span> FileServiceImpl();</span><br><span class="line">        fileService.uploadFile(file.getFilePath(), file.getFileName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">文件参数校验 file: File&#123;filePath=<span class="string">'/resources'</span>, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">10000</span>, content=Hello World&#125;</span><br><span class="line">当前用户是否有权限操作</span><br><span class="line">文件病毒扫描</span><br><span class="line">文件服务：上传文件 文件路径：/resources 文件名：test.doc</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职责链模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-迭代器模式</title>
      <link href="/2022/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-迭代器模式"><a href="#设计模式-迭代器模式" class="headerlink" title="设计模式-迭代器模式"></a>设计模式-迭代器模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>迭代器接口</strong>，和<strong>特定规则的对象的迭起器</strong>，根据其规则<strong>遍历对象</strong></li><li>主要用途：<ul><li>用于遍历聚合对象的场景，例如：图书馆的书籍</li><li>复杂数据结构遍历，例如：树形结构（文件树）</li></ul></li><li>优势：将对象实现和编辑逻辑分离，提供统一接口，简化对集合对象操作和管理</li><li>代码：迭代器接口、对象迭代器实现</li><li>PS：迭代器接口可以是<code>JDK</code>提供的<code>java.util.Iterator</code> 或者自定义</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件树的遍历，两种遍历模式</p><ul><li>先序遍历文件树</li><li>根据指定文件名，向上遍历其父文件，到根文件结束</li></ul></li><li><p>迭代器：采用JDK自带的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先序遍历迭代器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptPreorderIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Dept</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dept&gt; depts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Iterator&lt;Dept&gt;&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptPreorderIterator</span><span class="params">(List&lt;Dept&gt; depts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.depts = depts;</span><br><span class="line">        <span class="comment">// 初始化栈，顶级部门迭代器 入栈</span></span><br><span class="line">        Dept root = root(depts);</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != root) &#123;</span><br><span class="line">            stack.push(Collections.singletonList(root).iterator());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取顶级部门</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> depts</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Dept <span class="title">root</span><span class="params">(List&lt;Dept&gt; depts)</span> </span>&#123;</span><br><span class="line">        Dept root = <span class="keyword">null</span>;</span><br><span class="line">        Iterator&lt;Dept&gt; deptItr = depts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (deptItr.hasNext()) &#123;</span><br><span class="line">            Dept dept = deptItr.next();</span><br><span class="line">            <span class="keyword">if</span> (dept.isRoot()) &#123;</span><br><span class="line">                root = dept;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断有没有下一个子节点集合迭代器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先判断栈是否有值，如果没有，则返回false，因为没有起点迭代器</span></span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 判断该迭代器是否存在部门，如果没有，则迭代器出栈（证明上一个部门到底了），获取上一个栈的迭代器（上一个部门的父部门迭代器，用于遍历同级部门）</span></span><br><span class="line">            Iterator&lt;Dept&gt; currentItr = stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (!currentItr.hasNext()) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">return</span> hasNext();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNext()) &#123;</span><br><span class="line">            Iterator&lt;Dept&gt; deptItr = stack.peek();</span><br><span class="line">            Dept dept = deptItr.next();</span><br><span class="line">            <span class="comment">// 获取该部门是否有子部门集合，有值则入栈（栈是先进后出，后进先执行，这里是为了遍历其子部门），无值证明该部门到底了</span></span><br><span class="line">            List&lt;Dept&gt; children = children(dept);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != children &amp;&amp; children.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                stack.push(children.iterator());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dept;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"部门集合没有顶级部门，无法遍历"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定部门的子部门集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 指定部门</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Dept&gt; <span class="title">children</span><span class="params">(Dept parent)</span> </span>&#123;</span><br><span class="line">        List&lt;Dept&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Iterator&lt;Dept&gt; deptItr = <span class="keyword">this</span>.depts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (deptItr.hasNext()) &#123;</span><br><span class="line">            Dept dept = deptItr.next();</span><br><span class="line">            <span class="keyword">if</span> (parent.getId().equals(dept.getParentId())) &#123;</span><br><span class="line">                children.add(dept);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上遍历迭代器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptUpwardIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Dept</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dept&gt; depts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dept current;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptUpwardIterator</span><span class="params">(List&lt;Dept&gt; depts, Dept current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.depts = depts;</span><br><span class="line">        <span class="keyword">this</span>.current = current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == depts || depts.size() == <span class="number">0</span> || current.isRoot()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Dept&gt; iterator = depts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Dept dept = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (dept.getId().equals(current.getParentId())) &#123;</span><br><span class="line">                current = dept;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Dept&gt; depts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Dept root = <span class="keyword">new</span> Dept(<span class="number">0L</span>, <span class="string">"0"</span>, -<span class="number">1L</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        depts.add(root);</span><br><span class="line">        Long id = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long i = <span class="number">0L</span>; i &lt;= <span class="number">3L</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Long j = <span class="number">0L</span>; j &lt; <span class="number">3L</span>; j++) &#123;</span><br><span class="line">                id++;</span><br><span class="line">                Integer level = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0L</span>) &#123;</span><br><span class="line">                    level = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Dept child = <span class="keyword">new</span> Dept(id, id.toString(), i, j.intValue(), level);</span><br><span class="line">                depts.add(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"先序遍历"</span>);</span><br><span class="line">        Iterator iterator = <span class="keyword">new</span> DeptPreorderIterator(depts);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"向上遍历"</span>);</span><br><span class="line">        Dept special = depts.get(<span class="number">10</span>);</span><br><span class="line">        iterator = <span class="keyword">new</span> DeptUpwardIterator(depts, special);</span><br><span class="line">        System.out.println(special);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">先序遍历</span><br><span class="line">Dept&#123;id=<span class="number">0</span>, name=<span class="string">'0'</span>, parentId=-<span class="number">1</span>, sort=<span class="number">0</span>, level=<span class="number">0</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">1</span>, name=<span class="string">'1'</span>, parentId=<span class="number">0</span>, sort=<span class="number">0</span>, level=<span class="number">1</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">4</span>, name=<span class="string">'4'</span>, parentId=<span class="number">1</span>, sort=<span class="number">0</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">5</span>, name=<span class="string">'5'</span>, parentId=<span class="number">1</span>, sort=<span class="number">1</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">6</span>, name=<span class="string">'6'</span>, parentId=<span class="number">1</span>, sort=<span class="number">2</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">2</span>, name=<span class="string">'2'</span>, parentId=<span class="number">0</span>, sort=<span class="number">1</span>, level=<span class="number">1</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">7</span>, name=<span class="string">'7'</span>, parentId=<span class="number">2</span>, sort=<span class="number">0</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">8</span>, name=<span class="string">'8'</span>, parentId=<span class="number">2</span>, sort=<span class="number">1</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">9</span>, name=<span class="string">'9'</span>, parentId=<span class="number">2</span>, sort=<span class="number">2</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">3</span>, name=<span class="string">'3'</span>, parentId=<span class="number">0</span>, sort=<span class="number">2</span>, level=<span class="number">1</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">10</span>, name=<span class="string">'10'</span>, parentId=<span class="number">3</span>, sort=<span class="number">0</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">11</span>, name=<span class="string">'11'</span>, parentId=<span class="number">3</span>, sort=<span class="number">1</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">12</span>, name=<span class="string">'12'</span>, parentId=<span class="number">3</span>, sort=<span class="number">2</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">向上遍历</span><br><span class="line">Dept&#123;id=<span class="number">10</span>, name=<span class="string">'10'</span>, parentId=<span class="number">3</span>, sort=<span class="number">0</span>, level=<span class="number">2</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">3</span>, name=<span class="string">'3'</span>, parentId=<span class="number">0</span>, sort=<span class="number">2</span>, level=<span class="number">1</span>&#125;</span><br><span class="line">Dept&#123;id=<span class="number">0</span>, name=<span class="string">'0'</span>, parentId=-<span class="number">1</span>, sort=<span class="number">0</span>, level=<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迭代器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-观察者模式</title>
      <link href="/2022/02/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-观察者模式"><a href="#设计模式-观察者模式" class="headerlink" title="设计模式-观察者模式"></a>设计模式-观察者模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>主题</strong>和<strong>一组观察者</strong>，将观察者注入主题中，主题状态改变<strong>通知</strong>观察者对象</li><li>主要用途：<ul><li>用于多个对象之间的消息传递场景</li><li>观察对象状态变化场景</li></ul></li><li>代码：主题类、观察者接口、具体观察者</li><li>PS：在Web项目中，观察者模式主要被<strong>消息中间件替代</strong>，因为观察者模式无法物理上解耦</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件服务：文件上传、下载时，索引服务要新增、删除索引，并通知相关人员</p><ul><li>主题：文件服务</li><li>观察者：索引服务、通知服务</li></ul></li><li><p>主题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileSubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer 观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(FileObserver observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer 观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">detach</span><span class="params">(FileObserver observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSubjectImpl</span> <span class="keyword">implements</span> <span class="title">FileSubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;FileObserver&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(FileObserver observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(FileObserver observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件服务：上传文件 文件路径："</span> + filePath + <span class="string">" 文件名："</span> + fileName);</span><br><span class="line"></span><br><span class="line">        FileOperation operation = <span class="keyword">new</span> FileOperation();</span><br><span class="line">        operation.setAction(FileOperation.Action.UPLOAD);</span><br><span class="line">        operation.setFilePath(filePath);</span><br><span class="line">        operation.setFileName(fileName);</span><br><span class="line">        notifyObservers(operation);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件服务：删除文件 文件路径："</span> + filePath + <span class="string">" 文件名："</span> + fileName);</span><br><span class="line"></span><br><span class="line">        FileOperation operation = <span class="keyword">new</span> FileOperation();</span><br><span class="line">        operation.setAction(FileOperation.Action.DELETE);</span><br><span class="line">        operation.setFilePath(filePath);</span><br><span class="line">        operation.setFileName(fileName);</span><br><span class="line">        notifyObservers(operation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(FileOperation operation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通知各个文件观察者"</span>);</span><br><span class="line">        <span class="keyword">for</span> (FileObserver observer : observers) &#123;</span><br><span class="line">            observer.notify(operation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 观察者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">(FileOperation operation)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOperation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Action action;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">getAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAction</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.action = action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFilePath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilePath</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FileOperation&#123;"</span> +</span><br><span class="line">                <span class="string">"action="</span> + action +</span><br><span class="line">                <span class="string">", filePath='"</span> + filePath + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", fileName='"</span> + fileName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Action &#123;</span><br><span class="line"></span><br><span class="line">        UPLOAD,</span><br><span class="line"></span><br><span class="line">        DELETE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSearchObserver</span> <span class="keyword">implements</span> <span class="title">FileObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(FileOperation operation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operation.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> UPLOAD:</span><br><span class="line">                addIndex(operation);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DELETE:</span><br><span class="line">                removeIndex(operation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addIndex</span><span class="params">(FileOperation operation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件索引服务： 新增索引 operation: "</span> + operation.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeIndex</span><span class="params">(FileOperation operation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件索引服务： 删除索引 operation: "</span> + operation.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileNotifyObserver</span> <span class="keyword">implements</span> <span class="title">FileObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(FileOperation operation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operation.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> UPLOAD:</span><br><span class="line">                System.out.println(<span class="string">"通知服务： 文件路径："</span> + operation.getFilePath() + <span class="string">"新增文件："</span> + operation.getFileName());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DELETE:</span><br><span class="line">                System.out.println(<span class="string">"通知服务： 文件路径："</span> + operation.getFilePath() + <span class="string">"删除文件："</span> + operation.getFileName());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileObserver searchObserver = <span class="keyword">new</span> FileSearchObserver();</span><br><span class="line">        FileObserver notifyObserver = <span class="keyword">new</span> FileNotifyObserver();</span><br><span class="line"></span><br><span class="line">        FileSubjectImpl fileSubject = <span class="keyword">new</span> FileSubjectImpl();</span><br><span class="line">        fileSubject.attach(searchObserver);</span><br><span class="line">        fileSubject.attach(notifyObserver);</span><br><span class="line"></span><br><span class="line">        fileSubject.uploadFile(<span class="string">"/resource"</span>, <span class="string">"test.doc"</span>);</span><br><span class="line">        fileSubject.deleteFile(<span class="string">"/resource"</span>, <span class="string">"test01.doc"</span>);</span><br><span class="line"></span><br><span class="line">        fileSubject.detach(notifyObserver);</span><br><span class="line">        fileSubject.uploadFile(<span class="string">"/resource"</span>, <span class="string">"test02.doc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">文件服务：上传文件 文件路径：/resource 文件名：test.doc</span><br><span class="line">通知各个文件观察者</span><br><span class="line">文件索引服务： 新增索引 operation: FileOperation&#123;action=UPLOAD, filePath=<span class="string">'/resource'</span>, fileName=<span class="string">'test.doc'</span>&#125;</span><br><span class="line">通知服务： 文件路径：/resource新增文件：test.doc</span><br><span class="line">文件服务：删除文件 文件路径：/resource 文件名：test01.doc</span><br><span class="line">通知各个文件观察者</span><br><span class="line">文件索引服务： 删除索引 operation: FileOperation&#123;action=DELETE, filePath=<span class="string">'/resource'</span>, fileName=<span class="string">'test01.doc'</span>&#125;</span><br><span class="line">通知服务： 文件路径：/resource删除文件：test01.doc</span><br><span class="line">文件服务：上传文件 文件路径：/resource 文件名：test02.doc</span><br><span class="line">通知各个文件观察者</span><br><span class="line">文件索引服务： 新增索引 operation: FileOperation&#123;action=UPLOAD, filePath=<span class="string">'/resource'</span>, fileName=<span class="string">'test02.doc'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-模板模式</title>
      <link href="/2022/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-模板模式"><a href="#设计模式-模板模式" class="headerlink" title="设计模式-模板模式"></a>设计模式-模板模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>模板</strong>来<strong>固定</strong>算法或行为的<strong>流程</strong>，<strong>其中一些子步骤</strong>由<strong>子类</strong>实现</li><li>主要用途：希望不改变整体结构的基础上，通过子类来扩展或者修改某些步骤</li><li>代码：模板抽象类，具体实现类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>已发送验证码为例，验证码的流程基本是固定的</p><ul><li>发送验证码流程<ul><li>生成验证码</li><li>保存验证码</li><li>发送验证码</li></ul></li><li>校验验证码流程<ul><li>获取验证码</li><li>校验验证码（是否存在，是否相等）</li></ul></li></ul></li><li><p>基础类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证码状态码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CodeStatus &#123;</span><br><span class="line"></span><br><span class="line">    EQUAL,</span><br><span class="line"></span><br><span class="line">    NON_EQUAL,</span><br><span class="line"></span><br><span class="line">    NON_EXISTENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">get</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(String uniqueKey)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">get</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(String uniqueKey)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Object&gt; cacheMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        cacheMap.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cacheMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String uniqueKey)</span> </span>&#123;</span><br><span class="line">        cacheMap.remove(uniqueKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>模板抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证码模板</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeProcessor</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Code</span>, <span class="title">P</span> <span class="keyword">extends</span> <span class="title">CodeParameter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Cache cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeProcessor</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 发送验证码</span></span><br><span class="line"><span class="comment">//     * @param param 生成验证码参数</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    public void sendCode(P param) &#123;</span></span><br><span class="line"><span class="comment">//        T code = generateCode(param);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        cacheCode(param, code);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        sendCode(param, code);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送验证码-测试&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 主要用于测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 生成验证码参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendCode</span><span class="params">(P param)</span> </span>&#123;</span><br><span class="line">        T code = generateCode(param);</span><br><span class="line"></span><br><span class="line">        cacheCode(param, code);</span><br><span class="line"></span><br><span class="line">        sendCode(param, code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> code.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 带校验的验证码参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CodeStatus <span class="title">validateCode</span><span class="params">(P param)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断参数是否符合要求</span></span><br><span class="line">        <span class="keyword">if</span> (isBlank(param.getCode()) || isBlank(param.getUniqueKey())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数不合规范，属性code | uniqueKey不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取验证码</span></span><br><span class="line">        CodeParameter cacheCode = getCacheCode(param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断缓存验证码是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (isBlank(cacheCode.getCode())) &#123;</span><br><span class="line">            <span class="keyword">return</span> CodeStatus.NON_EXISTENT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断缓存验证码是否与输入的验证码相等</span></span><br><span class="line">        <span class="keyword">if</span> (cacheCode.getCode().equals(param.getCode())) &#123;</span><br><span class="line">            cache.remove(cacheCode.getUniqueKey());</span><br><span class="line">            <span class="keyword">return</span> CodeStatus.EQUAL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CodeStatus.NON_EQUAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码生成</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">generateCode</span><span class="params">(P param)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成验证码唯一标识，做为缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">generateUniqueKey</span><span class="params">(P param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> param.getUniqueKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存验证码&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 如果覆盖该方法，也要同时覆盖&#123;<span class="doctag">@link</span> CodeProcessor#getCacheCode(cn.deschen.designPattern.template.validate.CodeParameter)&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cacheCode</span><span class="params">(P param, T code)</span> </span>&#123;</span><br><span class="line">        cache.set(generateUniqueKey(param), code.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取保存的验证码&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 如果覆盖改方法，也要同时覆盖&#123;<span class="doctag">@link</span> CodeProcessor#cacheCode(cn.deschen.designPattern.template.validate.CodeParameter, cn.deschen.designPattern.template.validate.Code)&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> CodeParameter <span class="title">getCacheCode</span><span class="params">(P param)</span> </span>&#123;</span><br><span class="line">        String uniqueKey = generateUniqueKey(param);</span><br><span class="line"></span><br><span class="line">        String cacheCode = (String) cache.get(uniqueKey);</span><br><span class="line"></span><br><span class="line">        CodeParameter codeParameter = <span class="keyword">new</span> CodeParameter(uniqueKey)&#123;&#125;;</span><br><span class="line">        codeParameter.setCode(cacheCode);</span><br><span class="line">        <span class="keyword">return</span> codeParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(P param, T code)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 字符串参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isBlank</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == value || value.trim().length() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证码抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Code</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证码入参抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeParameter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String uniqueKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeParameter</span><span class="params">(String uniqueKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uniqueKey = uniqueKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUniqueKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uniqueKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUniqueKey</span><span class="params">(String uniqueKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uniqueKey = uniqueKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(String length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图片验证码实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现模板方法中：生成验证码和发送验证码步骤</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCodeProcessor</span> <span class="keyword">extends</span> <span class="title">CodeProcessor</span>&lt;<span class="title">ImageCode</span>, <span class="title">ImageCodeParameter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageCodeProcessor</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ImageCode <span class="title">generateCode</span><span class="params">(ImageCodeParameter param)</span> </span>&#123;</span><br><span class="line">        String height = !isBlank(param.getHeight()) ? param.getHeight() : <span class="string">"100"</span>;</span><br><span class="line">        String width = !isBlank(param.getWidth()) ? param.getWidth() : <span class="string">"200"</span>;</span><br><span class="line">        String length = !isBlank(param.getLength()) ? param.getLength() : <span class="string">"6"</span>;</span><br><span class="line"></span><br><span class="line">        DefaultKaptcha defaultKaptcha = defaultKaptcha(height, width, length);</span><br><span class="line">        String code = defaultKaptcha.createText();</span><br><span class="line">        BufferedImage image = defaultKaptcha.createImage(code);</span><br><span class="line"></span><br><span class="line">        ImageCode imageCode = <span class="keyword">new</span> ImageCode(code, image);</span><br><span class="line">        <span class="keyword">return</span> imageCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(ImageCodeParameter param, ImageCode code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ImageIO.write(code.getImage(), <span class="string">"JPEG"</span>, param.getOutputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"发送验证码失败, 异常信息："</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"生成图片验证码，code："</span> + code.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成用于验证码图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height 图片高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width 图片宽度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 图片长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DefaultKaptcha <span class="title">defaultKaptcha</span><span class="params">(String height, String width, String length)</span> </span>&#123;</span><br><span class="line">        DefaultKaptcha defaultKaptcha = <span class="keyword">new</span> DefaultKaptcha();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 图片宽</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.image.width"</span>, width);</span><br><span class="line">        <span class="comment">// 图片高</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.image.height"</span>, height);</span><br><span class="line">        <span class="comment">// 验证码长度</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.char.length"</span>, length);</span><br><span class="line">        Config config = <span class="keyword">new</span> Config(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片验证码实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCode</span> <span class="keyword">extends</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BufferedImage image;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageCode</span><span class="params">(String code, BufferedImage image)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(code);</span><br><span class="line">        <span class="keyword">this</span>.image = image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedImage <span class="title">getImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图片验证码参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCodeParameter</span> <span class="keyword">extends</span> <span class="title">CodeParameter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OutputStream outputStream;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageCodeParameter</span><span class="params">(String uniqueKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(uniqueKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(String height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(String width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OutputStream <span class="title">getOutputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> outputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOutputStream</span><span class="params">(OutputStream outputStream)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.outputStream = outputStream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>短信验证码实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现模板方法中：生成验证码和发送验证码步骤</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeProcessor</span> <span class="keyword">extends</span> <span class="title">CodeProcessor</span>&lt;<span class="title">SmsCode</span>, <span class="title">SmsCodeParameter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsCodeProcessor</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SmsCode <span class="title">generateCode</span><span class="params">(SmsCodeParameter param)</span> </span>&#123;</span><br><span class="line">        Integer length = !isBlank(param.getLength()) ? <span class="number">6</span> : Integer.valueOf(param.getLength());</span><br><span class="line">        <span class="comment">// 范围 10的(length-1)次方到9*10的(length-1)次方</span></span><br><span class="line">        Double dCode = (Math.random() * <span class="number">9</span> + <span class="number">1</span>) * Math.pow(<span class="number">10</span>, length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsCode(String.valueOf(dCode.intValue()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(SmsCodeParameter param, SmsCode code)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String log = builder.append(<span class="string">"生成短信验证码，发送方："</span>).append(param.getSender())</span><br><span class="line">                .append(<span class="string">"\t发送验证码："</span>).append(code.getCode())</span><br><span class="line">                .append(<span class="string">"\t给接收方："</span>).append(param.getReceiver()).toString();</span><br><span class="line">        System.out.println(log);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 缓存服务</span></span><br><span class="line">        Cache cache = <span class="keyword">new</span> LocalCache();</span><br><span class="line"></span><br><span class="line">        imageCode(cache);</span><br><span class="line"></span><br><span class="line">        smsCode(cache);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">smsCode</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 发送短信验证码</span></span><br><span class="line">        String smsUniqueKey = <span class="string">"smsKey"</span>;</span><br><span class="line">        SmsCodeParameter smsParam = <span class="keyword">new</span> SmsCodeParameter(smsUniqueKey);</span><br><span class="line">        smsParam.setSender(<span class="string">"15113011111"</span>);</span><br><span class="line">        smsParam.setReceiver(<span class="string">"15113022222"</span>);</span><br><span class="line">        smsParam.setLength(<span class="string">"5"</span>);</span><br><span class="line">        CodeProcessor codeProcessor = <span class="keyword">new</span> SmsCodeProcessor(cache);</span><br><span class="line">        String code = codeProcessor.sendCode(smsParam);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验验证码</span></span><br><span class="line">        System.out.println(code);</span><br><span class="line"></span><br><span class="line">        SmsCodeParameter validateImageParam = <span class="keyword">new</span> SmsCodeParameter(smsUniqueKey);</span><br><span class="line">        validateImageParam.setCode(code);</span><br><span class="line">        CodeStatus result = codeProcessor.validateCode(validateImageParam);</span><br><span class="line">        System.out.println(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">imageCode</span><span class="params">(Cache cache)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 发送图片验证码</span></span><br><span class="line">        String imageUniqueKey = <span class="string">"imageKey"</span>;</span><br><span class="line">        ImageCodeParameter imageParam = <span class="keyword">new</span> ImageCodeParameter(imageUniqueKey);</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test01.jpeg"</span>);</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        imageParam.setOutputStream(fileOutputStream);</span><br><span class="line">        CodeProcessor codeProcessor = <span class="keyword">new</span> ImageCodeProcessor(cache);</span><br><span class="line">        String code = codeProcessor.sendCode(imageParam);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验验证码</span></span><br><span class="line">        System.out.println(code);</span><br><span class="line"></span><br><span class="line">        ImageCodeParameter validateImageParam = <span class="keyword">new</span> ImageCodeParameter(imageUniqueKey);</span><br><span class="line">        validateImageParam.setCode(code);</span><br><span class="line">        CodeStatus result = codeProcessor.validateCode(validateImageParam);</span><br><span class="line">        System.out.println(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">生成图片验证码，code：e5x24n</span><br><span class="line">校验结果：EQUAL</span><br><span class="line">生成短信验证码，发送方：<span class="number">15113011111</span>发送验证码：<span class="number">534196</span>给接收方：<span class="number">15113022222</span></span><br><span class="line">校验结果：EQUAL</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-策略模式</title>
      <link href="/2022/02/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-策略模式"><a href="#设计模式-策略模式" class="headerlink" title="设计模式-策略模式"></a>设计模式-策略模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念: 定义一个<strong>策略接口</strong> 和 <strong>一组具体的策略类</strong>，选择策略实现不同算法或行为</li><li>主要用途<ul><li>多个相同功能，但操作不同的类，根据需要选择</li><li>大量条件并且每个条件行为不同</li></ul></li><li>代码：策略接口、一组具体的策略类</li><li>与适配者模式的区别<ul><li>相同点：<strong>结构相似</strong>，都是对一个功能接口，多个实现类</li><li>不同点：<ul><li>适配器模式：适配器只是针对第三方接口的操作进行适配，体现在实现类上</li><li>策略模式：一个策略接口+一组具体策略实现类，体现在功能上</li></ul></li></ul></li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件存储服务为例：选择不同文件存储策略，上传文件</p></li><li><p>存储策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体存储策略：阿里云OSS和Minio</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssStorageStrategy</span> <span class="keyword">implements</span> <span class="title">StorageStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"阿里云OSS上传文件成功,文件名: "</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioStorageStrategy</span> <span class="keyword">implements</span> <span class="title">StorageStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Minio上传文件成功,文件名: "</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件服务：选择策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServiceImpl</span> <span class="keyword">implements</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StorageStrategy storageStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileServiceImpl</span><span class="params">(StorageStrategy storageStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storageStrategy = storageStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"数据保存到数据库，文件名："</span> + fileName);</span><br><span class="line">        <span class="comment">// 使用设置好的策略</span></span><br><span class="line">        storageStrategy.uploadFile(filePath, fileName);</span><br><span class="line">        System.out.println(<span class="string">"发送消息通知相关人员"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 两种文件策略</span></span><br><span class="line">        StorageStrategy ossStorageStrategy = <span class="keyword">new</span> OssStorageStrategy();</span><br><span class="line">        StorageStrategy minioStorageStrategy = <span class="keyword">new</span> MinioStorageStrategy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件服务，选择具体策略，实现功能</span></span><br><span class="line">        FileServiceImpl fileService = <span class="keyword">new</span> FileServiceImpl(ossStorageStrategy);</span><br><span class="line">        fileService.uploadFile(<span class="string">"/resources"</span>, <span class="string">"test.txt"</span>);</span><br><span class="line"></span><br><span class="line">        fileService = <span class="keyword">new</span> FileServiceImpl(minioStorageStrategy);</span><br><span class="line">        fileService.uploadFile(<span class="string">"/resources"</span>, <span class="string">"test.txt"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-代理模式</title>
      <link href="/2022/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-代理模式"><a href="#设计模式-代理模式" class="headerlink" title="设计模式-代理模式"></a>设计模式-代理模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念: 定义一个对象的<strong>代理类</strong>，通过<strong>代理类</strong>控制<strong>对象的访问</strong></li><li>主要用途<ul><li>远程代理：代理不同空间的对象，隐藏对象具体细节</li><li>虚拟代理：延迟加载对象，对象创建成本高，通过代理模式延迟创建</li></ul></li><li>代码：代理类、被代理的对象</li><li>与装饰者模式的区别<ul><li>相同点：<strong>结构</strong>上跟装饰者模式<strong>相似</strong>，都是通过<strong>包装对象</strong>来增强功能，不需要修改原有的对象结构</li><li>不同点：<ul><li>代理模式：控制对象的访问，即在访问对象前和后，执行额外操作</li><li>装饰者模式：除了增加额外操作外，还能<strong>修改原有的行为</strong></li></ul></li></ul></li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以装饰者模式的用户服务为例：记录日志、保存加密的用户信息、展示解密的用户信息</p></li><li><p>原有的类/接口，被代理的对象<code>UserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> String account;</span><br><span class="line">      <span class="keyword">private</span> String password;</span><br><span class="line">      <span class="keyword">private</span> String mobile;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// getter 和 toString 方法</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">          <span class="keyword">private</span> User user;</span><br><span class="line">  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              user = <span class="keyword">new</span> User();</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> Builder <span class="title">setAccount</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">              user.account = account;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> Builder <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">              user.password = password;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> Builder <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">              user.mobile = mobile;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> User <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> user;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 用户服务接口</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 创建用户</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span></span>;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 展示用户信息</span></span><br><span class="line">      <span class="function">User <span class="title">showUserInfo</span><span class="params">(String account)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 用户服务实现</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, User&gt; storage = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span> </span>&#123;</span><br><span class="line">          User.Builder builder = <span class="keyword">new</span> User.Builder();</span><br><span class="line">          User user = builder.setAccount(account)</span><br><span class="line">                  .setPassword(password)</span><br><span class="line">                  .setMobile(mobile).builder();</span><br><span class="line">          storage.put(account, user);</span><br><span class="line">          System.out.println(<span class="string">"用户创建成功 user: "</span> + user.toString());</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> User <span class="title">showUserInfo</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">          User user = storage.get(account);</span><br><span class="line">          <span class="keyword">return</span> user;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 原先用户服务用例</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">          userService.createUser(<span class="string">"admin"</span>, <span class="string">"admin123"</span>, <span class="string">"15113088283"</span>);</span><br><span class="line">          User admin = userService.showUserInfo(<span class="string">"admin"</span>);</span><br><span class="line">          System.out.println(<span class="string">"用户信息 admin: "</span> + admin.toString());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">用户创建成功 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br><span class="line">用户信息 admin: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作用户外，新增日志功能、保存加密用户信息和展示解密用户功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceProxy</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64Encryptor.encrypt(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decrypt</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64Encryptor.decrypt(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"日志记录 调用方法名"</span> + method.getName());</span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">switch</span> (method.getName()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"createUser"</span>: &#123;</span><br><span class="line">                args[<span class="number">1</span>] = encrypt((String) args[<span class="number">1</span>]);</span><br><span class="line">                args[<span class="number">2</span>] = encrypt((String) args[<span class="number">2</span>]);</span><br><span class="line">                result = method.invoke(userService, args);</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"showUserInfo"</span>: &#123;</span><br><span class="line">                result = method.invoke(userService, args);</span><br><span class="line">                User user = (User) result;</span><br><span class="line">                String password = decrypt(user.getPassword());</span><br><span class="line">                String mobile = decrypt(user.getMobile());</span><br><span class="line">                <span class="comment">// 拷贝到新的对象，并返回</span></span><br><span class="line">                user = <span class="keyword">new</span> User.Builder()</span><br><span class="line">                        .setAccount(user.getAccount())</span><br><span class="line">                        .setPassword(password)</span><br><span class="line">                        .setMobile(mobile).builder();</span><br><span class="line">                System.out.println(<span class="string">"解密后的用户信息 user: "</span> + result.toString());</span><br><span class="line">                result = user;</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                result = method.invoke(userService, args);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"日志记录 运行结束 方法名"</span> + method.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加用户加解密功能</span></span><br><span class="line">        UserServiceProxy proxy = <span class="keyword">new</span> UserServiceProxy(userService);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建动态代理</span></span><br><span class="line">        userService = (UserService) Proxy.newProxyInstance(userService.getClass().getClassLoader(),</span><br><span class="line">                userService.getClass().getInterfaces(), proxy);</span><br><span class="line">        userService.createUser(<span class="string">"admin"</span>, <span class="string">"admin123"</span>, <span class="string">"15113088283"</span>);</span><br><span class="line">        User admin = userService.showUserInfo(<span class="string">"admin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">日志记录 调用方法名createUser</span><br><span class="line">用户创建成功 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'YWRtaW4xMjM='</span>, mobile=<span class="string">'MTUxMTMwODgyODM='</span>&#125;</span><br><span class="line">日志记录 运行结束 方法名createUser</span><br><span class="line">日志记录 调用方法名showUserInfo</span><br><span class="line">解密后的用户信息 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'YWRtaW4xMjM='</span>, mobile=<span class="string">'MTUxMTMwODgyODM='</span>&#125;</span><br><span class="line">日志记录 运行结束 方法名showUserInfo</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-享元模式</title>
      <link href="/2022/02/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>工厂类</strong>获取<strong>共享对象</strong>，<strong>减少</strong>内存使用和对象开销</li><li>主要用途：用于共享相同数据的场景：数字字典的引用</li><li>代码：工厂类</li><li>PS：该模式是缓存的一种：存储的对象，而且存的位置是内存。这样就有问题：只对自身项目共享，那么项目水平扩展，需要额外开销保证每台服务器的存储的对象一致</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以数字字典为例</p></li><li><p>字典类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所属组编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String groupCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所属组名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String groupName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字典编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String dictCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字典值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String dictValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dictionary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dictionary</span><span class="params">(Long id, String groupCode, String groupName, String dictCode, String dictValue, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.groupCode = groupCode;</span><br><span class="line">        <span class="keyword">this</span>.groupName = groupName;</span><br><span class="line">        <span class="keyword">this</span>.dictCode = dictCode;</span><br><span class="line">        <span class="keyword">this</span>.dictValue = dictValue;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGroupCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> groupCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGroupCode</span><span class="params">(String groupCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.groupCode = groupCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGroupName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGroupName</span><span class="params">(String groupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.groupName = groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDictCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dictCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDictCode</span><span class="params">(String dictCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictCode = dictCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDictValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dictValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDictValue</span><span class="params">(String dictValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictValue = dictValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dictionary&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", groupCode='"</span> + groupCode + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", groupName='"</span> + groupName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", dictCode='"</span> + dictCode + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", dictValue='"</span> + dictValue + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", description='"</span> + description + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DictionaryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分组编码和字典编码获取字典</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupCode 组编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dictCode 字典编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Dictionary <span class="title">getDictionary</span><span class="params">(String groupCode, String dictCode)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictionaryServiceImpl</span> <span class="keyword">implements</span> <span class="title">DictionaryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_CODE_TEMPLATE = <span class="string">"groupCode%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_NAME_TEMPLATE = <span class="string">"groupName%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DICT_CODE_TEMPLATE = <span class="string">"dictCode%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DICT_VALUE_TEMPLATE = <span class="string">"dictValue%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Dictionary&gt; dictionaries = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Long id = <span class="number">1L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                Dictionary dictionary = <span class="keyword">new</span> Dictionary(id, String.format(GROUP_CODE_TEMPLATE, i), String.format(GROUP_NAME_TEMPLATE, i),</span><br><span class="line">                        String.format(DICT_CODE_TEMPLATE, j), String.format(DICT_VALUE_TEMPLATE, j), <span class="string">""</span>);</span><br><span class="line">                id++;</span><br><span class="line">                dictionaries.add(dictionary);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dictionary <span class="title">getDictionary</span><span class="params">(String groupCode, String dictCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Dictionary dictionary : dictionaries) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dictionary.getGroupCode().equals(groupCode) &amp;&amp; dictionary.getDictCode().equals(dictCode)) &#123;</span><br><span class="line">                <span class="keyword">return</span> dictionary;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典共享工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictionaryFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始容量大小：最大元素量 / 负载因子(0.75)，即使填入不是2的幂等性，ConcurrentHashMap也会自动转化为2的幂等性的值</span></span><br><span class="line"><span class="comment">     * 为什么博客建议用2的幂等性：保证哈希表在扩容时能够快速地定位元素的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Dictionary&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DictionaryService dictionaryService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DictionaryFactory</span><span class="params">(DictionaryService dictionaryService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictionaryService = dictionaryService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据组编码和字典编号获取字典</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dictCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dictionary <span class="title">getDictionary</span><span class="params">(String groupCode, String dictCode)</span> </span>&#123;</span><br><span class="line">        String cacheKey = cacheKey(groupCode, dictCode);</span><br><span class="line"></span><br><span class="line">        Dictionary dictionary = cache.get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == dictionary) &#123;</span><br><span class="line">            dictionary = dictionaryService.getDictionary(groupCode, dictCode);</span><br><span class="line">            cache.put(cacheKey, dictionary);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dictionary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">cacheKey</span><span class="params">(String groupCode, String dictCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> groupCode + <span class="string">":"</span> + dictCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 享元模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-外观模式</title>
      <link href="/2022/02/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：为<strong>多个子系统的交互</strong>提供<strong>接口</strong>，供客户端使用</li><li>主要用途：当一个系统的功能非常复杂，由很多个子系统组成时，可以使用外观模式对这些子系统进行封装，提供一个简单的接口给客户端使用</li><li>代码：对外接口、封装多个子系统的实现类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>文件上传为例：涉及到用户认证、文件上传、消息通知</p></li><li><p>对外接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传，涉及到用户认证、文件上传、消息通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装多个系统交互的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFacadeImpl</span> <span class="keyword">implements</span> <span class="title">FileFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthSystem authSystem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileSystem fileSystem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MessageSystem messageSystem;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileFacadeImpl</span><span class="params">(AuthSystem authSystem, FileSystem fileSystem, MessageSystem messageSystem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authSystem = authSystem;</span><br><span class="line">        <span class="keyword">this</span>.fileSystem = fileSystem;</span><br><span class="line">        <span class="keyword">this</span>.messageSystem = messageSystem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasAuth = authSystem.isAuthenticated();</span><br><span class="line">        <span class="keyword">if</span> (!hasAuth) &#123;</span><br><span class="line">            System.out.println(<span class="string">"当前用户没有权限"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fileSystem.uploadFile(filePath, fileName);</span><br><span class="line"></span><br><span class="line">        messageSystem.sendMessage(<span class="string">"上传"</span> + fileName + <span class="string">"到"</span> + filePath + <span class="string">"目录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 认证系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前用户是否有权限</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthSystemImpl</span> <span class="keyword">implements</span> <span class="title">AuthSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"认证系统: 当前用户有操作权限"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemImpl</span> <span class="keyword">implements</span> <span class="title">FileSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件系统: 文件目录: "</span> + filePath + <span class="string">", 上传的文件: "</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSystemImpl</span> <span class="keyword">implements</span> <span class="title">MessageSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消息系统: 发送的消息: "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AuthSystem authSystem = <span class="keyword">new</span> AuthSystemImpl();</span><br><span class="line">        FileSystem fileSystem = <span class="keyword">new</span> FileSystemImpl();</span><br><span class="line">        MessageSystem messageSystem = <span class="keyword">new</span> MessageSystemImpl();</span><br><span class="line">        FileFacade fileFacade = <span class="keyword">new</span> FileFacadeImpl(authSystem, fileSystem, messageSystem);</span><br><span class="line"></span><br><span class="line">        fileFacade.uploadFile(<span class="string">"/resources"</span>, <span class="string">"test.doc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">认证系统: 当前用户有操作权限</span><br><span class="line">文件系统: 文件目录: /resources, 上传的文件: test.doc</span><br><span class="line">消息系统: 发送的消息: 上传test.doc到/resources目录</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外观模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-组合模式</title>
      <link href="/2022/02/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-组合模式"><a href="#设计模式-组合模式" class="headerlink" title="设计模式-组合模式"></a>设计模式-组合模式</h1><blockquote><p>研究了很久，我发现组合模式，跟装饰者模式有异曲同工之处。就是在原来的功能基础上，<strong>装饰</strong>了保存子节点的集合</p></blockquote><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：<strong>抽象类组件</strong>与一个<strong>包含子组件</strong>的<strong>子组件类</strong>，构建<strong>树形</strong>结构</li><li>主要用途：<ul><li>在不改变现有对象结构的情况下，动态地给一个对象增加新的功能</li><li>需要添加一些附加的功能，但是使用继承会导致类的数量增加，且继承层次复杂，而装饰者可以聚合新功能的类，添加新功能</li></ul></li><li>代码：原有的类/接口（抽象类组件）、包含子组件的子组件类（装饰了保存子节点功能）</li><li>PS: 为什么我不直接把子组件类抽象出来？是因为组合模式本来就是<strong>用于组合树结构</strong>，没有其他意思，就不要抽象出来</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以部门树为例</p></li><li><p>部门类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">IDept</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(Long id, String name, Integer level, Long parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentId</span><span class="params">(Long parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dept&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", level='"</span> + level + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", parentId="</span> + parentId +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门的抽象类 - 提取部门需要展示的属性，同时方便以后部门类整改不受影响，保证可维护性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDept</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Long <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">getLevel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Long <span class="title">getParentId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Boolean <span class="title">isRoot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包含部门的部门树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNode</span> <span class="keyword">implements</span> <span class="title">IDept</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IDept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;DeptNode&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptNode</span><span class="params">(IDept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">        <span class="keyword">this</span>.children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getLevel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.getParentId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept.isRoot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;DeptNode&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(List&lt;DeptNode&gt; children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(DeptNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children.add(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deptInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dept&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + getId() +</span><br><span class="line">                <span class="string">", name='"</span> + getName() + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", level='"</span> + getLevel() + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", parentId="</span> + getParentId() +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门树生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNodeBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Long, DeptNode&gt; nodeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加内存空间来构建树 - 遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> depts 部门集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptNode <span class="title">buildByIncrMem</span><span class="params">(List&lt;Dept&gt; depts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Dept dept : depts) &#123;</span><br><span class="line">            nodeMap.put(dept.getId(), <span class="keyword">new</span> DeptNode(dept));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeptNode root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (DeptNode node : nodeMap.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!node.isRoot()) &#123;</span><br><span class="line">                DeptNode parent = nodeMap.get(node.getParentId());</span><br><span class="line">                parent.addNode(node);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加栈来构建树 - 递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> depts 部门集合</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptNode <span class="title">buildByIncrStack</span><span class="params">(List&lt;Dept&gt; depts)</span> </span>&#123;</span><br><span class="line">        List&lt;DeptNode&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        DeptNode root = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Dept dept : depts) &#123;</span><br><span class="line">            DeptNode node = <span class="keyword">new</span> DeptNode(dept);</span><br><span class="line">            <span class="keyword">if</span> (dept.isRoot()) &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">            nodes.add(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.setChildren(children(nodes, root));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;DeptNode&gt; <span class="title">children</span><span class="params">(List&lt;DeptNode&gt; nodes, DeptNode parent)</span> </span>&#123;</span><br><span class="line">        List&lt;DeptNode&gt; children = nodes.stream()</span><br><span class="line">                .filter(node -&gt; node.getParentId().equals(parent.getId()))</span><br><span class="line">                .peek(node -&gt; &#123;</span><br><span class="line">                    node.setChildren(children(nodes, node));</span><br><span class="line">                &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        List&lt;Dept&gt; depts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Dept root = <span class="keyword">new</span> Dept(<span class="number">0L</span>, <span class="string">"0"</span>, <span class="number">0</span>, -<span class="number">1L</span>);</span><br><span class="line">        depts.add(root);</span><br><span class="line">        Long id = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long i = <span class="number">0L</span>; i &lt;= <span class="number">3L</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Long j = <span class="number">0L</span>; j &lt; <span class="number">3L</span>; j++) &#123;</span><br><span class="line">                id++;</span><br><span class="line">                Dept child = <span class="keyword">new</span> Dept(id, id.toString(), j.intValue(), i);</span><br><span class="line">                depts.add(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeptNodeBuilder builder = <span class="keyword">new</span> DeptNodeBuilder();</span><br><span class="line">        DeptNode rootNode = builder.buildByIncrMem(depts);</span><br><span class="line"></span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode));</span><br><span class="line"></span><br><span class="line">        DeptNode rootNode1 = builder.buildByIncrStack(depts);</span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;],<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;],<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;],<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;],<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">1</span>&#125;],<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">2</span>&#125;],<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">3</span>&#125;],<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"root"</span>:<span class="keyword">false</span>,<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>&#125;],<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>,<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h2><blockquote><p>上面的是针对业务（部门）抽象，组合形成部门树。但是菜单、文件等这些层级属性的实体，难道要重新copy一份在写吗？</p><p>能不能把他们的共性抽取出来呢？</p><p>部门、菜单、文件共性：标识、父标识、名称等节点属性</p><p>部门树、菜单树、文件树共性：包含自身，即节点集合</p></blockquote><ul><li><p>组合模式概念：抽象类组件和包含子组件的子组件类</p><ul><li>第一版：抽象类组件（部门）、子组件（部门树）</li><li>第二版：抽象类组件（节点属性）、抽象子组件（节点树）、部门类（抽象类的子类）、部门树（抽象子组件的子类）</li></ul></li><li><p>代码</p><ul><li><p>抽象类组件（节点属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NodeEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点ID，节点唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父节点ID，体现出层级关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">getParentId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点顺序，可以实所有节点的顺序，也可以是同级下的节点顺序。如果为空，默认不排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">getSort</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">isRoot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象子组件类（节点树）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">NodeEntity</span>, <span class="title">N</span> <span class="keyword">extends</span> <span class="title">Node</span>&gt; <span class="keyword">implements</span> <span class="title">NodeEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> E entity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> List&lt;N&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.entity = entity;</span><br><span class="line">        <span class="keyword">this</span>.children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getParentId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == entity.getSort()? <span class="number">0</span>: entity.getSort();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.isRoot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;N&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(List&lt;N&gt; children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(N node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children.add(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门类（节点的子类，添加业务属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">NodeEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增属性：层级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(Long id, String name, Long parentId, Integer sort, Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">        <span class="keyword">this</span>.sort = sort;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentId</span><span class="params">(Long parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSort</span><span class="params">(Integer sort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sort = sort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门树（节点树的子类，添加业务属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNode</span> <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">Dept</span>, <span class="title">DeptNode</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptNode</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增属性：层级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getLevel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>节点树生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNodeBuilder</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">NodeEntity</span>, <span class="title">N</span> <span class="keyword">extends</span> <span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> NodeSortComparator comparator = <span class="keyword">new</span> NodeSortComparator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加内存空间来构建树 - 遍历</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities 节点实体集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> N <span class="title">buildByIncrMem</span><span class="params">(List&lt;E&gt; entities)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Map&lt;Long, N&gt; nodeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Collections.sort(entities, comparator);</span><br><span class="line"></span><br><span class="line">        List&lt;N&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        N root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (E entity : entities) &#123;</span><br><span class="line">            N node = createNode(entity);</span><br><span class="line">            nodes.add(node);</span><br><span class="line">            nodeMap.put(node.getId(), node);</span><br><span class="line">            <span class="keyword">if</span> (entity.isRoot()) &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (N node : nodeMap.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!node.isRoot()) &#123;</span><br><span class="line">                N parent = nodeMap.get(node.getParentId());</span><br><span class="line">                parent.addNode(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> N <span class="title">createNode</span><span class="params">(E entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过增加栈来构建树 - 递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities 节点实体集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> N <span class="title">buildByIncrStack</span><span class="params">(List&lt;E&gt; entities)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        List&lt;N&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        N root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (E entity : entities) &#123;</span><br><span class="line">            N node = createNode(entity);</span><br><span class="line">            nodes.add(node);</span><br><span class="line">            <span class="keyword">if</span> (entity.isRoot()) &#123;</span><br><span class="line">                root = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.setChildren(children(nodes, root));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (N) root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;N&gt; <span class="title">children</span><span class="params">(List&lt;N&gt; nodes, N parent)</span> </span>&#123;</span><br><span class="line">        List&lt;N&gt; children = nodes.stream()</span><br><span class="line">                .filter(node -&gt; node.getParentId().equals(parent.getId()))</span><br><span class="line">                .peek(node -&gt; &#123;</span><br><span class="line">                    node.setChildren(children(nodes, node));</span><br><span class="line">                &#125;)</span><br><span class="line">                .sorted(comparator)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点排序器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeSortComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">NodeEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(NodeEntity o1, NodeEntity o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getSort().compareTo(o2.getSort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>部门树（节点树生成器，覆盖或者新增功能）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptNodeBuilder</span> <span class="keyword">extends</span> <span class="title">TreeNodeBuilder</span>&lt;<span class="title">Dept</span>, <span class="title">DeptNode</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DeptNode <span class="title">createNode</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DeptNode(dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        List&lt;Dept&gt; depts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Dept root = <span class="keyword">new</span> Dept(<span class="number">0L</span>, <span class="string">"0"</span>, -<span class="number">1L</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        depts.add(root);</span><br><span class="line">        Long id = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long i = <span class="number">0L</span>; i &lt;= <span class="number">3L</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Long j = <span class="number">0L</span>; j &lt; <span class="number">3L</span>; j++) &#123;</span><br><span class="line">                id++;</span><br><span class="line">                Integer level = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0L</span>) &#123;</span><br><span class="line">                    level = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Dept child = <span class="keyword">new</span> Dept(id, id.toString(), i, j.intValue(), level);</span><br><span class="line">                depts.add(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeptNodeBuilder builder = <span class="keyword">new</span> DeptNodeBuilder();</span><br><span class="line">        DeptNode rootNode = builder.buildByIncrMem(depts);</span><br><span class="line"></span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode));</span><br><span class="line"></span><br><span class="line">        DeptNode rootNode1 = builder.buildByIncrStack(depts);</span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(rootNode1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>&#125;</span><br><span class="line">&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"4"</span>,<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"5"</span>,<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"6"</span>,<span class="string">"id"</span>:<span class="number">6</span>,<span class="string">"parentId"</span>:<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"1"</span>,<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"7"</span>,<span class="string">"id"</span>:<span class="number">7</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"8"</span>,<span class="string">"id"</span>:<span class="number">8</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"9"</span>,<span class="string">"id"</span>:<span class="number">9</span>,<span class="string">"parentId"</span>:<span class="number">2</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"2"</span>,<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"10"</span>,<span class="string">"id"</span>:<span class="number">10</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"11"</span>,<span class="string">"id"</span>:<span class="number">11</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">1</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;,&#123;<span class="string">"children"</span>:[],<span class="string">"level"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"12"</span>,<span class="string">"id"</span>:<span class="number">12</span>,<span class="string">"parentId"</span>:<span class="number">3</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"3"</span>,<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"parentId"</span>:<span class="number">0</span>,<span class="string">"sort"</span>:<span class="number">2</span>,<span class="string">"root"</span>:<span class="keyword">false</span>&#125;],<span class="string">"level"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"0"</span>,<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"parentId"</span>:-<span class="number">1</span>,<span class="string">"sort"</span>:<span class="number">0</span>,<span class="string">"root"</span>:<span class="keyword">true</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可见，有新的业务要生成树形结构，先后要继承/实现<strong>节点属性（NodeEntity）</strong>、<strong>节点树（Node）</strong>、<strong>节点生成器（TreeNodeBuilder）</strong>就可以了，如果要定制化，就直接在其基础上修改</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose + jenkins搭建部署</title>
      <link href="/2022/02/03/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/02/03/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-compose-jenkins搭建部署"><a href="#docker-compose-jenkins搭建部署" class="headerlink" title="docker-compose + jenkins搭建部署"></a>docker-compose + jenkins搭建部署</h1><p>[toc]</p><h2 id="一、docker的下载安装"><a href="#一、docker的下载安装" class="headerlink" title="一、docker的下载安装"></a>一、docker的下载安装</h2><ul><li><p>docker安装环境条件</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Docker安装环境条件</span><br><span class="line"># <span class="number">1</span>、Docker 运行在 CentOS <span class="number">7</span> 上，要求系统为<span class="number">64</span>位、系统内核版本为 <span class="number">3.10</span> 以上。</span><br><span class="line"># <span class="number">2</span>、Docker 运行在 CentOS<span class="number">-6.5</span> 或更高的版本的 CentOS 上，要求系统为<span class="number">64</span>位、系统内核版本为 <span class="number">2.6</span><span class="number">.32</span><span class="number">-431</span> 或者更高版本。内核编译时需要激活namespace,CGgroup,netfilter,veth等特性，还对iptablest等工具版有依赖要求。</span><br><span class="line"></span><br><span class="line"># 查看linux版本 需要CentOS7版本以上</span><br><span class="line">rpm -q centos-release</span><br><span class="line"># 查看内核版本</span><br><span class="line">uname -r</span><br></pre></td></tr></table></figure></li><li><p>卸载旧的docker</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧的安装的组件</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum remove docker \</span></span><br><span class="line">                  <span class="meta">docker-client</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-client-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-common</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-latest-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="meta">docker-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="attr">docker-engine</span></span><br></pre></td></tr></table></figure></li><li><p>安装依赖及设置存储库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装yum-utils</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum install -y yum-utils</span></span><br><span class="line"><span class="comment"># 设置稳定的存储库</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum-config-manager \</span></span><br><span class="line">    <span class="meta">--add-repo</span> <span class="string">\</span></span><br><span class="line">    <span class="attr">http</span>:<span class="string">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接安装最新Docker引擎和容器</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum -y install docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"><span class="comment"># 安装完成后查看版本</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><p>或者安装指定版本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 列出可用版本</span><br><span class="line">yum <span class="keyword">list</span> docker-<span class="keyword">ce</span> --showduplicates | <span class="keyword">sort</span> -r</span><br><span class="line"># 安装指定版本</span><br><span class="line">sudo yum install docker-<span class="keyword">ce</span>-<span class="symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="keyword">ce</span>-cli-<span class="symbol">&lt;VERSION_STRING&gt;</span> containerd.io</span><br><span class="line"># 例子</span><br><span class="line">sudo yum install docker-<span class="keyword">ce</span>-<span class="number">18.09</span>.<span class="number">1</span> docker-<span class="keyword">ce</span>-cli-<span class="number">18.09</span>.<span class="number">1</span> containerd.io</span><br></pre></td></tr></table></figure></li><li><p>docker的操作</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="comment"># 停止docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="comment"># 设置开机自启动</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="comment"># 查看信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 查看帮助文档</span></span><br><span class="line">docker --help</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">- <span class="comment"># 1、卸载 Docker 引擎、CLI 和容器包</span></span><br><span class="line">    sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">- <span class="comment"># 2、主机上的图像、容器、卷或自定义配置文件不会自动删除。要删除所有图像、容器和卷</span></span><br><span class="line">    sudo rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></span><br><span class="line">- <span class="comment"># 3、必须手动删除任何编辑的配置文件</span></span><br><span class="line">    sudo rm 配置文件</span><br></pre></td></tr></table></figure></li><li><p>验证docker是否安装成功</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下拉并运行hello-world镜像</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></li><li><p>阿里镜像源做为docker镜像源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">》注册阿里账号》搜索：容器镜像》镜像加速器》选择CentOS》直接复制命令运行</span><br></pre></td></tr></table></figure><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210323111816853.png" alt="image-20210323111816853"></p></li></ul><h2 id="二、docker-compose安装"><a href="#二、docker-compose安装" class="headerlink" title="二、docker-compose安装"></a>二、docker-compose安装</h2><ul><li><p>docker-compose安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https:<span class="regexp">//gi</span>thub.com<span class="regexp">/docker/</span>compose<span class="regexp">/releases/</span>download<span class="regexp">/1.21.2/</span>docker-compose-$(uname -s)-$(uname -m) -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line">sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line"><span class="comment"># 1.21.2 是docker-compose版本，可以根据自己需求在github查找版本</span></span><br><span class="line"><span class="comment"># docker-compose-$(uname -s)-$(uname -m)  在centos7中输出为docker-compose-Linux-x86_64</span></span><br></pre></td></tr></table></figure></li><li><p>docker-compose命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose 命令默认使用的配置文件是当前目录中的 docker-compose.yml 文件</span></span><br><span class="line">docker<span class="literal">-compose</span> up</span><br><span class="line"><span class="comment"># -f 指定其他配置文件。可以添加多个 -f 选项，docker-compose 会自动合并它们，当然也会根据先后顺序把一些重复的配置项覆盖掉</span></span><br><span class="line"><span class="comment"># 自动完成包括构建镜像，(重新)创建服务，启动服务，并关联服务相关容器的一系列操作。不过在前台打印信息，ctrl+c容器就会停止</span></span><br><span class="line">docker<span class="literal">-compose</span> <span class="operator">-f</span> docker<span class="literal">-compose</span>.yml <span class="operator">-f</span> docker<span class="literal">-compose</span><span class="literal">-dev</span> up </span><br><span class="line"><span class="comment"># 后台启动并运行</span></span><br><span class="line">docker<span class="literal">-compose</span> <span class="operator">-f</span> docker<span class="literal">-compose</span>.yml <span class="operator">-f</span> docker<span class="literal">-compose</span><span class="literal">-dev</span> up <span class="literal">-d</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三、docker-compose-jenkins部署"><a href="#三、docker-compose-jenkins部署" class="headerlink" title="三、docker-compose+jenkins部署"></a>三、docker-compose+jenkins部署</h2><ul><li><p>关于jenkins的docker-compose.yml文件</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: '3.1'</span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    image: jenkins/jenkins:lts</span><br><span class="line">    volumes:       # 挂载目录  本地文件夹目录:容器文件夹目录</span><br><span class="line">      -<span class="ruby"> /data/jenkins/<span class="symbol">:/var/jenkins_home</span></span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/var/run</span><span class="regexp">/docker.sock:/var</span><span class="regexp">/run/docker</span>.sock</span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/usr/bin</span><span class="regexp">/docker:/usr</span><span class="regexp">/bin/docker</span></span></span><br><span class="line"><span class="ruby">      - <span class="regexp">/usr/lib</span><span class="regexp">/x86_64-linux-gnu/libltdl</span>.so.<span class="number">7</span><span class="symbol">:/usr/lib/x86_64-linux-gnu/libltdl</span>.so.<span class="number">7</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">ports:</span>   <span class="comment"># 绑定端口</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"8080:8080"</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">expose:</span>  <span class="comment"># 暴露端口</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"8080"</span></span></span><br><span class="line"><span class="ruby">      - <span class="string">"50000"</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">privileged:</span> <span class="literal">true</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">user:</span> root</span></span><br><span class="line"><span class="ruby">    <span class="symbol">restart:</span> always</span></span><br><span class="line"><span class="ruby">    <span class="symbol">container_name:</span> jenkins</span></span><br><span class="line"><span class="ruby">    <span class="symbol">environment:</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">JAVA_OPTS:</span> <span class="string">'-Djava.util.logging.config.file=/var/jenkins_home/log.properties'</span></span></span><br></pre></td></tr></table></figure></li><li><p>在docker-compose.yml的目录输入<code>docker-compose up -d</code></p></li><li><p>输入网址 ip + 端口访问，若显示页面，则jenkins启动成功</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210325092428652.png" alt="image-20210325092428652"></p></li></ul><h2 id="四、异常处理"><a href="#四、异常处理" class="headerlink" title="四、异常处理"></a>四、异常处理</h2><ol><li>如果创建任务时，没有maven项目选项，则在下载安装对应maven插件</li><li>如果构建环境没有send ssh选项，则下载安装对应Publish Over SSH插件</li></ol>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-装饰者模式</title>
      <link href="/2022/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-装饰者模式"><a href="#设计模式-装饰者模式" class="headerlink" title="设计模式-装饰者模式"></a>设计模式-装饰者模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：<strong>不修改</strong>现有对象情况下，<strong>扩展新</strong>的功能</li><li>主要用途：<ul><li>在不改变现有对象结构的情况下，动态地给一个对象增加新的功能</li><li>需要添加一些附加的功能，但是使用继承会导致类的数量增加，且继承层次复杂，而装饰者可以聚合新功能的类，添加新功能</li></ul></li><li>代码：原有的类/接口、抽象装饰者类、具体新功能的装饰者子类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以用户信息加密为例，保存加密的用户信息、展示解密的用户信息</p></li><li><p>原有类/接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter 和 toString 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            user = <span class="keyword">new</span> User();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAccount</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">            user.account = account;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">            user.password = password;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">            user.mobile = mobile;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户服务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示用户信息</span></span><br><span class="line">    <span class="function">User <span class="title">showUserInfo</span><span class="params">(String account)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户服务实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, User&gt; storage = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span> </span>&#123;</span><br><span class="line">        User.Builder builder = <span class="keyword">new</span> User.Builder();</span><br><span class="line">        User user = builder.setAccount(account)</span><br><span class="line">                .setPassword(password)</span><br><span class="line">                .setMobile(mobile).builder();</span><br><span class="line">        storage.put(account, user);</span><br><span class="line">        System.out.println(<span class="string">"用户创建成功 user: "</span> + user.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">showUserInfo</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">        User user = storage.get(account);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原先用户服务用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.createUser(<span class="string">"admin"</span>, <span class="string">"admin123"</span>, <span class="string">"15113088283"</span>);</span><br><span class="line">        User admin = userService.showUserInfo(<span class="string">"admin"</span>);</span><br><span class="line">        System.out.println(<span class="string">"用户信息 admin: "</span> + admin.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">用户创建成功 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br><span class="line">用户信息 admin: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象装饰者类： 为了提供一个通用的接口，让所有具体的装饰者类都实现该接口，并且可以互相替换，达到灵活扩展的效果</p><ul><li>PS: 个人认为如果只有一个新功能的话，其实用一个具体装饰者也没问题。不过不利于后续扩展，谁能说以后没有新功能加入呢</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户抽象装饰者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceDecorator</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceDecorator</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体装饰者类：加解密功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceEncryptionDecorator</span> <span class="keyword">extends</span> <span class="title">UserServiceDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceEncryptionDecorator</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(userService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据加密功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64Encryptor.encrypt(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据解密功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decrypt</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64Encryptor.decrypt(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String account, String password, String mobile)</span> </span>&#123;</span><br><span class="line">        password = encrypt(password);</span><br><span class="line">        mobile = encrypt(mobile);</span><br><span class="line">        userService.createUser(account, password, mobile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">showUserInfo</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">        User user = userService.showUserInfo(account);</span><br><span class="line">        String password = decrypt(user.getPassword());</span><br><span class="line">        String mobile = decrypt(user.getMobile());</span><br><span class="line">        <span class="comment">// 拷贝到新的对象，并返回</span></span><br><span class="line">        User decryptUser = <span class="keyword">new</span> User.Builder()</span><br><span class="line">                .setAccount(account)</span><br><span class="line">                .setPassword(password)</span><br><span class="line">                .setMobile(mobile).builder();</span><br><span class="line">        <span class="keyword">return</span> decryptUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰了加解密功能的用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">// 添加用户加解密功能，代码效果看，就新增一行代码，就体现不同效果</span></span><br><span class="line">        userService = <span class="keyword">new</span> UserServiceEncryptionDecorator(userService);</span><br><span class="line">        </span><br><span class="line">        userService.createUser(<span class="string">"admin"</span>, <span class="string">"admin123"</span>, <span class="string">"15113088283"</span>);</span><br><span class="line">        User admin = userService.showUserInfo(<span class="string">"admin"</span>);</span><br><span class="line">        System.out.println(<span class="string">"解密后的用户信息 admin: "</span> + admin.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">用户创建成功 user: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'YWRtaW4xMjM='</span>, mobile=<span class="string">'MTUxMTMwODgyODM='</span>&#125;</span><br><span class="line">解密后的用户信息 admin: User&#123;account=<span class="string">'admin'</span>, password=<span class="string">'admin123'</span>, mobile=<span class="string">'15113088283'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-桥接模式</title>
      <link href="/2022/02/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-桥接模式"><a href="#设计模式-桥接模式" class="headerlink" title="设计模式-桥接模式"></a>设计模式-桥接模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：<strong>抽象</strong>与<strong>实现</strong>分离，以便独立变化使用</li><li>主要用途<ul><li>抽象与实现之间存在多重维度的变化。比如：车辆根据不同的类型，有不同的维修策略</li><li>需要将一个类的抽象部分和实现部分分离出来，从而可以独立地改变它们</li></ul></li><li>代码：抽象类、实现类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以文件管理为例</p></li><li><p>抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileManagerImpl</span> <span class="keyword">implements</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件创建成功，文件名： "</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileManager fileManager = <span class="keyword">new</span> FileManagerImpl();</span><br><span class="line">        fileManager.createFile(<span class="string">"/resources"</span>, <span class="string">"resource.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">文件创建成功，文件名： resource.txt</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 桥接模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-适配器模式</title>
      <link href="/2022/01/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/01/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-适配器模式"><a href="#设计模式-适配器模式" class="headerlink" title="设计模式-适配器模式"></a>设计模式-适配器模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>适配器</strong>，将<strong>一个接口</strong>适配满足<strong>另一个接口</strong>需求</li><li>主要用途<ul><li>用于连接两个互不兼容的接口场景：比如订单数据同步道ERP系统，但两个数据格式不兼容，这时可以用适配器模式转换数据格式</li><li>适配第三方服务商API：比如云存储功能，需要适配器兼容不同的第三方服务商API，从而达到服务商的切换</li></ul></li><li>代码：接口A、适配器、接口B（不一定是接口，可以是类）</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以云存储为例，需要兼容不同服务商API</p></li><li><p>文件操作接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不同云存储服务商API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟阿里云OSS服务商API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(String bucketName, String key, InputStream input)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"阿里云OSS上传文件成功,文件名: "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟Minio服务商API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(PutObjectArgs args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Minio上传文件成功,文件名: "</span> + args.getObjectName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PutObjectArgs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> InputStream stream;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String objectName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> InputStream <span class="title">getStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> stream;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStream</span><span class="params">(InputStream stream)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.stream = stream;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getObjectName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> objectName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectName</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.objectName = objectName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不同服务商的适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云OSS API适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssAdapter</span> <span class="keyword">implements</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OssClient ossClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OssAdapter</span><span class="params">(OssClient ossClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ossClient = ossClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream input = getClass().getResourceAsStream(filePath)) &#123;</span><br><span class="line">            ossClient.putObject(<span class="string">"bucketName"</span>, fileName, input);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取文件失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Minio API 适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioAdapter</span> <span class="keyword">implements</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinioAdapter</span><span class="params">(MinioClient minioClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.minioClient = minioClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream input = getClass().getResourceAsStream(filePath)) &#123;</span><br><span class="line">            MinioClient.PutObjectArgs putObjectArgs = <span class="keyword">new</span> MinioClient.PutObjectArgs();</span><br><span class="line">            putObjectArgs.setStream(input);</span><br><span class="line">            putObjectArgs.setObjectName(fileName);</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取文件失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Storage ossStorage = <span class="keyword">new</span> OssAdapter(<span class="keyword">new</span> OssClient());</span><br><span class="line">        ossStorage.uploadFile(<span class="string">"resource.txt"</span>, <span class="string">"resource.txt"</span>);</span><br><span class="line"></span><br><span class="line">        Storage minioStorage = <span class="keyword">new</span> MinioAdapter(<span class="keyword">new</span> MinioClient());</span><br><span class="line">        minioStorage.uploadFile(<span class="string">"resource.txt"</span>, <span class="string">"resource.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">阿里云OSS上传文件成功,文件名: resource.txt</span><br><span class="line">Minio上传文件成功,文件名: resource.txt</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 适配器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式-反射破坏</title>
      <link href="/2022/01/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-%E5%8F%8D%E5%B0%84%E7%A0%B4%E5%9D%8F/"/>
      <url>/2022/01/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-%E5%8F%8D%E5%B0%84%E7%A0%B4%E5%9D%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式-反射破坏"><a href="#单例模式-反射破坏" class="headerlink" title="单例模式-反射破坏"></a>单例模式-反射破坏</h1><h2 id="一、反射破坏"><a href="#一、反射破坏" class="headerlink" title="一、反射破坏"></a>一、反射破坏</h2><ul><li>概念：通过反射机制调用私有的构造器，创建新的实例，破坏单例模式约束</li><li>解决措施<ul><li>懒汉模式、双重检测锁模式、饿汉模式、静态内部类：通过对私有构造方法，判断实例是否创建，进而避免反射破坏</li><li>枚举单例模式：<code>JDK</code> 针对反射做了处理，如果是枚举就报异常，进而避免反射破坏</li></ul></li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><blockquote><p>只针对具体问题列举代码，请结合<a href="https://deschen.cn/2022/01/29/设计模式-单例模式/" target="_blank" rel="noopener">设计模式-单例模式</a>使用</p></blockquote><ul><li><p>懒汉模式</p><ul><li>优点：类的方法被调用后创建实例，反射是无法创建实例的</li><li>缺点：如果类的方法没被调用，那么反射是可以无限创建实例，破坏单例模式约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"LazySingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      Constructor&lt;LazySingleton&gt; constructor =</span><br><span class="line">                LazySingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 反射 在 懒加载 前执行</span></span><br><span class="line">        LazySingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">        LazySingleton singletonByReflect2 = constructor.newInstance();</span><br><span class="line">        LazySingleton singleton = LazySingleton.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个"</span> + (singletonByReflect1 == singletonByReflect2));</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 懒加载 在 反射 前执行</span></span><br><span class="line">        LazySingleton singletonByReflect3 = constructor.newInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先类调用getInstance()，在反射创建实例, 实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">mainLazySingleton创建</span><br><span class="line">mainLazySingleton创建</span><br><span class="line">mainLazySingleton创建</span><br><span class="line">处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个<span class="keyword">false</span></span><br><span class="line">处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个：<span class="keyword">false</span></span><br><span class="line">mainLazySingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.lazySingleton(Demo.java:<span class="number">117</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">28</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.LazySingleton.&lt;init&gt;(LazySingleton.java:<span class="number">15</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>双重检测锁（优缺点跟懒加载一样）</p><ul><li>优点：类的方法被调用后创建实例，反射是无法创建实例的</li><li>缺点：如果类的方法没被调用，那么反射是可以无限创建实例，破坏单例模式约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLockSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckLockSingleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLockSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"DoubleCheckLockSingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      Constructor&lt;DoubleCheckLockSingleton&gt; constructor =</span><br><span class="line">                DoubleCheckLockSingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 反射 在 懒加载 前执行</span></span><br><span class="line">        DoubleCheckLockSingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">        DoubleCheckLockSingleton singletonByReflect2 = constructor.newInstance();</span><br><span class="line">        DoubleCheckLockSingleton singleton = DoubleCheckLockSingleton.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个"</span> + (singletonByReflect1 == singletonByReflect2));</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 懒加载 在 反射 前执行</span></span><br><span class="line">        DoubleCheckLockSingleton singletonByReflect3 = constructor.newInstance();</span><br><span class="line">        System.out.println(<span class="string">"处理过的构造方法，先类调用getInstance()，在反射创建实例, 实例是否为同一个："</span> + (singleton == singletonByReflect1));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">thread of passing the first lock：main</span><br><span class="line">thread of creating instance: main</span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">处理过的构造方法，先反射创建实例, 那么多个反射创建的实例是否是同一个<span class="keyword">false</span></span><br><span class="line">处理过的构造方法，先反射创建实例, 在类调用getInstance()的实例是否为同一个：<span class="keyword">false</span></span><br><span class="line">mainDoubleCheckLockSingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.doubleCheckLockSingleton(Demo.java:<span class="number">145</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">30</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.DoubleCheckLockSingleton.&lt;init&gt;(DoubleCheckLockSingleton.java:<span class="number">18</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>饿汉模式</p><ul><li>优点：因为反射触发类加载，而类加载有且创建一个实例，避免反射破坏</li><li>缺点：造成资源浪费</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton singleton = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"HungrySingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       Constructor&lt;HungrySingleton&gt; constructor =</span><br><span class="line">                HungrySingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        HungrySingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">mainHungrySingleton创建</span><br><span class="line">mainHungrySingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.hungrySingleton(Demo.java:<span class="number">90</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">32</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.HungrySingleton.&lt;init&gt;(HungrySingleton.java:<span class="number">21</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>静态内部类</p><ul><li>优点：因为反射触发静态内部类类加载，而类加载有且创建一个实例，避免反射破坏</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"StaticInnerSingleton创建"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != StaticInner.singleton) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被侵犯！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优点：线程安全，通过类加载机制保证只有一个实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StaticInner.singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用final修饰，保证类初始化一次后，不能被修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInnerSingleton singleton = <span class="keyword">new</span> StaticInnerSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Constructor&lt;StaticInnerSingleton&gt; constructor =</span><br><span class="line">                StaticInnerSingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        StaticInnerSingleton singletonByReflect1 = constructor.newInstance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">StaticInnerSingleton创建</span><br><span class="line">StaticInnerSingleton创建</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.staticInnerSingleton(Demo.java:<span class="number">74</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">34</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 单例模式被侵犯！</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.StaticInnerSingleton.&lt;init&gt;(StaticInnerSingleton.java:<span class="number">14</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>枚举单例模式</p><ul><li><p>优点：反射创建实例中，有针对枚举单例做处理，避免多实例化 {@link Constructor#newInstance(java.lang.Object…)}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ENUM_SINGLETON,</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//其父类的构造器</span></span><br><span class="line">        Constructor&lt;EnumSingleton&gt; constructor = EnumSingleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">String</span>.<span class="title">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        EnumSingleton singleton3 = constructor.newInstance(<span class="string">"ENUM_SINGLETON"</span>, <span class="number">666</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.IllegalArgumentException: Cannot reflectively create <span class="keyword">enum</span> objects</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">417</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.enumSingleton(Demo.java:<span class="number">59</span>)</span><br><span class="line">at cn.deschen.designPattern.singleton.reflect.Demo.main(Demo.java:<span class="number">36</span>)</span><br></pre></td></tr></table></figure></li><li><p>枚举能避免反射的原因，源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Constructor</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Executable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">               IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">                Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">                checkAccess(caller, clazz, <span class="keyword">null</span>, modifiers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果反射的类是枚举，则报异常</span></span><br><span class="line">        <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot reflectively create enum objects"</span>);</span><br><span class="line">        ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">        <span class="keyword">if</span> (ca == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ca = acquireConstructorAccessor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        T inst = (T) ca.newInstance(initargs);</span><br><span class="line">        <span class="keyword">return</span> inst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例模式</title>
      <link href="/2022/01/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/01/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-单例模式"><a href="#设计模式-单例模式" class="headerlink" title="设计模式-单例模式"></a>设计模式-单例模式</h1><blockquote><p>由于要写23种设计模式博客，之前《详解五种单例模式》存在不足，我已经删了，可以在CSDN找到</p><p>请点击<a href="https://blog.csdn.net/weixin_39147889/article/details/103996455?spm=1001.2014.3001.5501" target="_blank" rel="noopener">CSDN链接</a></p></blockquote><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念: 一个类有且只有<strong>唯一</strong>一个实例，提供系统使用</li><li>主要用途：资源的共享、减少重复创建资源开销</li><li>优缺点<ul><li>优点：节约资源以及提高资源的利用率，如果一个应用总是产生相同的实例，实例一多，就会导致系统内存不足，运行响应缓慢，甚至宕机</li><li>缺点： 如果实例化的对象长时间不被利用，系统会认为该对象是垃圾而被回收，这可能会导致对象状态的丢失</li></ul></li><li>模式：懒汉模式、双重检测锁模式、饿汉模式、静态内部类模式、枚举单例模式</li></ul><h2 id="二、五种单例模式"><a href="#二、五种单例模式" class="headerlink" title="二、五种单例模式"></a>二、五种单例模式</h2><blockquote><p>单例模式三个主要特点：1、构造方法私有化；2、实例化的变量引用私有化；3、获取实例的方法共有</p></blockquote><ul><li><p>懒汉模式</p><ul><li><p>类不会立刻创建实例，而是调用方法时创建</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传统的懒汉模式</span></span><br><span class="line"><span class="comment"> * 缺点：</span></span><br><span class="line"><span class="comment"> *     1、线程不安全，多线程下同时创建多个实例  </span></span><br><span class="line"><span class="comment"> *     2、存在指令重排的问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LazySingleton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断实例是否已创建</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式 &#123;<span class="doctag">@link</span> LazySingleton&#125;的改进版本，针对存在的问题改进</span></span><br><span class="line"><span class="comment"> * 优化点：</span></span><br><span class="line"><span class="comment"> *       1、synchronized，通过类锁，保证多线程下方法调用串行化，保证有且只有一个实例创建</span></span><br><span class="line"><span class="comment"> *       2、使用 volatile 避免指令重排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazySingleton01 singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LazySingleton01创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> synchrsonized LazySingleton01 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断实例是否已创建</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> LazySingleton01();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>双重检测锁模式</p><ul><li><p>进行了两次的判断，第一次是为了避免不要的实例，第二次结合<code>synchrsonized</code>，避免多线程创建多实例问题</p></li><li><p>PS：是对懒汉模式的进一步优化</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重校验锁单例模式，针对懒汉模式&#123;<span class="doctag">@link</span> LazySingleton01 &#125;存在性能问题的改进</span></span><br><span class="line"><span class="comment"> * 优点：线程安全</span></span><br><span class="line"><span class="comment"> * 优化点：第一次判断后再用synchronized类锁，避免所有线程调用方法时阻塞</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLockSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用volatile 防止指令重排</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckLockSingleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLockSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"DoubleCheckLockSingleton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLockSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否存在，避免重复创建实例,不过多线程可以进入</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">            <span class="comment">// 使用synchronized，单线程通行，防止多线程进入</span></span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckLockSingleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"thread of passing the first lock："</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">// 再次判断是否存在，防止多线程创建，达到双重检测</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"thread of creating instance: "</span> + Thread.currentThread().getName());</span><br><span class="line">                    singleton = <span class="keyword">new</span> DoubleCheckLockSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>饿汉模式</p><ul><li><p>类加载时立刻创建实例，线程安全</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * 优点：线程安全，通过类加载机制保证只有一个实例</span></span><br><span class="line"><span class="comment"> * 缺点：造成内存浪费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类初始化创建实例</span></span><br><span class="line"><span class="comment">     * 使用final修饰，保证类初始化一次后，不能被修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton singlenton = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HungrySinglenton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singlenton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态内部类</p><ul><li><p>方法被调用时（懒汉模式），静态内部类初始化创建实例（饿汉模式）</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类</span></span><br><span class="line"><span class="comment"> * 优点：线程安全，通过类加载机制保证只有一个实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"StaticInnerSingleton创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StaticInner.singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用final修饰，保证类初始化一次后，不能被修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInnerSingleton singleton = <span class="keyword">new</span> StaticInnerSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>枚举单例</p><ul><li><p>枚举单例也是一种单例模式，主要解决反射破坏单例模式约束问题（<code>JDK</code>会对反射做了处理）</p></li><li><p>反射破坏：通过反射机制调用私有的构造器，创建新的实例，破坏单例模式约束（前面四种设计模式都会被破坏）</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举单例模式</span></span><br><span class="line"><span class="comment"> *     优点：线程安全</span></span><br><span class="line"><span class="comment"> *     不足：不常用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line">    ENUM_SINGLETON,</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-原型模式</title>
      <link href="/2022/01/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/01/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：实现 <code>Cloneable</code> 接口，该对象通过调用<strong>clone()方法</strong>拷贝自身，创建新的对象</li><li>主要用途：直接创建的对象开销大时，直接克隆已创建的对象，减少开销</li><li>代码：实现 <code>cloneable</code> 接口的产品</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以文件为例，拷贝文件及文件夹</p></li><li><p>产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件抽象类，表示文件这类产品（文件、文件夹）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFile</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractFile <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"AbstractFile&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", content='"</span> + content + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String name, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractFile <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> File(<span class="keyword">this</span>.name, <span class="keyword">this</span>.content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件夹</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractFile&gt; files;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractFile <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Folder folder = <span class="keyword">new</span> Folder(<span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">for</span> (AbstractFile file : <span class="keyword">this</span>.files) &#123;</span><br><span class="line">            folder.addFile(file.clone());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> folder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFile</span><span class="params">(AbstractFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.files.add(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractFile&gt; <span class="title">getFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> files;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Folder&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", content='"</span> + content + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", files="</span> + files +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.doc"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        Folder folder = <span class="keyword">new</span> Folder(<span class="string">"test"</span>);</span><br><span class="line">        folder.addFile(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拷贝文件</span></span><br><span class="line">        AbstractFile copyFile = file.clone();</span><br><span class="line">        copyFile.setName(<span class="string">"test_copy.doc"</span>);</span><br><span class="line">        System.out.println(copyFile.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拷贝文件夹</span></span><br><span class="line">        AbstractFile copyFolder = folder.clone();</span><br><span class="line">        copyFolder.setName(<span class="string">"test_copy"</span>);</span><br><span class="line">        System.out.println(copyFolder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">AbstractFile&#123;name=<span class="string">'test_copy.doc'</span>, content=<span class="string">'123456'</span>&#125;</span><br><span class="line">Folder&#123;name=<span class="string">'test_copy'</span>, content=<span class="string">'null'</span>, files=[AbstractFile&#123;name=<span class="string">'test.doc'</span>, content=<span class="string">'123456'</span>&#125;]&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-建造者模式</title>
      <link href="/2022/01/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/01/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>产品建造者抽象</strong>，<strong>指导者</strong>通过<strong>不同建造者</strong>，管理<strong>其依赖关系创建对象</strong></li><li>主要用途：将一个复杂的构建（builder）与其装配（Director）相分离，使得同样的构建过程可以创建不同的表示。经常应用在产品的组成稳定，但各部分经常面临剧烈变化的业务场景</li><li>代码：产品建造者抽象、具体的建造者、指导者</li></ul><h2 id="二、代码-源码位置"><a href="#二、代码-源码位置" class="headerlink" title="二、代码 源码位置"></a>二、代码 <a href="../../src/main/java/cn/deschen/designPattern/creational/builder/Demo.java">源码位置</a></h2><ul><li><p>以文件为例，创建不同类型的文件（文档、图片、视频等）</p></li><li><p>文件类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileType fileType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> fileSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileType <span class="title">getFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileType</span><span class="params">(FileType fileType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileType = fileType;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFileSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileSize</span><span class="params">(<span class="keyword">long</span> fileSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"File&#123;"</span> +</span><br><span class="line">                <span class="string">"fileType="</span> + fileType +</span><br><span class="line">                <span class="string">", fileName='"</span> + fileName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", fileSize="</span> + fileSize +</span><br><span class="line">                <span class="string">", content="</span> + content +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>产品建造者抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FileBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> File file = <span class="keyword">new</span> File();</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> FileBuilder <span class="title">buildFileType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileBuilder <span class="title">buildFileName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        file.setFileName(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileBuilder <span class="title">buildFileSize</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">        file.setFileSize(size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileBuilder <span class="title">buildFileContent</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">        file.setContent(content);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> File <span class="title">getFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体的建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文档建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentBuilder</span> <span class="keyword">extends</span> <span class="title">FileBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">FileBuilder <span class="title">buildFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        file.setFileType(FileType.DOCUMENT);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageBuilder</span> <span class="keyword">extends</span> <span class="title">FileBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">FileBuilder <span class="title">buildFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        file.setFileType(FileType.IMAGE);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指导者：通过建造者，管理其依赖顺序，并创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件指导类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDirector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">createFile</span><span class="params">(FileBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.buildFileType()</span><br><span class="line">                .getFile();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DocumentBuilder documentBuilder = <span class="keyword">new</span> DocumentBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建文档文件</span></span><br><span class="line">        documentBuilder.buildFileName(<span class="string">"test.doc"</span>)</span><br><span class="line">                .buildFileSize(<span class="number">1024L</span>)</span><br><span class="line">                .buildFileContent(<span class="string">"This is a document."</span>);</span><br><span class="line">        File document = FileDirector.createFile(documentBuilder);</span><br><span class="line">        System.out.println(document.toString());</span><br><span class="line"></span><br><span class="line">        ImageBuilder imageBuilder = <span class="keyword">new</span> ImageBuilder();</span><br><span class="line">        <span class="comment">// 构建图片文件</span></span><br><span class="line">        imageBuilder.buildFileName(<span class="string">"test.png"</span>)</span><br><span class="line">                .buildFileSize(<span class="number">512L</span>)</span><br><span class="line">                .buildFileContent(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">        File image = FileDirector.createFile(imageBuilder);</span><br><span class="line">        System.out.println(image.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">File&#123;fileType=DOCUMENT, fileName=<span class="string">'test.doc'</span>, fileSize=<span class="number">1024</span>, content=This is a document.&#125;</span><br><span class="line">File&#123;fileType=IMAGE, fileName=<span class="string">'null'</span>, fileSize=<span class="number">512</span>, content=[B@<span class="number">1</span>b6d3586&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建造者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-抽象工厂模式</title>
      <link href="/2022/01/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/01/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-抽象工厂模式"><a href="#设计模式-抽象工厂模式" class="headerlink" title="设计模式-抽象工厂模式"></a>设计模式-抽象工厂模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念: 定义一个<strong>抽象工厂接口</strong>，根据传入的<strong>类型</strong>创建对应的<strong>工厂</strong>，进而创建一组相关的对象</li><li>主要用途：有多于一个的产品族，根据类型选择某一组的产品</li><li>代码：多组产品接口、子类和工厂、抽象工厂、产品组选择器</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>多组产品接口、子类和工厂</p><ul><li><p>交通工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a bicycle."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a car."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a plane."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transport <span class="title">createTransport</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"car"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bicycle"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Bicycle();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"plane"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Plane();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid transport type: "</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">createAnimal</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>动物类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bird fly."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cat run."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fish</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fish swim."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transport <span class="title">createTransport</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">createAnimal</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"cat"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bird"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Bird();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"fish"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Fish();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid animal type: "</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>抽象工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Transport <span class="title">createTransport</span><span class="params">(String type)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Animal <span class="title">createAnimal</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>产品组选择器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactorySelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"transport"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> TransportFactory();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"animal"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AnimalFactory();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid factory type: "</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 选择交通工具工厂</span></span><br><span class="line">        AbstractFactory transportFactory = FactorySelector.getFactory(<span class="string">"transport"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建汽车</span></span><br><span class="line">        Transport car = transportFactory.createTransport(<span class="string">"car"</span>);</span><br><span class="line">        car.drive();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建自行车</span></span><br><span class="line">        Transport bicycle = transportFactory.createTransport(<span class="string">"bicycle"</span>);</span><br><span class="line">        bicycle.drive();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建飞机</span></span><br><span class="line">        Transport plane = transportFactory.createTransport(<span class="string">"plane"</span>);</span><br><span class="line">        plane.drive();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"========================"</span>);</span><br><span class="line">        <span class="comment">// 选择动物工厂</span></span><br><span class="line">        AbstractFactory animalFactory = FactorySelector.getFactory(<span class="string">"animal"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建猫</span></span><br><span class="line">        Animal cat = animalFactory.createAnimal(<span class="string">"cat"</span>);</span><br><span class="line">        cat.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建鸟</span></span><br><span class="line">        Animal bird = animalFactory.createAnimal(<span class="string">"bird"</span>);</span><br><span class="line">        bird.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建鱼</span></span><br><span class="line">        Animal fish = animalFactory.createAnimal(<span class="string">"fish"</span>);</span><br><span class="line">        fish.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Driving a car.</span><br><span class="line">Driving a bicycle.</span><br><span class="line">Driving a plane.</span><br><span class="line">========================</span><br><span class="line">Cat run</span><br><span class="line">Bird fly.</span><br><span class="line">Fish swim.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽象工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-工厂模式</title>
      <link href="/2022/01/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/01/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-工厂模式"><a href="#设计模式-工厂模式" class="headerlink" title="设计模式-工厂模式"></a>设计模式-工厂模式</h1><h2 id="一、详解"><a href="#一、详解" class="headerlink" title="一、详解"></a>一、详解</h2><ul><li>概念：定义一个<strong>产品接口</strong>，根据向<strong>工厂类</strong>传递的<strong>类型</strong>，创建相应的<strong>产品实例</strong>并返回</li><li>主要用途：根据不同条件，创建不同产品</li><li>代码：产品接口、产品子类、工厂类</li></ul><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><ul><li><p>以交通工具为例，根据不同类型，驾驶不同交通工具</p></li><li><p>产品接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>产品子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a bicycle."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a car."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Driving a plane."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.deschen.designPattern.factoryPattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.deschen.designPattern.factoryPattern.entity.Bicycle;</span><br><span class="line"><span class="keyword">import</span> cn.deschen.designPattern.factoryPattern.entity.Car;</span><br><span class="line"><span class="keyword">import</span> cn.deschen.designPattern.factoryPattern.entity.Plane;</span><br><span class="line"><span class="keyword">import</span> cn.deschen.designPattern.factoryPattern.entity.Transport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> hanbin_chen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 交通工具工厂，根据条件动态创建对象并返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transport <span class="title">createTransport</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"car"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bicycle"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Bicycle();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"plane"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Plane();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid transport type: "</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建汽车</span></span><br><span class="line">        Transport car = TransportFactory.createTransport(<span class="string">"car"</span>);</span><br><span class="line">        car.drive();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建自行车</span></span><br><span class="line">        Transport bicycle = TransportFactory.createTransport(<span class="string">"bicycle"</span>);</span><br><span class="line">        bicycle.drive();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建飞机</span></span><br><span class="line">        Transport plane = TransportFactory.createTransport(<span class="string">"plane"</span>);</span><br><span class="line">        plane.drive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Driving a car.</span><br><span class="line">Driving a bicycle.</span><br><span class="line">Driving a plane.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题-MySQL</title>
      <link href="/2021/08/10/%E9%9D%A2%E8%AF%95%E9%A2%98-MySQL/"/>
      <url>/2021/08/10/%E9%9D%A2%E8%AF%95%E9%A2%98-MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL面试题"><a href="#MySQL面试题" class="headerlink" title="MySQL面试题"></a>MySQL面试题</h2><h3 id="MySQL-事务ACID特征"><a href="#MySQL-事务ACID特征" class="headerlink" title="MySQL 事务ACID特征"></a>MySQL 事务ACID特征</h3><ul><li>原子性：事务最小执行单位。要么全部成功，要么全部失败</li><li>一致性：执行事务前后，数据保持一致。</li><li>隔离性：一个用户的事务不被其他事务所干扰</li><li>持久性：事务一旦提交，对数据的改变是永久的</li></ul><h3 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h3><ul><li>脏读：事务A读取到事务B未提交的数据</li><li>丢失更新：事务A 修改了数据后，事务B 也修改这个数据，导致事务A的修饰结果丢失</li><li>不可重复度：事务A 因为 事务B的修改，导致前后读取的数据不一样</li><li>幻读：事务A因为事务B的插入，导致前后查询发现多了原先不存在的数据<ul><li>mysql 针对幻读处理</li><li>针对快照都（select），通过MVCC解决幻读，读取到的数据是事务启动看到的数据，即使发生插入也不会查询到，避免幻读</li><li>针对当前读（select for update）,通过next-key(记录锁+间隙锁)解决幻读，当执行select for update操作，就会插入next-key，如果由其他事务在锁范围内，就会阻塞无法插入成功，避免幻读</li></ul></li></ul><h3 id="SQL的隔离级别"><a href="#SQL的隔离级别" class="headerlink" title="SQL的隔离级别"></a>SQL的隔离级别</h3><ul><li>读未提交：读取未提交的数据，会导致脏读、幻读、不可重复读</li><li>读已提交：读取已提交的数据，会导致不可重复度和幻读</li><li>可重复读：同一事务，多次读取的数据结果一致，但是幻读可能会发生</li><li>串行化：事务逐个执行，能解决所有问题，不过效率最低</li></ul><h3 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h3><ul><li>帮助存储引擎快速获取数据的一种数据结构 </li></ul><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><ul><li>「数据结构」分类：<strong>B+tree索引、Hash索引、Full-text索引</strong></li><li>「物理存储」分类：<strong>聚簇索引（主键索引）、非聚簇索引（辅助索引）</strong>。</li><li>[字段特性」分类：<strong>主键索引、唯一索引、普通索引、前缀索引</strong>。</li><li>「字段个数」分类：<strong>单列索引、联合索引</strong>。</li></ul><h3 id="什么是B-树索引"><a href="#什么是B-树索引" class="headerlink" title="什么是B+树索引"></a>什么是B+树索引</h3><ul><li>B+Tree 是一种多叉树，叶子节点才存放数据，非叶子节点只存放索引，且节点按索引排序。父节点的索引都出现在下一层的节点中，叶子节点都有两个指针指向上一个叶子节点和下一个叶子节点，形成双向链表</li><li>为什么使用B+树<ul><li>因为B+树存储千万级数据数据只需3-4层，也就意味着最多只进行3-4层的磁盘I/O，查询效率高</li><li>与B树相比，优势<ul><li>B+树非叶子节点存放索引，叶子节点存放数据，而B树所有节点存放数据，那么在相同磁盘I/O下，B+树读取的数据量更多，查询效率更高</li><li>B+树叶子节点采用双向链表，适合范围查询，而B树无法做到这点</li></ul></li><li>与二叉树相比<ul><li>二叉树每个节点最多只有两个子节点，数据量越大，那么高度越高，磁盘I/O次数就更多，查询性能大大减低；而B+树，千万级数据的高度也就3-4层</li></ul></li><li>与Hah相比<ul><li>hash索引适合等值查询，不适合范围查找；B+树比hash广泛的应用场景</li></ul></li></ul></li></ul><h3 id="什么是回表"><a href="#什么是回表" class="headerlink" title="什么是回表"></a>什么是回表</h3><ul><li><p>一般发生在非聚簇索引中，即查询的数据不在非聚簇索引中，导致根据主键重新在主键索引查询</p></li><li><p>而如果查询的数据存在非聚簇索引中，那么叫做覆盖索引</p></li></ul><h3 id="聚簇索引和非聚簇索引的区别"><a href="#聚簇索引和非聚簇索引的区别" class="headerlink" title="聚簇索引和非聚簇索引的区别"></a>聚簇索引和非聚簇索引的区别</h3><ul><li>在于叶子节点是否存储完整数据还是主键索引，完整数据是聚簇索引，主键索引是非聚簇索引</li></ul><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><ul><li>字符串类型前面几个字符组成的索引</li></ul><h3 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h3><ul><li>多个字段组合成一个索引</li><li>使用联合索引时，存在<strong>最左匹配原则</strong>，按照最左优先进行索引匹配，否则索引失效</li><li>并不是所有的字段都用到联合索引，比如范围查询；范围查询的字段用联合索引，查询字段后面无法用联合索引<ul><li>比如 where a &gt; 1 and b &gt; 2; 这种情况根据a进行范围查询，范围中b是无序的，b没有用到范围索引；也可以通过explain的 key_len判断索引用到了那些字段，一般</li><li>但是 where a &gt;=1 and b &gt;2 就不一样了，因为在 a == 1中，b又是有序的，组成俩和索引</li></ul></li></ul><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><ul><li>在联合索引遍历过程中，对联合索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</li></ul><h3 id="索引区分度"><a href="#索引区分度" class="headerlink" title="索引区分度"></a>索引区分度</h3><ul><li><strong>**建立联合索引时</strong>，要把区分度大的字段排在前面，这样区分度大的字段越有可能被更多的 SQL 使用到**。</li></ul><h3 id="什么时候需要-不需要创建索引"><a href="#什么时候需要-不需要创建索引" class="headerlink" title="什么时候需要 / 不需要创建索引"></a>什么时候需要 / 不需要创建索引</h3><ul><li>优缺点：索引虽然能提高查询效率，不过索引越多，维护成本越高，占用的空间越大，减低增删改的效率</li><li>什么使用用？<ul><li>常用where 、order by、 group by的场景，因为索引是排好序的</li><li>字段唯一限制</li></ul></li><li>不需要用<ul><li><code>WHERE</code> 条件，<code>GROUP BY</code>，<code>ORDER BY</code> 里用不到的字段</li><li>字段存在存在大量重复数据，查询优化器会将其索引忽略，全表扫描</li><li>经常更新的字段不用创建索引</li></ul></li></ul><h3 id="优化索引的方法"><a href="#优化索引的方法" class="headerlink" title="优化索引的方法"></a>优化索引的方法</h3><ul><li><p>前缀索引优化：一些大字符串的字段作为索引时，使用前缀索引可以帮助我们减小索引项的大小，提高查询效率</p><ul><li>order by 就无法使用前缀索引</li><li>无法把前缀索引用作覆盖索引</li></ul></li><li><p>覆盖索引优化：非聚簇索引能够查询到的记录，避免回表</p></li><li><p>主键索引最好是自增的</p><ul><li><strong>使用自增主键</strong>，那么每次插入的新数据就会按顺序添加到当前索引节点的位置，不需要移动已有的数据</li><li><strong>使用非自增主键</strong>，插入新的数据时，就可能会插入到现有数据页中间的某个位置，这将不得不移动其它数据来满足新数据的插入，甚至需要从一个页面复制数据到另外一个页面，我们通常将这种情况称为<strong>页分裂</strong>。<strong>页分裂还有可能会造成大量的内存碎片，导致索引结构不紧凑，从而影响查询效率</strong>。</li></ul></li><li><p>索引最好设置NOT NULL</p><ul><li>避免使查询优化器的优化更复杂，因为null会使索引、索引统计更复杂。比如count会省略null数据</li><li>NULL 值是一个没意义的值，但是它会占用物理空间，所以会带来的存储空间的问题</li></ul></li><li><h3 id="防止索引失效"><a href="#防止索引失效" class="headerlink" title="防止索引失效"></a>防止索引失效</h3><ul><li>模糊查询针对右模糊，不然索引失效</li><li>避免索引列做了计算、函数、类型转换操作，不然索引失效</li><li>联合索引遵循最左匹配原则，不然索引失效</li><li>WHERE 子句中，如果在 OR 前的条件列是索引，后面不是索引索引失效</li></ul></li></ul><h3 id="MySQL-锁"><a href="#MySQL-锁" class="headerlink" title="MySQL 锁"></a>MySQL 锁</h3><ul><li><p>表级锁</p><ul><li>表锁：锁整张表</li><li>意向锁：在对某记录插入排他锁或者共享锁前，在表级别添加意向共享锁和意向排他锁，用于快速判断记录是否被加锁</li></ul></li><li><p>行级锁</p><ul><li>共享锁：读读共享，读写互斥</li><li>排他锁：写写互斥，读写互斥</li><li>类型划分<ul><li>记录锁：锁住一条行数据</li><li>间隙锁：锁定一个范围：间隙锁主要防止幻读，即插入问题；而不会阻止其他事务获取同一个范围的间隙锁的</li><li>临键锁：锁定一个范围，并且锁定记录本身</li><li>插入意向锁：插入被其他事务加了间隙锁，导致阻塞同时生成插入意向锁，表明该事务想要插入新记录</li></ul></li></ul><p>消息失效、消息发送，导致死锁原因</p><p>并发更新，导致事务A、B更新获得相同间隙的间隙锁，导致事务A插入数据阻塞，同而lock wait timeout异常</p></li></ul><h3 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h3><ul><li>Propagation.REQUIRED：默认的事务传播级别，它表示如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li>Propagation.SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>Propagation.MANDATORY：（mandatory：强制性）如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li>Propagation.REQUIRES_NEW：表示创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，Propagation.REQUIRES_NEW 修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</li><li>Propagation.NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>Propagation.NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li>Propagation.NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 PROPAGATION_REQUIRED。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Freemarker学习</title>
      <link href="/2021/03/05/Freemarker%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/03/05/Freemarker%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Freemarker学习"><a href="#Freemarker学习" class="headerlink" title="Freemarker学习"></a>Freemarker学习</h1><p>[toc]</p><blockquote><p>注意点：</p><p>1、Freemarker得注释是&lt;#–注释的内容–&gt;</p><p>2、Freemarker的标签必须完整，否则报错、失效</p></blockquote><h2 id="一、如何显示数据语法"><a href="#一、如何显示数据语法" class="headerlink" title="一、如何显示数据语法"></a>一、如何显示数据语法</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&#123;num&#125;  # num八大基础类型</span><br><span class="line">$&#123;emp.name&#125;  # obj是对象，并且要满足javaBean的规范，以及该类要以public修饰，否则无法获取其属性</span><br><span class="line">$&#123;emp.date ? <span class="keyword">string</span>（'yyyy -MM-dd'）&#125;   # 日期输出 </span><br><span class="line"><span class="comment"># list遍历，item_has_next返回true / false，需要以string返回，否则报错</span></span><br><span class="line">&lt;#<span class="keyword">list</span> <span class="keyword">list</span> as item&gt;</span><br><span class="line">    &lt;div&gt;对象：$&#123;item&#125;, 索引：$&#123;item_index&#125;，是否有下一个：$&#123;item_has_next ? <span class="keyword">string</span>&#125;&lt;/div&gt;</span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br><span class="line"><span class="comment"># map遍历</span></span><br><span class="line">&lt;#<span class="keyword">list</span> map?keys as key&gt;</span><br><span class="line">&lt;div&gt;键：$&#123;key&#125; 键值：$&#123;map[key]&#125;, 索引：$&#123;key_index&#125;，是否有下一个：$&#123;key_has_next ? <span class="keyword">string</span>&#125;&lt;/div&gt;</span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量存在，输出该变量，否则不输出</span></span><br><span class="line"><span class="variable">$&#123;</span>emp.name ? if_exists&#125;  </span><br><span class="line"><span class="variable">$&#123;</span>emp.name ! &#125;</span><br><span class="line"><span class="comment"># 变量不存在，取默认值xxx</span></span><br><span class="line"><span class="variable">$&#123;</span>emp.name ? default(<span class="string">"xxx"</span>)&#125;</span><br><span class="line"><span class="variable">$&#123;</span>emp.name ! <span class="string">"xxx"</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"123&lt;br&gt;456"</span> ? html&#125;    　<span class="comment"># 对字符串进行HTML编码，对html中特殊字符进行转义，即网页显示该字符串内容</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"str"</span> ? cap_first&#125;    　　<span class="comment"># 使字符串第一个字母大写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"str"</span> ? uncap_first&#125;    　　<span class="comment"># 使字符串第一个字母大写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"Str"</span> ? lower_case&#125;       <span class="comment"># 将字符串转换成小写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"Str"</span> ? upper_case&#125;       <span class="comment"># 将字符串转换成大写</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">" str "</span> ? trim&#125;           <span class="comment"># 去掉字符串前后的空白字符</span></span><br><span class="line"><span class="variable">$&#123;</span>str ? contains(<span class="string">"xx"</span>) ? string&#125;  <span class="comment"># 字符串是否包含"xxx",返回"true"或"false"</span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"你好 $&#123;emp.name !&#125;"</span>&#125;    <span class="comment"># 输出你好+变量名  </span></span><br><span class="line"><span class="variable">$&#123;</span><span class="string">"你好 "</span> + emp.name !&#125;        <span class="comment"># 使用+号来连接，输出你好+变量名</span></span><br><span class="line"><span class="variable">$&#123;</span>emp ? length&#125;      <span class="comment"># 字符串的长度</span></span><br><span class="line"><span class="variable">$&#123;</span>str ? index_of（<span class="string">"x"</span>）&#125;   <span class="comment"># 字符串对应"x"所在位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取子串</span></span><br><span class="line">&lt;<span class="comment">#assign str ="abcdefghijklmn"/&gt;</span></span><br><span class="line"><span class="variable">$&#123;</span>str ? substring(0 , <span class="number">4</span>)&#125;   <span class="comment"># 1、截取第0位到第3位，输出abcd</span></span><br><span class="line"><span class="variable">$&#123;</span>str[0]&#125; <span class="variable">$&#123;</span>str[<span class="number">4</span>]&#125;   <span class="comment"># 2、截取第0位和第4位结果是ae</span></span><br><span class="line"><span class="variable">$&#123;</span>str[<span class="number">1</span>..<span class="number">4</span>]&#125;         <span class="comment"># 3、截取第1位到第4位结果是bcde</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split分割字符串</span></span><br><span class="line">&lt;<span class="comment">#list "a|b|c" ? split("|") as item&gt;</span></span><br><span class="line"><span class="variable">$&#123;</span>item&#125;</span><br><span class="line">&lt;<span class="regexp">/#list&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、数字语法"><a href="#三、数字语法" class="headerlink" title="三、数字语法"></a>三、数字语法</h2><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign <span class="symbol">x</span> = <span class="number">2.582</span> /&gt;</span><br><span class="line">$&#123;<span class="symbol">x</span> ? <span class="built_in">string</span>.number&#125;  # 数字 <span class="number">2.582</span></span><br><span class="line">$&#123;<span class="symbol">x</span> ? <span class="built_in">string</span>.currency&#125;  # 货币 ￥<span class="number">2.58</span>  小数点<span class="number">2</span>位</span><br><span class="line">$&#123;<span class="symbol">x</span> ? <span class="built_in">string</span>.percent&#125;  # 百分号 <span class="number">258</span>%  无小数点</span><br><span class="line">$&#123;<span class="symbol">x</span> ? int&#125;  # 整型<span class="number">2</span></span><br><span class="line"></span><br><span class="line"># 数字格式化插值可采用＃&#123;expr; format&#125;形式来格式化数字，其中格式可以是</span><br><span class="line"># mX：小数部分最小X位</span><br><span class="line"># MX：小数部分最大X位</span><br><span class="line">&lt;#assign <span class="symbol">x</span> = <span class="number">2.582</span> /&gt;</span><br><span class="line">&lt;#assign <span class="symbol">y</span> = <span class="number">4</span> /&gt; </span><br><span class="line">&#123;<span class="symbol">x</span>; M2&#125; <span class="comment">//输出2.58 </span></span><br><span class="line">&#123;<span class="symbol">y</span>; M2&#125; <span class="comment">//输出4 </span></span><br><span class="line">&#123;<span class="symbol">x</span>; m2&#125; <span class="comment">//输出2.58 </span></span><br><span class="line">&#123;Y; m2&#125; <span class="comment">//输出4.0</span></span><br><span class="line">&#123;<span class="symbol">x</span>; m1M2&#125; <span class="comment">//输出2.58 </span></span><br><span class="line">&#123;<span class="symbol">x</span>; m1M2&#125; <span class="comment">//输出4.0</span></span><br></pre></td></tr></table></figure><h2 id="四、运算算符"><a href="#四、运算算符" class="headerlink" title="四、运算算符"></a>四、运算算符</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">表达式中支持的比较运算符符如下几个：</span><br><span class="line">=或==：判断两个值是否相等。</span><br><span class="line">！=：判断两个值是否不等。</span><br><span class="line">&gt; 或 gt：判断左边值是否大于右边值</span><br><span class="line">&lt;= 或 lte：判断左边值是否小于等于右边值</span><br><span class="line"></span><br><span class="line">算数运算符</span><br><span class="line">加减乘除：+, -, *, /, ％</span><br><span class="line">注意：</span><br><span class="line">（<span class="number">1</span>）运算符两边必须是数字</span><br><span class="line">（<span class="number">2</span>）使用+运算符时，如果一边是数字，一边是字符串，就会自动将数字转换为字符串再连接，</span><br><span class="line">     如：$ &#123;<span class="number">3</span> +“<span class="number">5</span>”&#125;，结果是：<span class="number">35</span></span><br><span class="line">     </span><br><span class="line">逻辑运算符</span><br><span class="line">逻辑与：&amp;&amp; </span><br><span class="line">逻辑或：|| </span><br><span class="line">逻辑非：！</span><br><span class="line">逻辑运算符只能作用于布尔值，否则将产生错误</span><br><span class="line"></span><br><span class="line">运算符优先级如下（由高到低排列）</span><br><span class="line"><span class="number">1</span>、一元运算符：！</span><br><span class="line"><span class="number">2</span>、内建函数：</span><br><span class="line"><span class="number">3</span>、乘除法：*，/，％</span><br><span class="line"><span class="number">4</span>、加减法： - ，+ </span><br><span class="line"><span class="number">5</span>、比较：&gt;，&lt;，&gt; =，&lt;=（lt，lte，gt，gte）</span><br><span class="line"><span class="number">6</span>、相等：==，=， ！= </span><br><span class="line"><span class="number">7</span>、逻辑与：&amp;&amp; </span><br><span class="line"><span class="number">8</span>、逻辑或：|| </span><br><span class="line"><span class="number">9</span>、数字范围：.. 实际上，我们在开发过程中应该使用括号来严格区分，这样的可读性好，出错少</span><br></pre></td></tr></table></figure><h2 id="五、条件判断"><a href="#五、条件判断" class="headerlink" title="五、条件判断"></a>五、条件判断</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> else逻辑判断</span><br><span class="line"><span class="comment"># 示例中conditioinN, N位序号。若其中不为空则执行该条件语句</span></span><br><span class="line">&lt;<span class="comment">#if condition1&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;<span class="comment">#elseif condition2&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;<span class="comment">#elseif condition3&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;<span class="comment">#else&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;/<span class="comment">#if&gt;</span></span><br><span class="line"><span class="comment"># 注意点：$&#123;..&#125;只能用于文本部分,不能用于表达式</span></span><br><span class="line">比如：</span><br><span class="line">&lt;<span class="comment">#if $&#123;isBig&#125;&gt;Wow!&lt;/#if&gt;   # 错误</span></span><br><span class="line">&lt;<span class="comment">#if isBig&gt;Wow!&lt;/#if&gt; #正确</span></span><br><span class="line"></span><br><span class="line">switch</span><br><span class="line"><span class="comment"># 跟java的switch一样，注意break，若无break，则执行后不跳出，而是直接执行下面的语句</span></span><br><span class="line">&lt;<span class="comment">#switch value&gt; </span></span><br><span class="line">&lt;<span class="comment">#case refValue1&gt; </span></span><br><span class="line"><span class="string">....</span></span><br><span class="line">&lt;<span class="comment">#break&gt; </span></span><br><span class="line">&lt;<span class="comment">#case refValue2&gt; </span></span><br><span class="line"><span class="string">....</span></span><br><span class="line">&lt;<span class="comment">#break&gt; </span></span><br><span class="line">&lt;<span class="comment">#case refValueN&gt; </span></span><br><span class="line"><span class="string">....</span></span><br><span class="line">&lt;<span class="comment">#break&gt; </span></span><br><span class="line">&lt;<span class="comment">#default&gt; </span></span><br><span class="line"><span class="string">....</span> </span><br><span class="line">&lt;/<span class="comment">#switch&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、支持转义字符"><a href="#六、支持转义字符" class="headerlink" title="六、支持转义字符"></a>六、支持转义字符</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\"</span> ：双引号(u0022)</span><br><span class="line"><span class="string">\'</span> ：单引号(u0027)</span><br><span class="line"><span class="string">\\</span> ：反斜杠(u005C)</span><br><span class="line"><span class="string">\n</span> ：换行(u000A)</span><br><span class="line"><span class="string">\r</span> ：回车(u000D)</span><br><span class="line"><span class="string">\t</span> ：Tab(u0009)</span><br><span class="line"><span class="string">\b</span> ：退格键(u0008)</span><br><span class="line"><span class="string">\f</span> ：Form feed(u000C)</span><br><span class="line"><span class="string">\l</span> ：&lt;</span><br><span class="line"><span class="string">\g</span> ：&gt;</span><br><span class="line"><span class="string">\a</span> ：&amp;</span><br><span class="line"><span class="string">\&#123;</span> ：&#123;</span><br><span class="line"><span class="string">\xCode</span> ：直接通过<span class="number">4</span>位的<span class="number">16</span>进制数来指定Unicode码,输出该unicode码对应的字符.</span><br><span class="line"></span><br><span class="line">如果某段文本中包含大量的特殊符号,FreeMarker提供了另一种特殊格式:可以在指定字符串内容的引号前增加r标记,在r标记后的文件将会直接输出.看如下代码:</span><br><span class="line">$&#123;r<span class="string">"$&#123;foo&#125;"</span>&#125; <span class="regexp">// 输出 $&#123;foo&#125;</span></span><br><span class="line"><span class="regexp">$&#123;r"C:/foo/bar"&#125; //</span> 输出 C:/foo/bar</span><br></pre></td></tr></table></figure><h2 id="七、include指令"><a href="#七、include指令" class="headerlink" title="七、include指令"></a>七、include指令</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># include指令的作用类似于JSP的包含指令: 用于导入文件,它可以在模版中插入其他的静态文件,或者是freemarker模版如：宏组件</span></span><br><span class="line"><span class="xml"># 注意点：引入同名的变量时就会被后引入的或者新定义的覆盖.这样就不是很好,因为只想让它们在"My Test Library"命名空间中.就需要用 import代替include了</span></span><br><span class="line"><span class="xml">//父页面ftl</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">#include</span> "/<span class="attr">inc</span>/<span class="attr">top.ftl</span>"/&gt;</span>  </span></span><br><span class="line"><span class="xml">        姓名：$</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        性别：$</span><span class="template-variable">&#123;student.studentSex&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        年龄：$</span><span class="template-variable">&#123;student.studentAge&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        生日：$</span><span class="template-variable">&#123;(student.studentBirthday)?string("yyyy-MM-dd")&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        网站地址：$</span><span class="template-variable">&#123;student.studentAddr&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        QQ：$</span><span class="template-variable">&#123;student.studentQQ&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#if</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">12</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个初中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">15</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个高中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">18</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#else</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">#if</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//子页面ftl</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎，进入学生管理系统！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 结果</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎，进入学生管理系统！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">         姓名：$</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        性别：$</span><span class="template-variable">&#123;student.studentSex&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        年龄：$</span><span class="template-variable">&#123;student.studentAge&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        生日：$</span><span class="template-variable">&#123;(student.studentBirthday)?string("yyyy-MM-dd")&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        网站地址：$</span><span class="template-variable">&#123;student.studentAddr&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        QQ：$</span><span class="template-variable">&#123;student.studentQQ&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#if</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">12</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个初中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">15</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个高中生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">student.studentAge</span> <span class="attr">lt</span> <span class="attr">18</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">不是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">#else</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">             $</span><span class="template-variable">&#123;student.studentName&#125;</span><span class="xml">是一个大学生  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">#if</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="八、import指令"><a href="#八、import指令" class="headerlink" title="八、import指令"></a>八、import指令</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/<span class="regexp">/ 类似于jsp里的import：它导入文件，然后就可以在当前文件里使用被导入文件里的宏组件。除了不能像include一样导入静态文件外，其他都一样。为防止出现覆盖问题，把其放入另一个空间中。</span></span><br><span class="line"><span class="regexp"># mylib.ftl</span></span><br><span class="line"><span class="regexp">&lt;#macro copyright date&gt;   </span></span><br><span class="line"><span class="regexp">&lt;p&gt;Copyright (C) $&#123;date&#125; Julia Smith. All rights reserved.   </span></span><br><span class="line"><span class="regexp">&lt;/</span><span class="comment">#macro&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># common.ftl</span></span><br><span class="line">&lt;<span class="comment">#import "/libs/mylib.ftl" as my&gt;</span></span><br><span class="line">&lt;@my.copyright date=<span class="string">"1999-2002"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&lt;p&gt;Copyright (C) <span class="number">1999</span>-<span class="number">2002</span> Julia Smith. All rights reserved.   </span><br><span class="line"></span><br><span class="line">/<span class="regexp">/ 上面的代码将导入/lib</span><span class="regexp">/common.ftl模板文件中的所有变量,交将这些变量放置在一个名为com的Map对象中，"my"在freemarker里被称作namespace，防止同一变量被覆盖</span></span><br></pre></td></tr></table></figure><h2 id="九、macro宏指令"><a href="#九、macro宏指令" class="headerlink" title="九、macro宏指令"></a>九、macro宏指令</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;#-- 定义宏 --&gt;</span><br><span class="line"># <span class="keyword">test</span>是自定义标签名，并且注意自定义标签名会影响同名变量</span><br><span class="line">&lt;#<span class="keyword">macro</span> <span class="keyword">test</span> foo bar=<span class="string">"Bar"</span> baaz=-1&gt; </span><br><span class="line">　　Text: <span class="variable">$&#123;foo&#125;</span>, <span class="variable">$&#123;bar&#125;</span>, <span class="variable">$&#123;baaz&#125;</span></span><br><span class="line">&lt;/#<span class="keyword">macro</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;#-- 使用宏 --&gt;</span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> bar=<span class="string">"b"</span> baaz=5*5/&gt;  <span class="comment">// 输出：Text: a, b, 25</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> bar=<span class="string">"b"</span>/&gt;    　　　　<span class="comment">// 输出：Text: a, b, -1</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> baaz=5*5-2/&gt; 　　　　<span class="comment">// 输出：Text: a, Bar, 23</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span>/&gt;                   <span class="comment">// 输出：Text: a, Bar, -1</span></span><br><span class="line"></span><br><span class="line">&lt;#-- 定义一个循环输出的宏 --&gt;</span><br><span class="line">&lt;#<span class="keyword">macro</span> <span class="keyword">list</span> title items&gt; </span><br><span class="line">　　<span class="variable">$&#123;title&#125;</span></span><br><span class="line">　　&lt;#<span class="keyword">list</span> items <span class="keyword">as</span> x&gt;</span><br><span class="line">　　　　<span class="variable">$&#123;x&#125;</span></span><br><span class="line">　　&lt;/#<span class="keyword">list</span>&gt; </span><br><span class="line">&lt;/#<span class="keyword">macro</span>&gt; </span><br><span class="line"></span><br><span class="line">&lt;#-- 使用宏 --&gt;</span><br><span class="line">&lt;@<span class="keyword">list</span> items=[<span class="string">"mouse"</span>, <span class="string">"elephant"</span>, <span class="string">"python"</span>] title=<span class="string">"Animals"</span>/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 模板引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yapi 的部署和使用</title>
      <link href="/2021/02/28/Yapi%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/02/28/Yapi%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Yapi-的部署和使用"><a href="#Yapi-的部署和使用" class="headerlink" title="Yapi 的部署和使用"></a>Yapi 的部署和使用</h1><h2 id="一、基于-docker-compose-部署-Yapi"><a href="#一、基于-docker-compose-部署-Yapi" class="headerlink" title="一、基于 docker-compose 部署 Yapi"></a>一、基于 docker-compose 部署 Yapi</h2><blockquote><p>如何部署 docker-compose，点击我博客的<a href="https://deschen.gitee.io/2021/03/23/docker-compose%20+%20jenkins%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">链接</a></p></blockquote><ul><li>部署 Yapi 的 docker-compose.yml。PS：因为 Yapi 的数据库就是MongoDB，所以部署 Yapi 要同时部署 MongoDB</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">yapi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mrjin/yapi:latest</span></span><br><span class="line">    <span class="comment"># build: ./</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">yapi</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VERSION=1.5.6</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOG_PATH=/tmp/yapi.log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOME=/home</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PORT=3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ADMIN_EMAIL=me@jinfeijie.cn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_SERVER=mongo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_NAME=yapi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PORT=27017</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">13000</span><span class="string">:3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9090</span><span class="string">:9090</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./log/yapi.log:/home/vendors/log</span> <span class="comment"># log dir</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">"bash /wait-for-it.sh mongo:27017 -- entrypoint.sh"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yapi</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../mongodb/db:/data/db</span> <span class="comment">#db dir</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yapi</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">yapi:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h2 id="二、IDEA-关于-Yapi-的使用"><a href="#二、IDEA-关于-Yapi-的使用" class="headerlink" title="二、IDEA 关于 Yapi 的使用"></a>二、IDEA 关于 Yapi 的使用</h2><ul><li><p>先下载 YapiUpload 插件，用于把接口上传到 Yapi 应用上</p></li><li><p>在 .idea 文件夹下的 misc.xml 插入 关于 Yapi 的配置,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- yapi配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"yapi"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectToken"</span>&gt;</span>22bffb576415df1b8d088176dd9090cd2d5a29141a23d059f68f8988d1823d20<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectId"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"yapiUrl"</span>&gt;</span>http://192.168.163.138:3000<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"projectType"</span>&gt;</span>api<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ELK部署——CentOS7.X</title>
      <link href="/2021/02/03/ELK%E9%83%A8%E7%BD%B2%E2%80%94%E2%80%94CentOS7.X/"/>
      <url>/2021/02/03/ELK%E9%83%A8%E7%BD%B2%E2%80%94%E2%80%94CentOS7.X/</url>
      
        <content type="html"><![CDATA[<h1 id="ELK部署——CentOS7-X"><a href="#ELK部署——CentOS7-X" class="headerlink" title="ELK部署——CentOS7.X"></a>ELK部署——CentOS7.X</h1><h2 id="一、创建用户角色"><a href="#一、创建用户角色" class="headerlink" title="一、创建用户角色"></a>一、创建用户角色</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建用户组：groupadd <span class="built_in">es</span></span><br><span class="line">创建用户加入用户组：useradd <span class="built_in">es</span> -g <span class="built_in">es</span></span><br></pre></td></tr></table></figure><h2 id="二、下载和安装"><a href="#二、下载和安装" class="headerlink" title="二、下载和安装"></a>二、下载和安装</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">下载：</span><br><span class="line">    wget https:<span class="comment">//artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.3.tar.gz</span></span><br><span class="line">    wget https:<span class="comment">//artifacts.elastic.co/downloads/logstash/logstash-6.2.3.tar.gz</span></span><br><span class="line">    wget https:<span class="comment">//artifacts.elastic.co/downloads/kibana/kibana-6.2.3-linux-x86_64.tar.gz</span></span><br><span class="line">解压：</span><br><span class="line">tar -zxvf elasticsearch<span class="number">-6.2</span><span class="number">.3</span>.tar.gz -C /usr/local</span><br><span class="line">tar -zxvf logstash<span class="number">-6.2</span><span class="number">.3</span>.tar.gz -C /usr/local</span><br><span class="line">tar -zxvf kibana<span class="number">-6.2</span><span class="number">.3</span>-linux-x86_64.tar.gz -C /usr/local</span><br><span class="line">给es授权</span><br><span class="line">chown -R es.es /usr/local/elasticsearch<span class="number">-6.2</span><span class="number">.3</span></span><br><span class="line">chown -R es.es /usr/local/logstash<span class="number">-6.2</span><span class="number">.3</span></span><br><span class="line">chown -R es.es /usr/local/kibana<span class="number">-6.2</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><h2 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch配置：</span><br><span class="line">允许远程配置：</span><br><span class="line"><span class="keyword">cd</span> /usr/local/elasticsearch-<span class="number">6.2</span>.<span class="number">3</span></span><br><span class="line">elasticsearch-plugin install http<span class="variable">s:</span>//github.<span class="keyword">com</span>/medcl/elasticsearch-analysis-ik/releases/download/v7.<span class="number">6.2</span>/elasticsearch-analysis-ik-<span class="number">6.2</span>.<span class="number">3</span>.zip</span><br><span class="line"><span class="keyword">vi</span> config/elasticsearch.yml </span><br><span class="line">network.hos<span class="variable">t:</span> <span class="number">0.0</span>.<span class="number">0.0</span>  #改为<span class="number">0.0</span>.<span class="number">0.0</span>对外开放，如对特定ip开放则改为指定ip</span><br><span class="line">http.por<span class="variable">t:</span> <span class="number">9200</span>      #可更改端口不为<span class="number">9200</span></span><br><span class="line">修改配置，否则报异常：<span class="built_in">max</span> <span class="keyword">file</span> descriptors [<span class="number">4096</span>] <span class="keyword">for</span> elasticsearch process <span class="keyword">is</span> too low, increase <span class="keyword">to</span> at least [<span class="number">65535</span>]...</span><br><span class="line"><span class="keyword">vi</span> /etc/security/limits.<span class="keyword">conf</span>  # 在文末添加下面四个配置</span><br><span class="line">* soft nofile <span class="number">65536</span></span><br><span class="line">* hard nofile <span class="number">131072</span></span><br><span class="line">* soft nproc <span class="number">2048</span></span><br><span class="line">* hard nproc <span class="number">4096</span></span><br><span class="line">         <span class="keyword">vi</span> /etc/sysctl.<span class="keyword">conf</span></span><br><span class="line">         <span class="keyword">vm</span>.max_map_count=<span class="number">655360</span></span><br><span class="line">        </span><br><span class="line"> logstash配置：</span><br><span class="line"> <span class="keyword">cd</span> /usr/local/logstash-<span class="number">6.2</span>.<span class="number">3</span></span><br><span class="line"> logstash-plugin install logstash-codec-json_lines</span><br><span class="line"> <span class="keyword">vi</span> default.<span class="keyword">conf</span></span><br><span class="line"> # 监听<span class="number">5044</span>端口作为输入</span><br><span class="line">        <span class="built_in">input</span> &#123;</span><br><span class="line">            beats &#123;</span><br><span class="line">                port =&gt; <span class="string">"5044"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 数据过滤</span><br><span class="line">        <span class="built_in">filter</span> &#123;</span><br><span class="line">            grok &#123;</span><br><span class="line">                <span class="keyword">match</span> =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;COMBINEDAPACHELOG&#125;"</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            geoip &#123;</span><br><span class="line">                <span class="keyword">source</span> =&gt; <span class="string">"clientip"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 输出配置为本机的<span class="number">9200</span>端口，这是ElasticSerach服务的监听端口</span><br><span class="line">        output &#123;</span><br><span class="line">            elasticsearch &#123;</span><br><span class="line">                hosts =&gt; [<span class="string">"127.0.0.1:9200"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">Kibana远程配置：</span><br><span class="line"><span class="keyword">cd</span> /usr/local/kibana-<span class="number">6.2</span>.<span class="number">3</span>-linux-x86_64</span><br><span class="line"><span class="keyword">vi</span> config/kibana.yml</span><br><span class="line">server.hos<span class="variable">t:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line">elasticsearch.requestTimeou<span class="variable">t:</span> <span class="number">90000</span>  # 默认<span class="number">3000</span>会导致es连接失败</span><br></pre></td></tr></table></figure><h2 id="四、启动"><a href="#四、启动" class="headerlink" title="四、启动"></a>四、启动</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch</span><br><span class="line">切换账号：<span class="keyword">su</span> es</span><br><span class="line">启动：</span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/elasticsearch-6.2.3</span><br><span class="line">bin/elasticsearch -<span class="keyword">d</span>  # -<span class="keyword">d</span>后台启动</span><br><span class="line">     查看日志：tail -f logs/elasticsearch.<span class="keyword">log</span></span><br><span class="line">     测试：curl 127.0.0.1:9200</span><br><span class="line">     响应成功：</span><br><span class="line">     &#123;</span><br><span class="line">              <span class="string">"name"</span> : <span class="string">"mNuYQ8h"</span>,</span><br><span class="line">              <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">              <span class="string">"cluster_uuid"</span> : <span class="string">"1JsAZO0sTnuBYCREW97RDw"</span>,</span><br><span class="line">              <span class="string">"version"</span> : &#123;</span><br><span class="line">                <span class="string">"number"</span> : <span class="string">"6.2.3"</span>,</span><br><span class="line">                <span class="string">"build_hash"</span> : <span class="string">"c59ff00"</span>,</span><br><span class="line">                <span class="string">"build_date"</span> : <span class="string">"2018-03-13T10:06:29.741383Z"</span>,</span><br><span class="line">                <span class="string">"build_snapshot"</span> : false,</span><br><span class="line">                <span class="string">"lucene_version"</span> : <span class="string">"7.2.1"</span>,</span><br><span class="line">                <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"5.6.0"</span>,</span><br><span class="line">                <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"5.0.0"</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">            &#125;</span><br><span class="line">logstash</span><br><span class="line">启动：</span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/logstash-6.2.3</span><br><span class="line">bin/logstash -f default.<span class="keyword">conf</span> &amp;</span><br><span class="line">    查看日志：tail -f logs/logstash-plain.<span class="keyword">log</span></span><br><span class="line">Kibana</span><br><span class="line">切换账号：<span class="keyword">su</span> es</span><br><span class="line">启动：</span><br><span class="line"><span class="keyword">su</span></span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/kibana-6.2.3-linux-x86_64</span><br><span class="line">nohup bin/kibana &amp;</span><br><span class="line">查看日志：tail -f nohup.<span class="keyword">out</span></span><br></pre></td></tr></table></figure><h2 id="五、自启动"><a href="#五、自启动" class="headerlink" title="五、自启动"></a>五、自启动</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">以ES自启动为例</span><br><span class="line">cd /etc/init.d</span><br><span class="line">vim es-server</span><br><span class="line"></span><br><span class="line"><span class="comment">## 编写启动脚本</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#chkconfig: 345 63 37</span></span><br><span class="line"><span class="comment">#description: elasticsearch</span></span><br><span class="line"><span class="comment">#processname: elasticsearch-6.2.3</span></span><br><span class="line"><span class="comment">## 这个目录是你Es所在文件夹的目录</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ES_HOME</span>=/usr/local/elasticsearch-6.2.3</span><br><span class="line">case <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        start)</span><br><span class="line">        ## es 是启动es的账户，如果你的不是这个记得调整</span><br><span class="line">                su es&lt;&lt;!</span><br><span class="line">                cd <span class="variable">$ES_HOME</span></span><br><span class="line">                ./bin/elasticsearch -d -p pid</span><br><span class="line">                exit</span><br><span class="line">!</span><br><span class="line">                echo <span class="string">"elasticsearch is started"</span></span><br><span class="line">                ;;</span><br><span class="line">        stop)</span><br><span class="line">                <span class="attribute">pid</span>=`cat <span class="variable">$ES_HOME</span>/pid`</span><br><span class="line">                kill -9 <span class="variable">$pid</span></span><br><span class="line">                echo <span class="string">"elasticsearch is stopped"</span></span><br><span class="line">                ;;</span><br><span class="line">        restart)</span><br><span class="line">                <span class="attribute">pid</span>=`cat <span class="variable">$ES_HOME</span>/pid`</span><br><span class="line">                kill -9 <span class="variable">$pid</span></span><br><span class="line">                echo <span class="string">"elasticsearch is stopped"</span></span><br><span class="line">                sleep 1</span><br><span class="line">                su elk&lt;&lt;!     【es 这个是启动es的账户，如果你的不是这个记得调整】</span><br><span class="line">                cd <span class="variable">$ES_HOME</span></span><br><span class="line">                ./bin/elasticsearch -d -p pid</span><br><span class="line">                exit</span><br><span class="line">!</span><br><span class="line">                echo <span class="string">"elasticsearch is started"</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo <span class="string">"start|stop|restart"</span></span><br><span class="line">        ;; </span><br><span class="line">esac</span><br><span class="line">exit 0</span><br><span class="line"></span><br><span class="line"><span class="comment">## 退出</span></span><br><span class="line">:wq!</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改文件权限</span></span><br><span class="line">chmod 777 es-server</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加系统服务，开机自启</span></span><br><span class="line">chkconfig --<span class="builtin-name">add</span> es-server</span><br><span class="line"></span><br><span class="line"><span class="comment">##  启动，关闭、重启服务</span></span><br><span class="line">service es-server start</span><br><span class="line">service es-server stop</span><br><span class="line">service es-server restart</span><br></pre></td></tr></table></figure><h2 id="六、切换ELK-7-x异常处理"><a href="#六、切换ELK-7-x异常处理" class="headerlink" title="六、切换ELK 7.x异常处理"></a>六、切换ELK 7.x异常处理</h2><p>ES问题：</p><ol><li><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210220152128686.png" alt="image-20210220152128686"></p></li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">切换到es <span class="number">7</span>.x 目录：cd /usr/local/elasticsearch-<span class="number">7.6</span>.<span class="number">2</span></span><br><span class="line">修改配置文件：vi config/elasticsearch.yml</span><br><span class="line"><span class="keyword">node</span>.name:<span class="title"> node-1</span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"node-1"</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210301143942570.png" alt="image-20210301143942570"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">切换到es <span class="number">7.</span>x 目录：cd /usr/local/elasticsearch<span class="number">-7.6</span><span class="number">.2</span></span><br><span class="line">配置文件添加：config/elasticsearch.yml</span><br><span class="line">xpack.ml.enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210301144616286.png" alt="image-20210301144616286"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">切换到root用户修改配置sysctl.<span class="keyword">conf</span></span><br><span class="line"><span class="keyword">vi</span> /etc/sysctl.<span class="keyword">conf</span> </span><br><span class="line"><span class="keyword">vm</span>.max_map_count=<span class="number">655360</span></span><br><span class="line">sysctl -<span class="keyword">p</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware——CentOS7.X部署</title>
      <link href="/2021/01/28/VMware%E2%80%94%E2%80%94CentOS7-X%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/01/28/VMware%E2%80%94%E2%80%94CentOS7-X%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="VMware——CentOS7-x部署"><a href="#VMware——CentOS7-x部署" class="headerlink" title="VMware——CentOS7.x部署"></a>VMware——CentOS7.x部署</h1><p>[toc]</p><h2 id="一、新建虚拟器"><a href="#一、新建虚拟器" class="headerlink" title="一、新建虚拟器"></a>一、新建虚拟器</h2><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210129093554506.png" alt="image-20210129093554506"></p><ul><li>确定好版本，要与自己软件一致</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210129093623268.png" alt="image-20210129093623268"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221170614834.png" alt="image-20201221170614834"></p><ul><li>要选择<strong>Linux</strong>系统，版本要跟自己下载的<strong>centos7.x</strong>一致</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221170652989.png" alt="image-20201221170652989"></p><ul><li><p>建议存放位置放在自定义的文件夹，方便管理</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221171956274.png" alt="image-20201221171956274"></p></li><li><p>设置处理器的和数，<strong>定情况而定</strong></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172108411.png" alt="image-20201221172108411"></p></li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172132879.png" alt="image-20201221172132879"></p><ul><li><p>接下来一直点击<strong>下一步</strong>，直到出现<strong>完成</strong>的这个界面，<strong>自定义硬件</strong></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172350769.png" alt="image-20201221172350769"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172534237.png" alt="image-20201221172534237"></p></li></ul><h2 id="二、安装centos-7-X"><a href="#二、安装centos-7-X" class="headerlink" title="二、安装centos 7.X"></a>二、安装centos 7.X</h2><blockquote><p>当看不见鼠标时，说明你点击了虚拟机，这时可以使用<strong>ctrl+alt</strong>跳出虚拟机</p></blockquote><ul><li><p>选择红框选项，按下回车键</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221172836938.png" alt="image-20201221172836938"></p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163036413.png" alt="image-20201221163036413" style="zoom: 67%;" /></li><li><p>设置时间，建议时区选择上海</p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163656843.png" alt="image-20201221163656843" style="zoom:80%;" /><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163629221.png" alt="image-20201221163629221" style="zoom:80%;" /></li><li><p>显示界面（这里我使用原始界面）</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221163927355.png" alt="image-20201221163927355"></p><p>PS：想要图形界面的话，可以选择方框选项</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164005808.png" alt="image-20201221164005808"></p></li><li><p>磁盘划分</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164114006.png" alt="image-20201221164114006"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164157112.png" alt="image-20201221164157112"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221164758435.png" alt="image-20201221164758435"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221165029626.png" alt="image-20201221165029626"></p></li></ul><h2 id="三、连接虚拟机"><a href="#三、连接虚拟机" class="headerlink" title="三、连接虚拟机"></a>三、连接虚拟机</h2><ul><li><p>启动虚拟机，输入<strong>ip addr</strong>，获取虚拟机的ip</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175212858.png" alt="image-20201221175212858"></p></li><li><p>本地使用<strong>CMD</strong>输入<strong>ping 192.168.163.132</strong>查看本地是否与虚拟机联通</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175344603.png" alt="image-20201221175344603"></p></li><li><p>虚拟机使用<strong>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></strong> 查看虚拟机是否能联网</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175507224.png" alt="image-20201221175507224"></p></li><li><p>因为VM操作麻烦，建议使用xshell或其他软件连接虚拟机</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175924060.png" alt="image-20201221175924060"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221175800476.png" alt="image-20201221175800476"></p><p>PS：如果出现ping不通的情况，解决方法</p><ol><li><p>查看是否是网络适配器红框部分禁用了，如果是，就右键启动</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221180143248.png" alt="image-20201221180143248"></p></li><li><p>服务列表关于VM部分是否没启用</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20201221180327045.png" alt="image-20201221180327045"></p></li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA Debug调试</title>
      <link href="/2020/08/05/IDEA%20Debug%E8%B0%83%E8%AF%95/"/>
      <url>/2020/08/05/IDEA%20Debug%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA-Debug调试"><a href="#IDEA-Debug调试" class="headerlink" title="IDEA Debug调试"></a>IDEA Debug调试</h1><p>[toc]</p><h2 id="一、为什么要调试"><a href="#一、为什么要调试" class="headerlink" title="一、为什么要调试"></a>一、为什么要调试</h2><ul><li>调试和日志是排查问题的两个主要手段。</li><li>如果没有调试功能，很多问题的排查更多地将依赖日志。但是日志我无法直观地了解代码运行的状态，无法实时地观察待调试地对象地各种属性值等</li><li>现在调试工具非常强大，很多调试器支持 “回退”，自定义表达式，远程调试等功能，对我们的学习和排查问题有很大帮助</li></ul><h2 id="二、调试的基本操作"><a href="#二、调试的基本操作" class="headerlink" title="二、调试的基本操作"></a>二、调试的基本操作</h2><ol><li>设置断点</li><li>调试模式运行</li><li>单步调试</li></ol><ul><li><p>以IDEA为例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321215809557.png" alt="image-20210321215809557"></p><ul><li>常见的调试功能按钮如上图所示（标有1~6的红框）<ul><li>1 表示 Step Over 即跳过，执行到下一行；</li><li>2 表示 Step Into 即步入，可以进入自定义的函数；</li><li>3 表示Force Step Into 即强制进入，可以进入到任何方法（包括第三方库或JDK源码）</li><li>4 表示 Step Out 即跳出，如果当前调试的方法没问题，可以使用此功能跳出当前函数；</li><li>5 表示 Drop frame 即移除帧，相当于回退到上一级；（以 “ JVM每执行一个方法会出现栈帧 ”理解）</li><li>6 表示 Run to Cursor 即执行到鼠标所在的代码行数。</li></ul></li><li>Variables（变量区）：用于观察 “当前” 的数据变化状况</li><li>Frames（栈帧）：用于记录执行的方法</li></ul></li></ul><h2 id="三、调试的高级技巧"><a href="#三、调试的高级技巧" class="headerlink" title="三、调试的高级技巧"></a>三、调试的高级技巧</h2><ol><li><p>多线程断点</p><ul><li><p>场景：直观调试多线程执行情况</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321222516302.png" alt="image-20210321222516302"></p></li><li><p>操作步骤</p><ul><li>设置断点时，在断点上右键可以选择断点的模式，选择 “Thread” 模式，可以开启多线程调试。</li><li>可以将一个线程断下来，通过 “Frames” 选项卡切换到不同线程线程（红框部分表示线程），控制不同线程的运<br>行。</li></ul></li></ul></li><li><p>条件断点</p><ul><li><p>场景：在测试环境中，如果设置普通断点，这样会对所有的请求暂停，影响其他功能调试</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321223027976.png" alt="image-20210321223027976"></p></li><li><p>操作步骤</p><ul><li>对断点设置条件，只有满足设置的条件才会生效。（这里使当 i 等于 4 时打上断点）</li></ul></li><li><p>PS：如果我们想对某个成员变量修改的地方打断点，但是修改的地方特别多怎么办？</p><ul><li><p>可以对属性设置条件</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321224048609.png" alt="image-20210321224048609"></p></li></ul></li></ul></li><li><p>“后悔药”，即回退方法</p><ul><li><p>场景：当我们有Resume Program或者Step Over跳到方法里面时，我们想要看到调用方法前的情况。</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321225511239.png" alt="image-20210321225511239"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321225517980.png" alt="image-20210321225517980"></p></li><li><p>操作步骤</p><ul><li>按<strong>红框的按键</strong>表示 Drop frame 即移除帧，相当于回退到上一级，这给我们提供了 “后悔药”。</li></ul></li></ul></li><li><p>“偷天换日”，即修改参数</p><ul><li><p>场景：我们实际调试代码时，会有这样的场景，调用的参数传错了。修改参数重新运行？</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321230027010.png" alt="image-20210321230027010"></p></li><li><p>操作步骤</p><ul><li>在 variables 选项卡中选中变量（这里时 count ），然后右键，选择 “set value” 菜单，即可对变<br>量的值进行修改。</li></ul></li></ul></li><li><p>表达式</p><ul><li><p>场景：设置或获取额外的信息，这对排查问题有很大帮助。</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321232011161.png" alt="image-20210321232011161"></p><ul><li>操作步骤有两种<ul><li>右键 <code>Evaluate Expression</code>，输入表达式获取额外信息</li></ul></li></ul></li></ul></li><li><p>watch</p><ul><li><p>场景：查看某个对象的某个属性，总是使用表达式很不方便，是否可以将表达式计算的结果总是显示在变量区域呢？</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321232017547.png" alt="image-20210321232017547"></p></li><li><p>操作步骤</p><ul><li>变量区<code>Variables</code>点击 <code>+</code> ，输入想要观察的表达式</li></ul></li></ul></li><li><p>看内存对象</p><ul><li><p>场景：想通过代码调试来研究内存对象</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321233053826.png" alt="image-20210321233053826"></p></li><li><p>操作步骤</p><ul><li>在 Memory 选项栏下，搜索 Integer 就可以看到该类对象的数量，双击就可以通过表达式来过滤，非常强大。</li></ul></li></ul></li><li><p>异常断点</p><ul><li><p>在一个循环中有一个数据报错，想在报错的时候断点，无法使用条件断点，而且循环次数很多，一次一次断掉放过非常麻烦。</p></li><li><p>测试用例</p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321234105069.png" alt="image-20210321234105069" style="zoom:150%;" /><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321234155317.png" alt="image-20210321234155317"></p></li><li><p>操作步骤</p><ul><li>第一步，在研究的地方断点（出异常的条件）</li><li>第二步：点击左下角的红色断点标记，打开断点设置界面</li><li>第三步：点击左上角的 + 号，添加 <code>Java Excepiton Breakpoints</code> 将异常（<code>IllegalArgumentException</code>)添加进去；</li><li>第四步：切换到我们的断点处，在断点处（如图所示<code>OrderParamTest.java:80</code>）的 处，在 “Disable untilbreakpoint is hit” 处选择该异常。</li><li>第五步：再执行断点调试，即可捕捉到发生异常的那次调用。通过调用栈查看整个调用过程，还可以通过移除 frame 来回退到上一层</li></ul></li></ul></li><li><p>远程调试</p><ul><li><p>场景：现在大多数公司的测试环境都会配置支持远程调试。</p></li><li><p>要求：远程调试要求本地代码和远程服务器的代码一致，如果使用 git ，切换到同一个分支的同一次提<br>交即可。</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321235336115.png" alt="image-20210321235336115"></p></li><li><p>操作步骤</p><ul><li>点击Edit Configurations</li><li>点击左上角 <code>+</code>，选择<code>Remote JVM Debug</code>，设置远程 host 及端口 port </li></ul></li></ul></li><li><p>其他</p><ul><li><p>例如主动抛出异常</p></li><li><p>测试用例</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210321235716527.png" alt="image-20210321235716527"></p><ul><li>操作步骤<ul><li>在 <code>Frames</code> 选择栈帧，右键选择 <code>Throw Exception</code> 抛出异常</li></ul></li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试</title>
      <link href="/2020/06/10/%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/06/10/%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ul><li><p>mysql与redis如何数据同步</p><ul><li>并发不高的情况下，读操作优先读取redis，不存在的话就去访问MySQL，并把读到的数据写回Redis中；写操作的话，直接写MySQL，成功后再写入Redis</li><li><a href="https://blog.csdn.net/ssspk_/article/details/90924226" target="_blank" rel="noopener">https://blog.csdn.net/ssspk_/article/details/90924226</a></li></ul></li><li><p>rabbitmq消息持久化，一致性</p><ul><li>RabbitMQ是一款消息中间件，解耦、异步</li><li>RabbitMQ工作模式<ul><li>简单模式：一个生产者、一个消费者</li><li>work工作模式：一个生产者，多个消费者</li><li>发布订阅：消费者监听队列，生产者发送消息通过交换机发送绑定其的队列</li><li>routing路由模式：生产者将消息发送给交换机按照路由判断,发送到匹配队列消费</li><li>topic 主题模式：跟路由模式相同，不过key可以模糊匹配对应队列<ul><li>星号代表多个单词,井号代表一个单词</li></ul></li></ul></li><li>RabbitMQ消息的可靠传输<ul><li>发送方确认模式：信道设置成 confirm 模式，发布的消息都会被指派一个唯一的 ID，发送到队列后，信道会发送确认给生产者，如果rabbitmq异常，会发送nack给生产者    </li><li>接收方确认机制：消费者接收每一条消息后都必须进行确认，只有消费者确认了消息，RabbitMQ 才能安全地把消息从队列中删除。</li></ul></li></ul></li><li><p>多线程</p><ul><li><p>什么是线程？线程是操作系统进行运算调度的最小单位。它被包含进程之中，是进程中的实际运作单位</p></li><li><p>什么是进程？进程是系统进行资源分配的独立实体，且每个进程拥有独立地址空间</p></li><li><p>什么是线程安全，线程不安全？</p><ul><li>通俗来讲，有加锁的是线程安全，没加锁的是线程不安全</li><li>解释：比如一个数据同时被多个线程访问写操作时，如果没有加锁，那么数据可能会出现进行多次修改，而导致数据脏读，这是线程不安全。而如果有加锁，线程访问时会进行保护，其他线程就无法写操作直到线程操作完才行，就不会出现脏读问题</li></ul></li><li><p>JVM内存结果为什么程序计数器、虚拟机栈、本地方法栈为线程私有，堆、方法区线程共享？</p><ul><li>程序计数器：字节码解释器通过改变程序计数器来依次读取指令，从而实现代码流程控制。如：顺序执行、选择、循环、异常处理。而在多线程情况下，程序计数器用于记录当前线程指令执行的位置，从而当线程被切换回来的时候能够知道线程上次运行到哪里。所以线程必须私有。</li><li>虚拟机栈和本地方法栈：方法执行时会创建一个栈帧保存局部变量表、操作数栈、常量池引用信息。从方法调用到执行完成过程，对应一个栈帧从入栈到出栈的过程。所以为了保证局部变量等信息不被其他线程访问到，虚拟机栈和本地方法栈必须线程私有</li><li>堆：存放所有的对象。所以线程共享</li><li>方法区：存放已加载的类信息、常量、静态变量。所以线程共享</li></ul></li><li><p>什么是上下文切换?</p><ul><li>CPU分配时间给每个线程，时间往往很短（就几十毫秒），所以CPU很快切换线程执行操作，而在我们看来就像多个线程同时执行</li><li>上下文切换过程中，CPU会保存上个线程的状态，以便于下次切换后能够加载操作。所以从保存到加载过程就是一次上下文切换。但是上下文切换会影响多线程执行效率</li><li>避免线程上下文切换：<ul><li>无锁编程，采用一些方式避免使用锁</li><li>CAS算法</li><li>避免创建不必要的线程</li></ul></li></ul></li><li><p>并发与并行？</p><ul><li>并发：多个任务交替执行</li><li>并行：多个任务同时进行</li><li>注意点：如果时单核，那么无法并行执行，只能通过CPU时间片切换时间交替执行，从而并发执行任务。要并行执行要拥有多核CPU</li></ul></li><li><p>线程的生命周期和状态?</p><ul><li><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态</p><ul><li>初始化（NEW）：线程被构建，但是没有调用start()方法</li><li>运行状态（RUNNABLE）：调用start()方法进入的状态。Java线程将操作系统中<strong>就绪</strong>和<strong>运行</strong>统称为<strong>运行中</strong></li><li>阻塞状态（BLOCKED）：表示线程阻塞与锁有关。例如进入同步代码块等待锁</li><li>等待状态（WAITING）：当前线程需要等待其他线程做出一些特定的动作（通知或中断）</li><li>超时等待状态（TIME_WAITING）：不同于等待状态，它可以在指定时间自动返回</li><li>终止状态（TERMINATED）：表示当前线程执行完毕</li></ul></li><li><p>Java线程执行切换过程</p><ul><li>线程创建之后它将处于 <strong>初始状态</strong>(NEW)，调用 <code>start()</code> 方法后开始运行，线程这时候处于 <strong>可运行状态</strong>(READY)。</li><li>可运行状态的线程获得了 <strong>CPU 时间片</strong>后就处于 <strong>运行状态</strong>(RUNNING)。</li><li>当线程执行 <code>wait()</code>方法之后，线程进入 <strong>等待状态</strong>(WAITING)，进入等待状态的线程需要依靠其他线程的通知才能够返回到<strong>运行状态【notify()】</strong>。</li><li><strong>超时等待(TIME_WAITING)</strong>相当于在等待状态的基础上增加了<strong>超时限制</strong>，【<code>sleep（long millis）/``wait（long millis）】，</code>当超时时间到达后 Java 线程将会返回到<strong>运行状态</strong>。</li><li>当线程调用<strong>同步方法</strong>时，在没有获取到锁的情况下，线程将会进入到<strong>阻塞状态</strong>(BLOCKED)。</li><li>线程在执行 Runnable 的<code>run()</code>方法之后将会进入到 <strong>终止状态</strong>(TERMINATED)。</li></ul></li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210309225407830.png" alt="image-20210309225407830"></p></li><li><p>sleep() 方法和 wait() 方法区别和共同点?</p><ul><li>相同点：两者都可以暂停线程的执行，都会让线程进入等待状态</li><li>不同点：<ul><li>sleep()方法没有释放锁，而 wait()方法释放了锁。</li><li>sleep()方法属于<strong>Thread类的静态方法</strong>，作用于<strong>当前线程</strong>；而wait()方法是<strong>Object类的实例方法</strong>，作用于<strong>对象本身</strong>。</li><li>执行sleep()方法后，可以通过<strong>超时</strong>或者调用<strong>interrupt()</strong>方法唤醒休眠中的线程；执行wait()方法后，通过调用<strong>notify()</strong>或<strong>notifyAll()</strong>方法唤醒等待线程。</li></ul></li></ul></li><li><p>什么是线程死锁?如何避免死锁?</p><ul><li>多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。假如线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。</li><li>避免死锁的几个常见方法：<ul><li>避免一个线程同时获取多个锁</li><li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li><li>尝试使用定时锁，使用 lock.tryLock(timeout) 来代替使用内部锁机制。</li><li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li></ul></li></ul></li><li><p>为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？</p><ul><li>调用start()执行的过程：new 一个 Thread，线程进入初始状态；调用 start()方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了    </li><li>直接执行run()方法，类似于在main线程下普通方法执行，并没有某个线程执行它，不属于多线程。</li></ul></li><li><p>多线程带来的问题及解决</p><ul><li>问题：<ul><li>线程安全问题：在某一线程从开始访问到结束访问<strong>某一数据</strong>期间，该数据被其他的线程所修改，那么对于当前线程而言，该线程就发生了线程安全问题，表现形式为<strong>数据的缺失，数据不一致</strong>等。<ul><li>存在条件<ul><li>多线程环境下，即存在包括自己在内存在有多个线程。</li><li>多线程环境下存在共享资源，且多线程操作该共享资源。</li><li>多个线程必须对该共享资源有非原子性操作。</li></ul></li><li>解决思路<ul><li>尽量不使用共享变量，将不必要的共享变量变成局部变量来使用</li><li>使用synchronized关键字同步代码块，或者使用jdk包中提供的Lock为操作进行加锁</li><li>使用ThreadLocal为每一个线程建立一个变量的副本，各个线程间独立操作，互不影响。</li></ul></li></ul></li><li>性能问题：线程的生命周期开销是非常大的，<strong>一个线程的创建到销毁都会占用大量的内存</strong>。同时如果不合理的创建了多个线程，cup的处理器数量小于了线程数量，那么将会有很多的线程被闲置，闲置的线程将会占用大量的内存，为垃圾回收带来很大压力，同时cup在分配线程时还会消耗其性能。<ul><li>解决思路：<strong>利用线程池</strong>，模拟一个池，预先创建有限合理个数的线程放入池中，当需要执行任务时从池中取出空闲的先去执行任务，执行完成后将线程归还到池中，这样就<strong>减少了线程的频繁创建和销毁，节省内存开销</strong>和减小了垃圾回收的压力。线程池还提供了拒绝策略，当任务数量到达某一临界区时，线程池将拒绝任务的进入，保持现有任务的顺利执行，减少池的压力。</li></ul></li><li>活跃性问题<ul><li><strong>死锁</strong>，假如线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。多个线程环形占用资源也是一样的会产生死锁问题。<ul><li>解决思路：以使用<strong>无锁函数</strong>（cas）或者使用<strong>重入锁</strong>（ReentrantLock），通过重入锁使线程中断或限时等待可以有效的规避死锁问题。</li></ul></li><li><strong>饥饿</strong>，<strong>指某一线程或多个线程因为某些原因一直获取不到资源，导致程序一直无法执行</strong>。如某一线程优先级太低导致一直分配不到资源，或者是某一线程一直占着某种资源不放，导致该线程无法执行等。<ul><li>解决思路：饥饿现象还是有可能在一段时间之后恢复执行的。<strong>可以设置合适的线程优先级来尽量避免饥饿的产生</strong>。</li></ul></li></ul></li></ul></li></ul></li><li><p>synchronized 关键字</p><ul><li>synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</li><li>synchronized关键字最主要的三种使用方式：<strong>修饰实例方法:、修饰静态方法、修饰代码块。</strong><ul><li>对于<strong>普通</strong>同步方法，锁是当前实例对象。</li><li>对于<strong>静态</strong>同步方法，锁是当前类的Class对象。</li><li>对于同步<strong>代码块</strong>，锁是synchronized括号里配置的对象。</li></ul></li><li>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。</li><li>synchronized在JVM里是怎么实现的？<ul><li>synchronized 同步语句块的实现使用的是 <strong>monitorenter 和 monitorexit</strong> 指令，其中 <strong>monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置</strong>。 当执行 monitorenter 指令时，线程试图获取锁也就是获取 monitor的持有权。当计数器为0则可以成功获取，获取后将锁计数器设为1也就是加1。相应的在执行 monitorexit 指令后，将锁计数器设为0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。(monitor对象存在于每个Java对象的对象头中，synchronized 锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因) </li></ul></li></ul></li><li><p>synchronized和 Lock 的区别？</p><ul><li><strong>Lock是一个接口，而synchronized是Java中的关键字</strong>，synchronized是内置的语言实现</li><li>synchronized在发生异常时，会<strong>自动</strong>释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果<strong>没有主动通过unLock()</strong>去释放锁，则很可能造成<strong>死锁</strong>现象，因此使用Lock时需要在<strong>finally</strong>块中释放锁；</li><li>Lock可以让等待锁的线程<strong>响应中断</strong>，而synchronized却不行，使用synchronized时，等待的线程会<strong>一直等待下去</strong>，不能够响应中断</li><li>通过Lock可以知道<strong>有没有成功获取锁</strong>（tryLock()方法：如果获取锁成功，则返回true），而synchronized却无法办到。</li><li>Lock可以提高多个线程进行读操作的效率。在性能上来说，如果<strong>竞争资源不激烈，两者的性能是差不多的</strong>，而当<strong>竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized</strong>。所以说，在具体使用时要根据适当情况选择。</li></ul></li><li><p>synchronized和ReentrantLock（重入锁） 的区别？</p><ul><li>两者都是<strong>可重进入锁</strong>，就是<strong>能够支持一个线程对资源的重复加锁。sychnronized关键字隐式的支持重进入</strong>，比如一个sychnronized修饰的递归方法，在方法执行时，执行线程在获取了锁之后仍能连续多次地获取该锁。<strong>ReentrantLock</strong>虽然没能像sychnronized关键字一样隐式的重进入，但是<strong>在调用lock()方法时，已经获取到锁的线程，能够再次调用lock()方法获取锁而不被阻塞</strong>。<ul><li>线程重复n次获取了锁，随后在第n次释放该锁后，其他线程能够获取到该锁。锁的最终释放要求<strong>锁对于获取进行计数自增，计数表示当前锁被重复获取的次数，而锁被释放时，计数自减，当计数等于0时表示锁已经成功被释放</strong>。</li></ul></li><li><strong>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API</strong>。ReentrantLock 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成）</li><li><strong>ReentrantLock 比 synchronized 增加了一些高级功能，主要有3点：①等待可中断；②可实现公平锁；③可实现选择性通知（锁可以绑定多个条件）</strong><ul><li><strong>ReentrantLock提供了一种能够中断等待锁的线程的机制</strong>，也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。通过lock.lockInterruptibly()来实现这个机制。</li><li><strong>ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。</strong>（公平锁就是先等待的线程先获得锁）</li><li>synchronized关键字与wait()和notify()/notifyAll()方法相结合可以实现等待/通知机制。ReentrantLock类当然也可以实现，但是需要借助于Condition接口与newCondition() 方法。用ReentrantLock类结合Condition实例可以实现“选择性通知” 。如果执行notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而Condition实例的signalAll()方法 只会唤醒注册在该Condition实例中的所有等待线程</li></ul></li></ul></li><li><p>volatile关键字</p><ul><li><strong>保证共享变量的“可见性”</strong>。可见性的意思是当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。</li><li>把变量声明为volatile，这就指示 JVM每次使用它都到主存中进行读取。</li></ul></li><li><p>synchronized 关键字和 volatile 关键字的区别</p><ul><li>volatile关键字是线程同步的轻量级实现，所以<strong>volatile性能比synchronized关键字要好</strong>。但是<strong>volatile关键字只能用于变量而synchronized关键字可以修饰方法以及代码块</strong>。</li><li>多线程访问volatile关键字<strong>不会发生阻塞</strong>，而synchronized关键字可能会发生<strong>阻塞</strong>。</li><li><strong>volatile</strong>关键字主要用于<strong>解决变量在多个线程之间的可见性</strong>，而 <strong>synchronized</strong>关键字解决的是<strong>多个线程之间访问资源的同步性</strong></li><li>volatile关键字能保证数据的可见性，但不能保证数据的原子性。synchronized关键字两者都能保证</li></ul></li><li><p>使用线程池的好处？</p><ul><li><strong>降低资源消耗</strong>。通过<strong>重复利用已创建的线程，降低线程创建和销毁造成的消耗</strong>。</li><li><strong>提高响应速度</strong>。<strong>当任务到达时，任务可以不需要等到线程创建就能立即执行</strong>。</li><li><strong>提高线程的可管理性</strong>。<strong>线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控</strong>。</li></ul></li><li><p>几种常见的线程池及适用场景？</p><ul><li><p>可以创建（<strong>Executors.newXXX</strong>）3种类型的ThreadPoolExecutor：<strong>FixedThreadPool</strong>、<strong>SingleThreadExecutor</strong>、<strong>CachedThreadPool</strong>。</p></li><li><p><strong>FixedThreadPool</strong>：<strong>可重用固定线程数的线程池</strong>。（适用于负载比较重的服务器）</p><ul><li><strong>FixedThreadPool使用无界队列LinkedBlockingQueue作为线程池的工作队列</strong></li><li>该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。</li></ul></li><li><p><strong>SingleThreadExecutor</strong>：<strong>只会创建一个线程执行任务。</strong>（适用于需要保证顺序执行各个任务；并且在任意时间点，没有多线程活动的场景。）</p><ul><li><strong><em>\</em>SingleThreadExecutorl也使用无界队列LinkedBlockingQueue作为工作队列**</strong></li><li>若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。</li></ul></li><li><p><strong>CachedThreadPool</strong>：<strong>是一个会根据需要调整线程数量的线程池</strong>。（大小无界，适用于执行很多的短期异步任务的小程序，或负载较轻的服务器）</p><ul><li><strong>CachedThreadPool使用没有容量的SynchronousQueue作为线程池的工作队列，但CachedThreadPool的maximumPool是无界的。</strong></li><li>线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。</li></ul></li><li><p><strong>ScheduledThreadPool</strong>：继承自ThreadPoolExecutor。它主要用来<strong>在给定的延迟之后运行任务，或者定期执行任务</strong>。使用DelayQueue作为任务队列。</p></li></ul></li></ul></li></ul><ul><li><p>nginx </p><ul><li>开发高并发系统时有三把利器用来保护系统：缓存、降级和限流<ul><li>缓存：缓存的目的是提升系统访问速度和增大系统处理容量</li><li>降级：降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行</li><li>限流：限流的目的是通过对并发访问/请求进行限速，或者对一个时间窗口内的请求进行限速来保护系统，一旦达到限制速率则可以拒绝服务、排队或等待、降级等处理</li></ul></li><li>高并发的限流操作<ul><li>限流算法<ul><li>计数器：限制接口在规定时间内访问次数。比如：在接口设置一个计数器，1分钟内请求接口不超过10次，每次请求时+1。当1分钟内计数器到10，那么其他接口就要等待；1分钟后的话，计数器就会重置<ul><li>弊端：可能出现临界聚集问题。比如：接口1分钟能处理10次，而当59秒~60秒和60秒到61秒突然有10个请求，60秒做为分界线。就会产生一个问题：59秒到61秒有20个请求，而接口1分钟能处理10个，这样会导致接口出现异常</li></ul></li><li>滑动窗口计数：每次访问进来时，先判断前N个单位时间内的访问量是否超过设置阈值，并对当前时间片请求+1。比如以每10秒做为一个单位，以6个单位做为一个窗口，每当过了10秒后，窗口会滑倒下一个单位。这样就保证1分钟内请求不会超过规定值</li><li>漏桶算法：水（请求）先进入到漏桶里，漏桶以一定的速度出水，当水流入速度过大会直接溢出，漏桶算法能强行限制接口调用的速率。</li><li>令牌桶算法：一个存放固定容量令牌的桶，按照固定速率往桶里添加令牌。接口拿到令牌就放行，没有令牌的接口要么放在队列等待，要么放弃</li><li>漏桶与令牌桶的对比<ul><li>令牌桶是按照固定速率往桶中添加令牌，请求是否被处理需要看桶中令牌是否足够，当令牌数减为零时则拒绝新的请求；漏桶则是按照常量固定速率流出请求，流入请求速率任意，当流入的请求数累积到漏桶容量时，则新流入的请求被拒绝；因此令牌桶能解决突发请求的情况（只要有令牌就可以）而漏通就不行</li></ul></li></ul></li></ul></li></ul></li><li><p>类加载过程</p><ul><li><p>过程：就是把.class文件加载进内存，解析生成对应的class对象。</p></li><li><p>注意点：JVM不是一开始把所有类都加载进内存的，而是需要时在加载，并且有且只有一次</p></li><li><p>五个阶段</p><ul><li>加载：将class文件通过类加载器存到内存<ul><li>通过类的全限定名获取类的二进制流，将这个字节流所代表的静态存储结构转化为方法区运行的数据结构，元空间会生成对应的class对象做为方法区这些数据的访问入口</li><li>类加载器<ul><li>启动类加载器：负责加载jre的核心类库，比如rt.jar等</li><li>扩展类加载器：负责加载jre的扩展目录ext中jar类包</li><li>系统类加载器：负责加载classpath路径下的包</li><li>用户自定义加载器：负责加载用户自定义路径下的类包</li></ul></li></ul></li><li>验证：保证加载进来的二进制流符合虚拟机规范<ul><li>文件格式规范验证：比如常量是否有不被支持的常量</li><li>元数据验证：比如该类是否继承被final修饰的类</li><li>字节码验证：比如方法体的类型转换是否有效。子类可以赋值给父类，反之报错</li><li>符号引用验证：比如符号引用中的访问性（private、public）是否被类访问</li></ul></li><li>准备<ul><li><strong>类的静态变量</strong>分配并赋予默认值</li><li>注意点：<ul><li><strong>实例变量只有在对象实例化时，随对象一起分配java堆</strong></li><li>初始化默认值规定：数据类型为0，引用类型为null，被final修饰直接定值</li></ul></li></ul></li><li>解析：将常量池内的符号引用替换为直接引用，即直接指向目标的指针</li><li>初始化：为类的静态变量赋予真正的初始值<ul><li>注意点：准备赋值的默认值时系统要求的默认值；初始化赋值是根据程序主观初始化类变量</li><li>初始化分为主动初始化和被动初始化<ul><li>主动引用：主动触发类的初始化<ul><li>创建类的实例</li><li>mian()方法的类</li><li>访问类的静态变量（不被final修饰的变量）</li><li>访问类的静态方法</li><li>反射</li></ul></li><li>被动引用：不触发类的初始化<ul><li>子类调用父类的静态变量，子类不初始化，而父类要</li><li>数据定义类，不触发类初始化</li><li>访问类的常量（final修饰），不触发初始化</li></ul></li></ul></li></ul></li></ul></li><li><p>类加载器</p><ul><li><p>类加载机制</p><ul><li><p>全盘委托：当类加载器加载一个类时，除非显示使用另一个类加载器，否则该类及所依赖和引用的类被这个类加载器加载</p></li><li><p>双亲委派：一个类加载器要加载一个类时，先判断是否已被加载，如果没有，它会先委托自己的父类加载器来加载， 以此类推，直到启动类加载器无法加载，向下委托子类加载器加载</p></li><li><p>如何打破双亲委派模型：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">因为ClassLoader#loadClass逻辑是</span><br><span class="line"><span class="number">1</span>、先查看该类是否已加载</span><br><span class="line"><span class="number">2</span>、如果没有就向上委托</span><br><span class="line"><span class="number">3</span>、启动类加载器加载，并向下委托加载</span><br><span class="line">想要打破双亲委派，可以在第二步开始，先判断该类是否是自定义加载器加载的类，是的话就用其加载，不是就用双亲委派机制加载，这样就避免该类依赖的其他类加载异常</span><br><span class="line">protected Class&lt;?&gt; load<span class="constructor">Class(String <span class="params">name</span>, <span class="params">boolean</span> <span class="params">resolve</span>)</span></span><br><span class="line">        throws ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (get<span class="constructor">ClassLoadingLock(<span class="params">name</span>)</span>) &#123;</span><br><span class="line">            <span class="comment">// 查看类是否已加载</span></span><br><span class="line">            Class&lt;?&gt; c = find<span class="constructor">LoadedClass(<span class="params">name</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (c<span class="operator"> == </span>null) &#123;</span><br><span class="line">                long t0 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>nano<span class="constructor">Time()</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 是否是启动类加载器，不是向上委托</span></span><br><span class="line">                    <span class="keyword">if</span> (parent != null) &#123;</span><br><span class="line">                        c = parent.load<span class="constructor">Class(<span class="params">name</span>, <span class="params">false</span>)</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = find<span class="constructor">BootstrapClassOrNull(<span class="params">name</span>)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c<span class="operator"> == </span>null) &#123;</span><br><span class="line">                   <span class="comment">// 使用类加载器加载</span></span><br><span class="line">                    c = find<span class="constructor">Class(<span class="params">name</span>)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolve<span class="constructor">Class(<span class="params">c</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            return c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><ul><li><p>判断对象是否垃圾回收</p><ul><li>堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断那些对象已经死亡</li><li>两种方法：<ul><li>引用计数法：就是给对象添加引用计数器，每当引用一次，它就加1，而当引用失效，它就减一。当计数器为0时，就被垃圾回收<ul><li>优点：方法简单，执行效率高。</li><li>缺点：对象如果存在循环依赖的话，即A引用B，B引用A，A，B不引用其他实例，导致其引用计数器不为0，无法通知GC回收器回收</li></ul></li><li>可达性分析法：从GC ROOT对象出发，节点开始向下搜索，搜索的路径称为引用链。当一个对象到GC ROOT没有任何引用链相连的话，那么证明对象不可用，会被垃圾回收<ul><li>CG ROOT根节点：类加载器、static成员变量等</li></ul></li></ul></li><li>finalize()方法最终判断对象是否存活<ul><li>即使时不可达的对象，也不一定被垃圾回收。要真正宣布该对象死亡，就要至少经历再一次标记过程</li><li>标记过程<ul><li>第一次标记：查看对象是否覆盖finalize()或者虚拟机已经调用了，虚拟机是为没必要执行，就垃圾回收</li><li>第二次标记：将对象放置在F-QUEUE队列中，稍后虚拟机会自动建立一条线程执行，但是不会立即执行或者等它运行结束。因为finalize()方法慢时，在极端情况下造成死循环，导致内存回收系统崩溃。其中finalize()方法实现其自身对象赋值于引用链中的对象，那么对象就会移除<strong>即将回收</strong>的集合。</li></ul></li></ul></li></ul></li><li><p>垃圾回收算法</p><ul><li>标记-清除算法：算法分为标记、清除。首先标记所有存活对象，在标记完成时，统一回收未标记的对象<ul><li>优点：执行效率高</li><li>缺点：存在大量不连续的内存碎片，造成无法存放内存大的对象</li></ul></li><li>复制算法：将内存分为大小相同的两块，每次只使用其中一块。当这块内存使用满后，就会把存活的对象复制到另一块去，在把原先那块回收<ul><li>优点：不存在大量内存碎片</li><li>缺点：使用效率低，因为每次只使用其中的一块</li></ul></li><li>标记-整理算法：根据老年代特点推出的一种标记算法，标记过程跟标记-清除算法一样，然后把存货的对象向一端移动，清理边外的内存<ul><li>优点：不存在大量内存碎片</li><li>缺点：整理要花一定时间</li></ul></li><li>分代收集算法<ul><li>当前虚拟机用分代收集算法，这种算法不是新思想，而是针对对象存活周期不同将内存分为几块，一般将java堆分为新生代、老年代，根据其中特征选择合适的收集算法<ul><li>新生代：有大量对象死去，选择复制算法，只需付出少量对象复制成本就完成垃圾回收</li><li>老年代：对象存活机率大，没有格外的空间分配担保，所以要用标记—清除或者标记-整理进行垃圾回收</li></ul></li></ul></li></ul></li><li><p>TCP协议中的三次握手和四次挥手</p><ul><li>三次握手<ul><li>第一次：客户端发送syn=1，seq=x发送服务端</li><li>第二次：服务端接收后，发送syn标志，确定标志ack给客户端ack=x+1</li><li>第三次：客户端接收后，发送seq=x+1，ack=y+1给服务端</li></ul></li><li>四次挥手<ul><li>第一次：客户端发送FIN,seq=x发送服务端，客户端进入fin-wait-1状态</li><li>第二次：服务端接收后，发送ack=x+1，seq=y给客户端，进入close-wait状态</li><li>第三次：客户端接收后，进入fin-wait-2状态，服务端发送seq=z，ack=x+1给客户端，服务端进入last-ack</li><li>第四次：客户端接收后，发送ack=z+1，客户端进入time-wait状态</li></ul></li></ul></li><li><p>jvm内存模型</p><ul><li>Jvm内存模型图</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210304212806496.png" alt="image-20210304212806496"></p><ul><li>线程私有<ul><li>程序计数器：记录虚拟机字节码的指令地址</li><li>虚拟机栈：每个方法执行时，都会创建一个栈帧，存储局部变量、操作数、动态链接、方法返回地址。方法从调用到执行完毕，对应栈帧在虚拟机栈入栈和出栈</li><li>本地方法栈：跟虚拟机栈类似，执行native方法</li></ul></li><li>线程共享<ul><li>堆：内存最大的区域，存储java对象</li><li>方法区：存储已被虚拟机加载的类信息、常量、静态变量等</li></ul></li></ul></li><li><p>Java堆的划分</p><ul><li>新生代（1:3）:存放新生的对象<ul><li>Eden(8:10)</li><li>From Survivor(1:10)</li><li>To Survivor(1:10)</li><li>过程：eden区存放新建对象。而当eden区内存不够时，就会触发垃圾回收，将其与from survivor区的存活对象，复制to survivor区，然后to survivor区变成from survivor区，from survivor区变成to survivor区。每经过一次垃圾回收，对象年龄+1，当超过默认15次时，会复制到老年代</li></ul></li><li>老年代(2:3)<ul><li>过程：老年代存放生命周期长的对象。而当老年代内存不够时，会触发full gc，比gc慢10倍左右。当时在装不下时，报出out of memory异常</li></ul></li></ul></li><li><p>Spring面试题</p><ul><li>spring：Spring是一个轻量级的IoC和AOP容器框架，用于简化企业应用程序的开发，它使得开发者只需要关心业务需求。</li><li>spring优点：<ul><li>低侵入式设计，代码的污染极低</li><li>DI机制将对象之间的依赖关系交由框架处理，减低组件的耦合性</li><li>AOP技术，将一些通用业务进行集中式管理，如事务、日志</li></ul></li><li>Spring的IoC理解：创建对象的控制权转移给Spring框架进行管理，创建对象的主动权以前由自己把控的，现在变成spring进行管理，通过java反射，运行时动态创建对象及管理对象调用方法<ul><li>IOC有三种注入方式 ：构造器注入、setter方法注入、根据注解注入</li></ul></li><li>AOP理解：面向切面，将那些与业务无关的通用逻辑，抽取并封装为一个可重用的模块，减低代码耦合<ul><li>AOP代理主要分为静态代理和动态代理<ul><li>静态代理：在编译阶段生成AOP代理类，并将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。</li><li>动态代理：<ul><li>JDK动态代理：只提供接口的代理，不支持类的代理，Proxy类创建代理类，当调用目标类方法时，InvocationHandler 通过invoke()方法反射来调用</li><li>GLIB动态代理：生成目标类的一个子类对象，并覆盖其中特定方法并添加增强代码</li></ul></li></ul></li><li>AOP术语<ul><li>连接点：执行的方法</li><li>切面（Aspect）：被抽取出来的公共模块</li><li>切点（Pointcut）：定义哪些要被org.springframework.aop.Pointcut接口进行拦截</li><li>通知（Advice）：指要在连接点上执行的动作，即增强的逻辑</li><li>目标对象（Target）：包含连接点的对象，称作被通知（Advice）的对象</li><li>织入（Weaving）：通过动态代理，在目标对象（Target）的方法（即连接点Join point）中执行增强逻辑（Advice）的过程</li><li>引入（Introduction）：添加额外的方法或者字段到被通知的类</li></ul></li></ul></li><li>bean生命周期<ul><li>实例化Bean、设置对象属性（依赖注入）、处理Aware接口、BeanPostProcessor前置处理、检查是否有InitializingBean处理，有的话调用afterPropertiesSet方法、检查是否有自定义的init-method、BeanPostProcessor后置处理器、注册必要的destruction回调接口、查看是否实现disposablebean接口、查看是否配置destory方法</li></ul></li></ul></li><li><p>Mybaits</p><ul><li>Mybatis是一个半ORM（对象关系映射）框架</li><li>#{}和${}的区别是什么<ul><li>${}是字符串替换，会直接替换成变量的值</li><li>#{}是预处理，会替换为?号，调用PreparedStatement的set方法来赋值；#{}可以有效的防止SQL注入，提高系统安全性。</li></ul></li><li>优缺点<ul><li>优点：基于SQL语句编程，相当灵活</li><li>缺点：对于多表关联，对编写SQL语句要有一定要求</li><li>Mybatis的一级、二级缓存<ul><li>一级缓存: 基于PerpetualCache 的 HashMap本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该Session中的所有 Cache 就将清空。</li><li>二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，</li><li>一级缓存的sql session互不影响，二级缓存的mapper(namespace)时可以跨多个sql session的</li></ul></li></ul></li></ul></li><li><p>todo</p></li><li><p>HashTable、HashMap、CurrentHashMap</p><ul><li>为什么使用2的n次方<ul><li>因为hash求余效率不如位移运算，源码就做了这种优化。因为hash%length==hash&amp;(length-1)前提是length是2的n次方</li></ul></li><li>HashMap特性<ul><li>hashMap底层</li></ul></li></ul></li><li><p>MySQL</p><ul><li><p>myisam与innodb区别</p><ul><li>myisam支持全文检索，但是不支持事务和行级锁，所以用于大量查询少量插入的场景</li><li>innodb基于聚簇索引建立，与myisam相反，它支持事务、外键</li></ul></li><li><p>mysql索引</p><ul><li>mysql索引是B+树索引，而B+树是左小右大的存储结构，节点只包含id索引列，叶子节点包含索引列和数据，而这种索引叫做聚簇索引</li><li>什么是非聚簇索引：跟聚簇索引相同结构，但是其叶子节点包含数据的存储地址，而Myisam使用这种索引</li></ul></li><li><p>锁类型</p><ul><li>mysql锁分为共享锁和排他锁，也成为读锁和写锁</li><li>读锁是共享的，但是这时候只读不写</li><li>写锁是排他锁，它会阻塞其他写锁和读锁，而按粒度来看，又分为行锁和表锁</li><li>表锁会锁定整个表，阻塞其他用户对该表的读写操作，比如alter修改表</li><li>行锁分为乐观锁和悲观锁，悲观锁用于for update，乐观锁通过版本号实现</li></ul></li><li><p>mysql主从表</p><ul><li>mysql主从同步原理<ul><li>master提交完事务后，写入binlog</li><li>master创建dump线程，推送binlog到slave</li><li>slave启动一个线程读取同步过来的master的binlog，记录到relay_log中继日志中</li><li>slave开启sql线程读取relay_log事件并在slave执行，完成同步</li><li>slave记录自己的binlog</li></ul></li><li>mysql默认的复制方式是异步的，主库发送日志后不再关心从库，而这样产生一个问题：主库挂了，从库处理失败，这时候从库身为主库，日志丢了。这时候有两种概念<ul><li>全同步复制：主库写入binlog后强制日志同步到从库，从库完成后才返回客户端</li><li>半同步复制：从库写入日志成功后发送ack给主库，主库收到ack就判断操作完成</li></ul></li></ul></li><li><p>事务</p><ul><li>事务的四大特性（ACID）</li></ul><ol><li>原子性(Atomicity)：事务执行操作，要么全部成功，要么全部失败。事务失败会回滚事务开始前的状态</li><li>一致性（Consistency）: 事务前后数据的完整性必须保持一致。比如A转账B，那么A减少金额，B一定增加对应的金额</li><li>隔离性（Isolation）: 同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A转账给B，那么A转钱过程中，C无法转钱给A</li><li>持久性（Durability）：事务一旦提交，数据库的数据改变时永久的</li></ol><ul><li>事务的四个隔离级别</li></ul><p>√: 可能出现  ×: 不会出现</p><table><thead><tr><th align="left">事务隔离级别（从低到高）</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="left">读未提交（read-uncommitted）</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">读已提交（read-committed）</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">可重复读（repeatable-read）</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="left">串行化（serializable）</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><ul><li>读未提交：事务A操作数据时，其他事务只允许对该行数据读取，虽然解决<strong>更新丢失</strong>问题。但是会照成<strong>脏读</strong>。<ul><li>什么是脏读：脏读就是事务A读取到事务B未提交的数据</li></ul></li><li>读已提交：事务A操作数据时，其他事务不允许对该行读写操作。这样能就解决<strong>脏读</strong>问题。但是会照成<strong>不可重复读</strong><ul><li>什么是不可重复读：事务A读取事务B操作前的数据和提交后的数据不一致</li></ul></li><li>可重复读：一个事务内，A读取数据，其他事务不允许对该行操作，这样多次读取的数据是一致的，解决了不可重复读的问题。但是会照成<strong>幻读</strong><ul><li>什么是幻读：事务A读取到事务B新增或者删除数据，导致数据个数不一致</li></ul></li><li>串行化：事务只能一个接着一个地执行，但不能并发执行。虽然能解决幻读问题。但是这种性能低，很少使用</li></ul></li><li><p>MySQL优化</p><ul><li>数据库设计优化<ul><li>选择合适的字段属性：比如性别有男、女，可以通过tinyint(1)来记录，不用varchar这样减少数据库不必要的内存同时整型处理效率比文本快，另外把所有的字段最好NOT ＮULL避免全表扫描</li></ul></li><li>使用join替代子查询，之所以效率高些，因为MySQL不需要在内存中创建临时表来完成两步查询操作</li><li>使用索引<ul><li>在where子句中的列设置索引</li><li>最左前缀原则</li><li>尽量使用覆盖索引。因为辅助索引的叶子节点包含索引值和主键，如果查询的列不包含在覆盖索引中，那么这些列会通过主键搜索主键索引，这种情况会可能照成全表扫描</li><li>不要使用````!=, not in, no exist, is null , is not null``，因为这样会造成全表扫描</li><li>不要再索引列进行操作</li></ul></li><li>优化语句<ul><li>使用explain优化语句<ul><li>id列：select序列号，id越大，优先级越高；id相同从上到下执行；id为null最后执行</li><li>select_type列<ul><li>select_type 表示对应行是简单还是复杂的查询。<ul><li>simple：简单查询。查询不包含子查询和union</li><li>primary：复杂查询中最外层的 select</li><li>subquery：包含在 select 中的子查询（不在 from 子句中）</li><li>derived：包含在 from 子句中的子查询。MySQL会将结果存放在一个临时表中，也称为<br>派生表（derived的英文含义）</li><li>union：在 union 中的第二个和随后的 select</li></ul></li></ul></li><li>table列<ul><li>访问哪个表</li><li>当 from 子句中有子查询时，table列是 &lt;deriven+id&gt; 格式，对应id的查询（如<deriven2>即id=2的查询）</li><li>当有 union 时，UNION RESULT 的 table 列的值为&lt;union1,2&gt;，1和2表示参与 union 的<br>select 行id。</li></ul></li><li>type列：表示查询使用那种类型、是否使用索引，反映语句的质量<ul><li>system&gt; const&gt; eq_ref&gt; ref&gt;rang&gt; index&gt; all,最少要得保证查询达到range级别，最好达到ref</li><li>ref 表示具有匹配索引的行都用到</li><li>range表示索引范围内查找</li><li>index表示全索引树查找</li><li>all表示全表扫描</li></ul></li><li>possible_keys：mysql试用了那些索引</li><li>key：显示使用的索引</li><li>key_len：表示使用索引的长度。比如覆盖索引，每一列有固定的长度，根据长度判断使用那个列</li><li>extra：包含mysql查询的详细信息<ul><li>Using index：使用覆盖索引</li><li>Using where：使用 where 语句来处理结果，查询的列未被索引覆盖</li><li>Using index condition：查询的列不完全被索引覆盖</li><li>Using filesort：将用外部排序而不是索引排序</li></ul></li></ul></li></ul></li></ul></li><li><p>Redis</p><ul><li><p>五种数据类型</p><ul><li>String字符串，格式：set key value，一般用于对象缓存</li><li>Hash（哈希），格式: hmset key value1 value2 value3，一般用于对象集合的缓存。比如商品中有一个需要修改，那么只要更新hash的缓存集合，不需要重新从数据库获取缓存</li><li>List（列表）有序、可重复，底层是链表，格式：lpush name value。可以对两端进行插入、弹出操作。可用于博客的用户列表</li><li>set是无序不可重复。可用于博客中用户之间的共同关注文章</li><li>zset，有序不可重复，根据分数进行排序。可用于热门的标签排序</li></ul></li><li><p>redis与mecache对比</p><ul><li>redis具有丰富的数据类型，mecache只支持key-value</li><li>redis可以把数据持久化，而mecache把数据保存到内存中，当程序关闭时，数据就会消失</li></ul></li><li><p>redis持久化</p><ul><li>什么是持久化？持久化就是将数据从内存保存到硬盘，防止redis宕机数据丢失</li><li>RDB和AOF<ul><li>RDB，将数据以快照的形式保存磁盘，是redis默认的方式。当redis重启时，会读取RDB文件。但是有个缺点，RDB不能实时备份数据，有部分时刻的数据会丢失</li><li>AOF，将redis写命令写入磁盘，这样能保证实时备份数据。可是如果命令过多，就会照成redis重启时间过长</li><li>redis 4.0后，出现混合持久化模式，结合两者优缺点。RDB的内容会写入AOF开头，这样既能提升加载速度，又能保证数据的实时性。但是因为两者结合AOF里面RDB内容可读性差</li></ul></li></ul></li><li><p>redis过期策略(Redis默认采用惰性策略+定时过期)</p><ul><li>定时策略：就是每个设置过期时间的key设置定时器，到过期时间就会清除</li><li>惰性策略：当访问一个key，才判断key是否已过期，过期清除</li><li>定时过期：每个一定时间，扫描一定数量的key，清除已过期的key</li></ul></li><li><p>redis淘汰策略</p><ul><li>noeviction：内存不足，写入新数据报错</li><li>allkeys-lru：内存不足，写入新数据，移除最近最少用的key</li><li>allkeys-random：内存不足，写入新数据，随机移除key</li><li>volatile-lru：内存不足，写入新数据，在设置过期时间的key中，移除最近最少用的key</li><li>volatile-random：内存不足，写入新数据，在设置过期时间的key中，移除最近最少用的key</li><li>volatile-ttl：内存不足，写入新数据，在设置过期时间的key中，移除最早过期的key</li></ul></li><li><p>Redis缓存穿透、雪崩、击穿</p><ul><li><p>缓存穿透：缓存穿透就是访问一个不存在的数据时，缓存没有命中，而访问数据库，在高并发情况下，数据库又因为压力而宕机</p><ul><li>解决方案<ul><li>布隆过滤器: 布隆过滤器实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</li><li>原理：当一个元素被加入集合时，通过K个散列函数将这个元素映射成一个位数组中的K个点，把它们置为1。检索时，我们只要看看这些点是不是都是1就（大约）知道集合中有没有它了：如果这些点有任何一个0，则被检元素一定不在；如果都是1，则被检元素很可能在。</li><li>优点：相比于其它的数据结构，布隆过滤器在空间和时间方面都有巨大的优势。布隆过滤器存储空间和插入/查询时间都是常数（O(k)）。而且它不存储元素本身，在某些对保密要求非常严格的场合有优势。</li><li>缺点：一定的误识别率和删除困难。<br>结合以上几点及去重需求（容忍误判，会误判在，在则丢，无妨），决定使用BlomFilter。</li></ul></li></ul></li><li><p>缓存雪崩：在缓存时设置相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，数据库瞬时压力过重雪崩。 </p><ul><li>解决方案：缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li></ul></li><li><p>缓存击穿：某个数据设置过期时间，而该数据是被高并发访问的热点数据，一旦过期，可能就会造成缓存被击穿的可能</p><ul><li>解决方案<ul><li>使用互斥锁解决</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(key)</span> </span>&#123;  </span><br><span class="line">      String value = redis.get(key);  </span><br><span class="line">      <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; <span class="comment">//代表缓存值过期  </span></span><br><span class="line">          <span class="comment">//设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db  </span></span><br><span class="line">          <span class="keyword">if</span> (redis.setnx(key_mutex, <span class="number">1</span>, <span class="number">3</span> * <span class="number">60</span>) == <span class="number">1</span>) &#123;  <span class="comment">//代表设置成功  </span></span><br><span class="line">               value = db.get(key);  </span><br><span class="line">               redis.set(key, value, expire_secs);  </span><br><span class="line">               redis.del(key_mutex);  </span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;  <span class="comment">//这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可  </span></span><br><span class="line">                      sleep(<span class="number">50</span>);  </span><br><span class="line">                      get(key);  <span class="comment">//重试  </span></span><br><span class="line">              &#125;  </span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">              <span class="keyword">return</span> value;        </span><br><span class="line">          &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>将该数据不设置过期时间，就不会造成缓存击穿问题</li></ul></li></ul></li></ul></li><li><p>Nginx</p><ul><li>Nginx是一个高性能的 HTTP 和 反向代理 服务器</li><li>Nginx负载均衡<ul><li>循环轮询</li><li>最少连接，即每次都找连接数最少的服务器来转发请求</li><li>IP地址来决定当前请求</li><li>权重算法，会根据每个服务的权重来分发请求，权重大的请求相对会多分发一点，权重小的会少分发一点。</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker部署svn</title>
      <link href="/2020/05/13/docker%E9%83%A8%E7%BD%B2svn/"/>
      <url>/2020/05/13/docker%E9%83%A8%E7%BD%B2svn/</url>
      
        <content type="html"><![CDATA[<h1 id="docker部署svn"><a href="#docker部署svn" class="headerlink" title="docker部署svn"></a>docker部署svn</h1><p>[toc]</p><h2 id="一、下载svn的镜像文件"><a href="#一、下载svn的镜像文件" class="headerlink" title="一、下载svn的镜像文件"></a>一、下载svn的镜像文件</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索svn镜像</span></span><br><span class="line"><span class="attribute">docker</span> search svn</span><br></pre></td></tr></table></figure><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210326171514270.png" alt="image-20210326171514270"></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 下拉镜像</span></span><br><span class="line">docker pull garethflowers/svn-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><h2 id="二、运行svn容器"><a href="#二、运行svn容器" class="headerlink" title="二、运行svn容器"></a>二、运行svn容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行命令，将容器的svn挂在到本地svn，这样可以在本地修改，不用到容器内部修改</span></span><br><span class="line">docker run -v /opt/svn:/var/opt/svn --name svn -p 3690:3690 -d garethflowers/svn-server</span><br><span class="line"><span class="comment"># 跳转到/opt/svn目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/svn</span><br><span class="line"><span class="comment"># 创建仓库，仓库名test</span></span><br><span class="line">svnadmin <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 修改配置文件授予权限</span></span><br><span class="line">- <span class="comment"># 跳转到/opt/svn/test/conf目录</span></span><br><span class="line">  <span class="built_in">cd</span> /opt/svn/<span class="built_in">test</span>/conf</span><br><span class="line">- <span class="comment"># 修改svnserve.conf,把注释去掉</span></span><br><span class="line">  anon-access = none     <span class="comment">#控制非鉴权用户访问版本库的权限</span></span><br><span class="line">  auth-access = write    <span class="comment">#控制鉴权用户访问版本库的权限</span></span><br><span class="line">  password-db = passwd   <span class="comment">#指定用户名口令文件名</span></span><br><span class="line">  authz-db = authz       <span class="comment">#指定权限配置文件</span></span><br><span class="line">- <span class="comment"># 修改passwd，添加用户和密码</span></span><br><span class="line">  <span class="built_in">test</span> = test123</span><br><span class="line">- <span class="comment"># 设置仓库权限</span></span><br><span class="line">  <span class="built_in">test</span> = <span class="built_in">test</span>  <span class="comment"># 第一个test是组名，第二个test是用户名</span></span><br><span class="line">  [<span class="built_in">test</span>:/]   <span class="comment"># test仓库名</span></span><br><span class="line">  @<span class="built_in">test</span> = rw   <span class="comment"># @组名</span></span><br><span class="line">  * = r</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 重启svn</span></span><br><span class="line">docker restart svn</span><br></pre></td></tr></table></figure><h2 id="三、测试svn是否可以访问"><a href="#三、测试svn是否可以访问" class="headerlink" title="三、测试svn是否可以访问"></a>三、测试svn是否可以访问</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本机测试</span></span><br><span class="line"><span class="attribute">curl</span> http://127.0.0.1:3690/test  <span class="comment"># test仓库名</span></span><br><span class="line">响应是如下图，则启动成功</span><br></pre></td></tr></table></figure><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210326172855979.png" alt="image-20210326172855979"></p><h2 id="四、异常处理"><a href="#四、异常处理" class="headerlink" title="四、异常处理"></a>四、异常处理</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异常</span></span><br><span class="line">docker: <span class="builtin-name">Error</span> response <span class="keyword">from</span> daemon: driver failed programming external connectivity on endpoint svn (6de16f10af6e0d3c8865e8172c501c1872cc17947001d25b73011fc28cb9081c):  (iptables failed: iptables --wait -t<span class="built_in"> nat </span>-A DOCKER -p tcp -d 0/0 --dport 3690 -j DNAT --to-destination 172.17.0.2:3690 ! -i docker0: iptables: <span class="literal">No</span> chain/target/match by that name.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方法</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么使用ThreadPoolExecutor创建线程池</title>
      <link href="/2020/03/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8ThreadPoolExecutor%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2020/03/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8ThreadPoolExecutor%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么使用ThreadPoolExecutor创建线程池"><a href="#为什么使用ThreadPoolExecutor创建线程池" class="headerlink" title="为什么使用ThreadPoolExecutor创建线程池"></a>为什么使用ThreadPoolExecutor创建线程池</h1><p>[toc]</p><h2 id="一、为什么要使用线程池"><a href="#一、为什么要使用线程池" class="headerlink" title="一、为什么要使用线程池"></a>一、为什么要使用线程池</h2><ol><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ol><h2 id="二、为什么不使用Excutors创建线程"><a href="#二、为什么不使用Excutors创建线程" class="headerlink" title="二、为什么不使用Excutors创建线程"></a>二、为什么不使用Excutors创建线程</h2><ul><li><p>阿里编程规范</p><ul><li><p>【强制】线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明：Executors返回的线程池对象的弊端如下： </p><ul><li><p><code>FixedThreadPool和SingleThreadPool</code>： 允许的<strong>请求队列</strong>长度为<code>Integer.MAX_VALUE</code>，可能会堆积大量的请求，从而导致OOM。 </p></li><li><p><code>CachedThreadPool和ScheduledThreadPool</code>： 允许的创建<strong>线程数量</strong>为<code>Integer.MAX_VALUE</code>，可能会创建大量的线程，从而导致OOM。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个单线程化线程池，它只会用唯一的工作线程执行任务，保证所有任务按照指定顺序（FIFO，LIFO，优先级）执行</span></span><br><span class="line">Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">// 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</span></span><br><span class="line">Executors.newFixedThreadPool();</span><br><span class="line"><span class="comment">// 创建一个定长线程池，可控制线程最大并发数，超出线程会在队列中等待</span></span><br><span class="line">Executors.newCachedThreadPool();  </span><br><span class="line"><span class="comment">// 创建一个定长线程池，支持定时及周期性任务执行</span></span><br><span class="line">Executors.newScheduledThreadPool();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ThreadPoolExecutor创建线程池的优势</p><ul><li>在创建线程池时需根据自己的情况来合理设置线程池。ThreadPoolExecutor构造方法提供了多种参数定义线程池。具体说明如下</li></ul></li></ul></li></ul><h2 id="三、使用ThreadPoolExecutor创建线程池"><a href="#三、使用ThreadPoolExecutor创建线程池" class="headerlink" title="三、使用ThreadPoolExecutor创建线程池"></a>三、使用ThreadPoolExecutor创建线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">    * parameters and default thread factory.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">    *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">    *        pool</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">    *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">    *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">    *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">    *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment">    *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment">    *         or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">            Executors.defaultThreadFactory(), handler);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><code>corePoolSize</code> &amp; <code>maximumPoolSize</code><ul><li><code>corePoolSize</code>：核心线程数。如果没有设置<code>allowCoreThreadTimeOut</code>超时时间，那么空闲的线程不会销毁</li><li>````maximumPoolSize``：最大线程数。线程池允许的最大线程数</li><li>当一个新任务被提交到池中，如果当前运行线程小于核心线程数<code>corePoolSize</code>，即使当前有空闲线程，也会新建一个线程来处理新提交的任务；如果当前运行线程数大于核心线程数<code>corePoolSize</code>并小于最大线程数<code>maximumPoolSize</code>，只有当等待队列已满的情况下才会新建线程。</li></ul></li><li><code>keepAliveTime</code> &amp; <code>unit</code><ul><li><code>keepAliveTime</code>：超过核心线程数的线程最大空闲时间。</li><li><code>unit</code>：<code>keepAliveTime</code>的时间单位</li></ul></li><li><code>workQueue</code>：等待队列：用于移交或者保存提交（执行``execute<code>方法）的任务（</code>Runnable`的任务），但线程池中线程执行完后就执行队列任务。<ul><li>如果运行线程数小于<code>corePoolSize</code>，提交新任务时就会新建一个线程来运行；</li><li>如果运行线程数大于或等于<code>corePoolSize</code>，新提交的任务就会入列等待；如果队列已满，并且运行线程数小于<code>maximumPoolSize</code>，也将会新建一个线程来运行；</li><li>如果线程数大于<code>maximumPoolSize</code>，新提交的任务将会根据<strong>拒绝策略</strong>来处理。</li><li>三种通用的<strong>入队策略</strong>（PS：<strong>不是拒绝策略</strong>）<ul><li><strong>直接传递</strong>：通过·<code>SynchronousQueue</code> 直接把任务传递给线程。如果当前没可用线程，尝试入队操作会失败，然后再创建一个新的线程。当处理可能具有内部依赖性的请求时，该策略会避免请求被锁定。直接传递通常需要无界的最大线程数（<code>maximumPoolSize</code>），避免拒绝新提交的任务。当任务持续到达的平均速度超过可处理的速度时，可能导致线程的无限增长。</li><li><strong>无界队列</strong>：使用无界队列（如 <code>LinkedBlockingQueue</code>）作为等待队列，当所有的核心线程都在处理任务时， 新提交的任务都会进入队列等待。因此，不会有大于 <code>corePoolSize</code> 的线程会被创建（<code>maximumPoolSize</code>也将失去作用）。这种策略适合每个任务都完全独立于其他任务的情况；例如网站服务器。这种类型的等待队列可以使瞬间爆发的高频请求变得平滑。当任务持续到达的平均速度超过可处理速度时，可能导致等待队列无限增长。</li><li><strong>有界队列</strong>：当使用有限的最大线程数时，有界队列（如 <code>ArrayBlockingQueue</code>）可以防止资源耗尽，但是难以调整和控制。队列大小和线程池大小可以相互作用：使用大的队列和小的线程数可以减少CPU使用率、系统资源和上下文切换的开销，但是会导致吞吐量变低，如果任务频繁地阻塞（例如被I/O限制），系统就能为更多的线程调度执行时间。使用小的队列通常需要更多的线程数，这样可以最大化CPU使用率，但可能会需要更大的调度开销，从而降低吞吐量。</li></ul></li></ul></li><li><code>handler</code>：当线程池已经关闭或达到饱和（最大线程和队列都已满）状态时，新提交的任务将会被拒绝。<ul><li>ThreadPoolExecutor 定义了四种拒绝策略：<ul><li><strong>AbortPolicy</strong>：默认策略，在需要拒绝任务时抛出``RejectedExecutionException`；</li><li><strong>CallerRunsPolicy</strong>：直接在 <code>execute</code> 方法的调用线程中运行被拒绝的任务，如果线程池已经关闭，任务将被丢弃；</li><li><strong>DiscardPolicy</strong>：直接丢弃任务；</li><li><strong>DiscardOldestPolicy</strong>：丢弃队列中等待时间最长的任务，并执行当前提交的任务，如果线程池已经关闭，任务将被丢弃。</li></ul></li><li>我们也可以自定义拒绝策略，只需要实现<code>RejectedExecutionHandler</code>；需要注意的是，拒绝策略的运行需要指定线程池和队列的容量</li></ul></li></ul></li></ul><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>线程池执行流程图</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320222223985.png" alt="image-20210320222223985"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ThreadPoolExecutor创建线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//核心线程数</span></span><br><span class="line">        <span class="keyword">int</span> corePoolSize = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//最大线程数</span></span><br><span class="line">        <span class="keyword">int</span> maximumPoolSize = <span class="number">6</span>;</span><br><span class="line">        <span class="comment">//超过 corePoolSize 线程数量的线程最大空闲时间</span></span><br><span class="line">        <span class="keyword">long</span> keepAliveTime = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//以秒为时间单位</span></span><br><span class="line">        TimeUnit unit = TimeUnit.SECONDS;</span><br><span class="line">        <span class="comment">//创建工作队列，用于存放提交的等待执行任务</span></span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建线程池</span></span><br><span class="line">            threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize,</span><br><span class="line">                    maximumPoolSize,</span><br><span class="line">                    keepAliveTime,</span><br><span class="line">                    unit,</span><br><span class="line">                    workQueue,</span><br><span class="line">                    <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环提交任务</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//提交任务的索引</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> index = (i + <span class="number">1</span>);</span><br><span class="line">                threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                    <span class="comment">//线程打印输出</span></span><br><span class="line">                    System.out.println(<span class="string">"大家好，我是线程："</span> + index);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//模拟线程执行时间，10s</span></span><br><span class="line">                        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                        <span class="comment">// System.out.println("线程" + index + "执行完");</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">//每个任务提交后休眠500ms再提交下一个任务，用于保证提交顺序</span></span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPoolExecutor.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 单元测试中主线程执行完，不管子线程是否执行都会关闭程序，所以要使主线程等待到子线程全部执行完</span></span><br><span class="line">            <span class="comment">// 而mian()方法则不会，他会等待子线程执行完关闭程序</span></span><br><span class="line">            Thread.sleep(<span class="number">100000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果预估</p><ul><li><p>因为最大线程数<code>maximumPoolSize</code>是6，<code>队列</code>容量是2时，即执行线程数超过8时，就会执行拒绝策略</p></li><li><p>不超过就执行<strong>流程图中流程2</strong>的过程</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320223342834.png" alt="image-20210320223342834"></p></li><li><p>超过之后根据拒绝策略，判断是否放弃任务</p><ul><li><p>把执行的任务数量变成9，策略是<code>AbortPolicy</code>，在需要拒绝任务时抛出``RejectedExecutionException`</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320223912156.png" alt="image-20210320223912156"></p></li><li><p>把执行的任务数量变成9，策略是<code>CallerRunsPolicy</code>，直接在 <code>execute</code> 方法的调用线程中运行被拒绝的任务，如果线程池已经关闭，任务将被丢弃</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320224101466.png" alt="image-20210320224101466"></p></li><li><p>把执行的任务数量变成9，策略是<code>DiscardPolicy</code>，直接丢弃任务</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320224212232.png" alt="image-20210320224212232"></p></li><li><p>把执行的任务数量变成9，策略是<code>DiscardOldestPolicy</code>，丢弃队列中等待时间最长的任务，并执行当前提交的任务，如果线程池已经关闭，任务将被丢弃</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210320224346228.png" alt="image-20210320224346228"></p></li></ul></li></ul><h2 id="五、线程池设置设置多大比较合适"><a href="#五、线程池设置设置多大比较合适" class="headerlink" title="五、线程池设置设置多大比较合适"></a>五、线程池设置设置多大比较合适</h2><ul><li><p>有一个简单并且适用面比较广的公式：</p><ul><li><strong>CPU 密集型任务(N+1)：</strong> 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1，比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。</li><li><strong>I/O 密集型任务(2N)：</strong> 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。</li></ul></li><li><p>如何判断是 CPU 密集任务还是 IO 密集任务？</p><p>CPU 密集型简单理解就是利用 CPU 计算能力的任务比如你在内存中对大量数据进行排序。单凡涉及到网络读取，文件读取这类都是 IO 密集型，这类任务的特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，大部分时间都花在了等待 IO 操作完成上。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadPoolExecutor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM--类加载器</title>
      <link href="/2020/02/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/2020/02/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解JVM–类加载器"><a href="#深入理解JVM–类加载器" class="headerlink" title="深入理解JVM–类加载器"></a>深入理解JVM–类加载器</h1><h2 id="一、类与类加载器的关系"><a href="#一、类与类加载器的关系" class="headerlink" title="一、类与类加载器的关系"></a>一、类与类加载器的关系</h2><ul><li><p>任意一个类,都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性</p></li><li><p>每个类加载器都有各自的命名空间，命名空间由该加载器及所有父加载器所加载的类组成。 </p></li></ul><h2 id="二、类加载器种类"><a href="#二、类加载器种类" class="headerlink" title="二、类加载器种类"></a>二、类加载器种类</h2><p>启动类加载器： 由C++编写，无法通过程序得到。主要负责加载JAVA中的 一些核心类库，主要是位于<JAVA_HOME>/lib/rt.jar中 </p><p>扩展类加载器： 要加载JAVA中的一些拓展类，主要位于<JAVA_HOME>/lib/ext </p><p>系统类加载器： 主要用于加载CLASSPATH路径下的类 </p><h2 id="三、类加载机制"><a href="#三、类加载机制" class="headerlink" title="三、类加载机制"></a>三、类加载机制</h2><p>全盘委托： 指当一个类加载器加载一个类时，除非显示地使用另一个类加载器，否则该类所依赖与引用的类也由这个类加载器加载。 </p><p>双亲委派： 一个类加载器要加载一个类时，先判断是否已被加载，如果没有，它会先委托自己的父类加载器来加载， 以此类推，直到启动类加载器无法加载，向下委托子类加载器加载 </p><h2 id="四、双亲委派模型源码分析"><a href="#四、双亲委派模型源码分析" class="headerlink" title="四、双亲委派模型源码分析"></a>四、双亲委派模型源码分析</h2><p><img src="C:%5CUsers%5C20423%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1583074859678.png" alt="1583074859678"></p><p><img src="C:%5CUsers%5C20423%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1583075146217.png" alt="1583075146217">)<img src="C:%5CUsers%5C20423%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1583075296256.png" alt="1583075296256"></p><p><img src="C:%5CUsers%5C20423%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1583075400741.png" alt="1583075400741"></p><h2 id="五、自定义类加载器"><a href="#五、自定义类加载器" class="headerlink" title="五、自定义类加载器"></a>五、自定义类加载器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.deschen.jvm.gc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomClassLoaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        CustomClassLoader loader01 = <span class="keyword">new</span> CustomClassLoader(<span class="string">"F:\\java-note\\jvm-note\\classes\\"</span>, <span class="string">".class"</span>, <span class="string">"loader01"</span>);</span><br><span class="line">        CustomClassLoader loader02 = <span class="keyword">new</span> CustomClassLoader(<span class="string">"F:\\java-note\\jvm-note\\classes\\"</span>, <span class="string">".class"</span>, <span class="string">"loader02"</span>);</span><br><span class="line">        Class&lt;?&gt; class01 = loader01.loadClass(<span class="string">"cn.deschen.jvm.gc.C"</span>);</span><br><span class="line">        System.out.println(<span class="string">"class01 类加载器："</span> + class01.getClassLoader());</span><br><span class="line">        Class&lt;?&gt; class02 = loader02.loadClass(<span class="string">"cn.deschen.jvm.gc.C"</span>);</span><br><span class="line">        System.out.println(<span class="string">"class02 类加载器："</span> + class02.getClassLoader());</span><br><span class="line">        <span class="comment">// 结果是false</span></span><br><span class="line">        <span class="comment">// 为什么都是C类，结果是false呢？ =》因为loader01与loader02不是同一个类加载器，因此类的命令空间不同，因此两个类是不一样的</span></span><br><span class="line">        System.out.println(<span class="string">"class01 == class02："</span> + (class01 == class02));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: java-note</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: deschen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义类加载器</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String loadPath;   <span class="comment">// 文件路径</span></span><br><span class="line">    <span class="keyword">private</span> String filePrefix;   <span class="comment">// 文件后缀</span></span><br><span class="line">    <span class="keyword">private</span> String loaderName;   <span class="comment">// 类加载器名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认应用类加载器作为自定义类加载器的父类加载器</span></span><br><span class="line"><span class="comment">     * 调用父类构造方法</span></span><br><span class="line"><span class="comment">     * java.lang.ClassLoader.ClassLoader()&#123;</span></span><br><span class="line"><span class="comment">     *     this(checkCreateClassLoader(), getSystemClassLoader());</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * getSystemClassLoader()就是应用程序类加载器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomClassLoader</span><span class="params">(String loadPath, String filePrefix, String loaderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.loadPath = loadPath;</span><br><span class="line">        <span class="keyword">this</span>.filePrefix = filePrefix;</span><br><span class="line">        <span class="keyword">this</span>.loaderName = loaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomClassLoader</span><span class="params">(ClassLoader parent, String loadPath, String filePrefix, String loaderName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置应用类加载器的父类加载器</span></span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        <span class="keyword">this</span>.loadPath = loadPath;</span><br><span class="line">        <span class="keyword">this</span>.filePrefix = filePrefix;</span><br><span class="line">        <span class="keyword">this</span>.loaderName = loaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoadPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loadPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadPath</span><span class="params">(String loadPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadPath = loadPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFilePrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filePrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilePrefix</span><span class="params">(String filePrefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filePrefix = filePrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoaderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoaderName</span><span class="params">(String loaderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loaderName = loaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * class文件转换为字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name  类的二进制名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassData(String name) &#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream bao = <span class="keyword">null</span>;</span><br><span class="line">        name = name.replace(<span class="string">"."</span>, <span class="string">"//"</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(loadPath + name + filePrefix);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            bao = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> ch;</span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != (ch = fis.read())) &#123;</span><br><span class="line">               bao.write(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != bao) &#123;</span><br><span class="line">                    bao.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != fis) &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = loadClassData(name);</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、打破双亲委派机制"><a href="#六、打破双亲委派机制" class="headerlink" title="六、打破双亲委派机制"></a>六、打破双亲委派机制</h2><img src=" https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584533309335.png " alt="1584533309335" style="zoom:200%;" /><p>`</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 配置Gradle</title>
      <link href="/2020/01/05/IDEA%20%E9%85%8D%E7%BD%AEGradle/"/>
      <url>/2020/01/05/IDEA%20%E9%85%8D%E7%BD%AEGradle/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA-配置Gradle"><a href="#IDEA-配置Gradle" class="headerlink" title="IDEA 配置Gradle"></a>IDEA 配置Gradle</h1><p>[toc]</p><h2 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h2><ul><li><a href="https://gradle.org/releases/" target="_blank" rel="noopener">下载网址</a></li><li>解压到磁盘（如：D:\Gradle6.5.1）</li></ul><h2 id="二、配置win10环境变量"><a href="#二、配置win10环境变量" class="headerlink" title="二、配置win10环境变量"></a>二、配置win10环境变量</h2><ul><li><p>我的电脑 》右键》属性》高级系统设置 》高级》环境变量 》系统变量 》Path添加gradle的bin路径</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210322161606954.png" alt="image-20210322161606954"></p></li></ul><h2 id="三、IDEA配置Gradle"><a href="#三、IDEA配置Gradle" class="headerlink" title="三、IDEA配置Gradle"></a>三、IDEA配置Gradle</h2><ul><li><p>IDEA 》 setting 》Build，Execution… 》Build Tools 》 Gradle</p><ul><li>设置Gradle user home，用于存储 jar 包的仓库（可在全局setting设置）</li><li>点击项目，在Build and run using 和 Run tests using 设置为 IntelliJ IDEA，不然build很慢的</li><li>设置Use Gradle from 为 Specified location ，右边是gradle的安装目录</li><li>PS：全局setting只有Gradle user home，其他步骤只有在项目设置才会显示</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210322172320885.png" alt="image-20210322172320885"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM--七种垃圾收集器</title>
      <link href="/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E4%B8%83%E7%A7%8D%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
      <url>/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E4%B8%83%E7%A7%8D%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解JVM–七种垃圾收集器"><a href="#深入理解JVM–七种垃圾收集器" class="headerlink" title="深入理解JVM–七种垃圾收集器"></a>深入理解JVM–七种垃圾收集器</h1><h2 id="一、垃圾收集器"><a href="#一、垃圾收集器" class="headerlink" title="一、垃圾收集器"></a>一、垃圾收集器</h2><ul><li><p>七种垃圾收集器组合</p><p> <img src="http://img.blog.csdn.net/20170102225015393" alt="img"></p></li><li><p>区域划分</p><ul><li>新生代收集器：Serial、ParNew、Parallel Scavenge；</li><li>老年代收集器：Serial Old、Parallel Old、CMS；</li><li>整堆收集器：G1；</li></ul></li></ul><h2 id="二、并发垃圾收集和并行垃圾收集的区别"><a href="#二、并发垃圾收集和并行垃圾收集的区别" class="headerlink" title="二、并发垃圾收集和并行垃圾收集的区别"></a>二、并发垃圾收集和并行垃圾收集的区别</h2><ul><li>并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态；如：ParNew、Parallel Scavenge、Parallel Old；</li><li>并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行）；用户程序在继续运行，而垃圾收集程序线程运行于另一个CPU上；如：CMS、G1（也有并行）；</li></ul><h2 id="三、收集器详解"><a href="#三、收集器详解" class="headerlink" title="三、收集器详解"></a>三、收集器详解</h2><h3 id="1、Serial收集器"><a href="#1、Serial收集器" class="headerlink" title="1、Serial收集器"></a>1、Serial收集器</h3><p>Serial（串行）收集器收集器是<strong>最基本、历史最悠久</strong>的垃圾收集器了。大家看名字就知道这个收集器是一个<strong>单线程收集器</strong>了。它的单线程的意义不仅仅意味着它<strong>只会使用一条垃圾收集线程去完成垃圾收集</strong>工作，更重要的是<strong>它在进行垃圾收集工作的时候必须暂停其他所有的工作线程</strong>（ <strong>“Stop The World”</strong> ），直到它收集结束。</p><p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong></p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584521520253.png" alt="1584521520253"></p><h3 id="2、ParNew收集器"><a href="#2、ParNew收集器" class="headerlink" title="2、ParNew收集器"></a>2、ParNew收集器</h3><p>ParNew收集器其实就是<strong>Serial收集器的多线程版本</strong>，除了<strong>使用多线程进行垃圾收集外</strong>，<strong>其余行为</strong>（控制参数、收集算法、回收策略等等）和Serial收集器<strong>完全一样</strong>。</p><p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong></p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584521563004.png" alt="1584521563004"></p><h3 id="3、Parallel-Scavenge收集器"><a href="#3、Parallel-Scavenge收集器" class="headerlink" title="3、Parallel Scavenge收集器"></a>3、Parallel Scavenge收集器</h3><p>Parallel Scavenge 收集器<strong>类似于ParNew 收集器，是Server 模式</strong>（内存大于2G，2个cpu）下的<strong>默认收集器</strong>，那么它有什么特别之处呢？</p><p>Parallel Scavenge收集器<strong>关注点是吞吐量（高效率的利用CPU）</strong>。所谓吞吐量就是<strong>CPU中用于运行用户代码的时间与CPU总消耗时间的比值</strong>。 </p><p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong></p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584521574511.png" alt="1584521574511"></p><h3 id="4、Serial-Old收集器"><a href="#4、Serial-Old收集器" class="headerlink" title="4、Serial Old收集器"></a>4、Serial Old收集器</h3><p><strong>Serial</strong>收集器的<strong>老年代版本</strong>，它同样是一个<strong>单线程</strong>收集器。它主要有两大用途：一种用途是在<strong>JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用</strong>，另一种用途是作<strong>为CMS收集器的后备方案</strong>。  </p><h3 id="5、Parallel-Old收集器"><a href="#5、Parallel-Old收集器" class="headerlink" title="5、Parallel Old收集器"></a>5、Parallel Old收集器</h3><p> <strong>Parallel Scavenge</strong>收集器的<strong>老年代</strong>版本。使用多线程和“标记-整理”算法。在注重吞吐量以及CPU资源的场合，都可以优先考虑 Parallel Scavenge收集器和Parallel Old收集器。</p><h3 id="6、CMS收集器"><a href="#6、CMS收集器" class="headerlink" title="6、CMS收集器"></a>6、CMS收集器</h3><p>CMS（Concurrent Mark Sweep）收集器是一种以<strong>获取最短回收停顿时间为目标的收集器</strong>。它而非常符合在注重用户体验的应用上使用，它是HotSpot虚拟机第一款真正意义上的并发收集器，它第一次实现了让<strong>垃圾收集线程与用户线程（基本上）同时工作。</strong></p><p>从名字中的<strong>Mark Sweep</strong>这两个词可以看出，CMS收集器是一种 <strong>“标记-清除”算法</strong>实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：</p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程(<strong>STW</strong>)，并记录下<strong>直接与root相连的对象，速度很快</strong> ；</li><li><strong>并发标记：</strong> <strong>同时开启GC和用户线程</strong>，用一个<strong>闭包结构</strong>去<strong>记录可达对象</strong>。但在这个阶段结束，这个闭包结构<strong>并不能保证包含当前所有的可达对象</strong>。因为<strong>用户线程</strong>可能会<strong>不断的更新引用域</strong>，所以GC线程无法保证可达性分析的<strong>实时性</strong>。所以这个算法里会<strong>跟踪记录这些发生引用更新的地方</strong>。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了<strong>修正</strong>并发标记期间因为用户程序继续运行而导致<strong>标记产生变动的那一部分对象的标记记录</strong>，这个阶段的停顿时间一般<strong>会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</strong></li><li><strong>并发清除：</strong> 开启用户线程，同时<strong>GC线程开始对未标记的区域做清扫</strong>。</li></ul><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584521588277.png" alt="1584521588277"></p><p>从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点：<strong>并发收集、低停顿</strong>。但是它有下面三个明显的缺点：</p><ul><li>对<strong>CPU资源敏感</strong>（会和服务抢资源）；</li><li><strong>无法处理浮动垃圾(</strong>在java业务程序线程与垃圾收集线程并发执行过程中又产生的垃圾，这种浮动垃圾只能等到下一次gc再清理了)；</li><li>它使用的回收算法<strong>-“标记-清除”</strong>算法会导致收集结束时会有大量空间碎片产生<strong>。</strong></li></ul><h3 id="7、G1收集器-XX-UseG1GC"><a href="#7、G1收集器-XX-UseG1GC" class="headerlink" title="7、G1收集器(-XX:+UseG1GC)"></a>7、G1收集器(-XX:+UseG1GC)</h3><p><strong>G1</strong> (Garbage-First)是一款<strong>面向服务器的垃圾收集器</strong>,主要针对配备<strong>多颗处理器及大容量内存的机器</strong>. 以极<strong>高概率满足GC停顿时间要求的同时,还具备高吞吐量性能特征</strong>.</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image002.gif" alt="截图.png"></p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image004.gif" alt="截图.png"></p><p>G1将<strong>Java堆划分为多个大小相等的独立区域</strong>（<strong>Region</strong>），虽保留新生代和老年代的<strong>概念</strong>，但不再是<strong>物理隔阂</strong>了，它们都是（可以不连续）<strong>Region</strong>的集合。</p><p><strong>分配大对象</strong>（直接进<strong>Humongous区</strong>，专门<strong>存放短期巨型对象</strong>， <strong>当分配的对象大于等于Region大小的一半</strong>的时候就会被认为是巨型对象 ）不会因为无法找到连续空间而提前触发下一次GC。</p><p>G1收集器的运作大致分为以下几个步骤：</p><ul><li><strong>初始标记</strong>（initial mark，STW）：在此阶段，标记 GC Roots能直接关联到的对象。 需要停顿线程，但耗时很短 </li><li><strong>并发标记</strong>（Concurrent Marking）： GC Root开始对堆中对象进行<strong>可达性分析，找出存活的对象，</strong>这阶段耗时较长，但可与用户程序并发执行 </li><li><strong>最终标记</strong>（Remark，STW）： 修正在并发标记期间因<strong>用户程序继续运作而导致标记产生变动的那一部分标记记录</strong> </li><li><strong>筛选回收</strong>（Cleanup，STW）：筛选回收阶段首先对各个Region的回收价值和成本进行排序，<strong>根据用户所期望的GC停顿时间来制定回收计划</strong>.</li></ul><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image006.gif" alt="clipboard.png"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM--四种垃圾收集算法</title>
      <link href="/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E5%9B%9B%E7%A7%8D%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
      <url>/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E5%9B%9B%E7%A7%8D%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解JVM–四种垃圾收集算法"><a href="#深入理解JVM–四种垃圾收集算法" class="headerlink" title="深入理解JVM–四种垃圾收集算法"></a>深入理解JVM–四种垃圾收集算法</h1><h2 id="一、标记-清除算法"><a href="#一、标记-清除算法" class="headerlink" title="一、标记-清除算法"></a>一、标记-清除算法</h2><p>算法分为“标记”和“清除”阶段：首先<strong>标记所有存活</strong>的对象，在标记完成后<strong>统一回收所有未标记</strong>的对象。它是最基础的收集算法，效率也很高。</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584530746245.png" alt="1584530746245"></p><p>优点：执行效率高</p><p>缺点：1、标记清除后会产生大量不连续的碎片；2、分配速度慢，因为存在大量不连续碎片，每次分配都需要遍历空闲链表，找到足够大的内存空间存放对象</p><h2 id="二、复制算法"><a href="#二、复制算法" class="headerlink" title="二、复制算法"></a>二、复制算法</h2><p>为了解决标记-清除算法问题，“复制”收集算法出现了。它可以将<strong>内存分为大小相同的两块</strong>，<strong>每次使用其中的一块</strong>。当这一块的内存<strong>使用完后</strong>，就将<strong>还存活的对象有序复制到另一块</strong>去，然后再<strong>把使用的空间一次清理</strong>掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584530755486.png" alt="1584530755486"></p><p>优点：不存在大量不连续的内存碎片</p><p>缺点：使用效率低下，因为每次只使用其中一块内存空间</p><h2 id="三、标记-整理算法"><a href="#三、标记-整理算法" class="headerlink" title="三、标记-整理算法"></a>三、标记-整理算法</h2><p>根据老年代的特点特出的一种标记算法，<strong>标记</strong>过程仍然与<strong>“标记-清除”算法一样</strong>，清除的过程不同，让<strong>所有存活的对象向一端移动</strong>，然后<strong>直接清理掉端边界以外的内存</strong>。</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1584530762589.png" alt="1584530762589"></p><p>优点：不存在大量不连续的内存碎片</p><p>缺点： 整理会花一定的时间 </p><h2 id="四、分代收集算法"><a href="#四、分代收集算法" class="headerlink" title="四、分代收集算法"></a>四、分代收集算法</h2><p>当前<strong>虚拟机的垃圾收集都采用分代收集算法</strong>，这种算法没有什么新的思想，只是<strong>根据对象存活周期的不同将内存分为几块</strong>。一般将java堆分为新生代和老年代，这样我们就可以根据<strong>各个年代的特点选择合适的垃圾收集算法</strong>。</p><p>比如在<strong>新生代</strong>中，每次收集都会有<strong>大量对象死去</strong>，所以可以选择<strong>复制算法</strong>，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而<strong>老年代</strong>的对象存活几率是比较高的，而且没<strong>有额外的空间对它进行分配担保</strong>，所以我们必须选择<strong>“标记-清除”或“标记-整理”</strong>算法进行垃圾收集。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM--对象存活分析算法</title>
      <link href="/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E4%B8%A4%E7%A7%8D%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/"/>
      <url>/2019/10/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E4%B8%A4%E7%A7%8D%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解JVM–对象存活分析算法"><a href="#深入理解JVM–对象存活分析算法" class="headerlink" title="深入理解JVM–对象存活分析算法"></a>深入理解JVM–对象存活分析算法</h1><blockquote><p> 堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断那些对象已经死亡（即不能再被任何途径使用的对象）。</p></blockquote><h2 id="一、引用计数法"><a href="#一、引用计数法" class="headerlink" title="一、引用计数法"></a>一、引用计数法</h2><ul><li><p>概念：给对象中添加一个<strong>引用计数器</strong>，每当有一个地方<strong>引用</strong>它，计数器就<strong>加1</strong>；当<strong>引用失效</strong>，计数器就减1；任何时候计数器<strong>为0</strong>的对象就是<strong>不可能再被使用</strong>的。</p></li><li><p>分析：这个方法实现<strong>简单，效率高</strong>，但是目前<strong>主流的虚拟机</strong>中并<strong>没有选择这个算法</strong>来管理内存，其最主要的<strong>原因是</strong>它很难解决<strong>对象之间相互循环引用</strong>的问题。 所谓对象之间的相互引用问题，如下面代码所示：除了对象<strong>testA</strong> 和 <strong>testB</strong> <strong>相互引用</strong>着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的<strong>引用计数器都不为0</strong>，于是引用计数算法无法通知 GC 回收器回收他们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test testA = <span class="keyword">new</span> Test();</span><br><span class="line">        Test testA = <span class="keyword">new</span> Test();</span><br><span class="line">        testA.setObj(testB);</span><br><span class="line">        testB.setObj(testA);</span><br><span class="line">        testA = <span class="keyword">null</span>;</span><br><span class="line">        testB = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、可达性分析算法"><a href="#二、可达性分析算法" class="headerlink" title="二、可达性分析算法"></a>二、可达性分析算法</h2><ul><li>概念：这个算法的基本思想就是通过一系列的称为 <strong>“GC Roots”</strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的。</li><li><strong>GC Roots</strong>根节点：<strong>类加载器</strong>、<strong>Thread</strong>、虚拟机栈的本地变量表、<strong>static成员</strong>、<strong>常量引用</strong>、本地方法栈的变量等等</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210212191352321.png" alt="image-20210212191352321"></p><ul><li><strong>finalize()</strong>方法最终判定对象<strong>是否存活</strong><ul><li>即使在可达性分析算法中<strong>不可达的对象</strong>，也<strong>并非是一定会被回收</strong>的。要真正宣告一个对象死亡，至少要经历<strong>再次标记</strong>过程。</li><li>标记的前提是对象在进行可达性分析后发现没有与GC Roots相连接的引用链。</li><li>标记过程：<ul><li>第一次标记。筛选的条件是此对象是否<strong>有必要执行finalize()</strong>方法。当对象<strong>没有覆盖finalize方法</strong>，或者<strong>finalize方法已经被虚拟机调用过</strong>，虚拟机将这两种情况都视为“没有必要执行”，对象被回收。</li><li>第二次标记。如果这个对象被判定为有必要执行finalize()方法，那么这个对象将会被<strong>放置在一个名为：F-Queue的队列</strong>之中，并在稍后由一条<strong>虚拟机自动建立的、低优先级的Finalizer线程</strong>去执行。这里所谓的“执行”是指虚拟机会<strong>触发这个方法，但并不承诺会等待它运行结束</strong>。这样做的原因是，如果一个对象f<strong>inalize()方法中执行缓慢，或者发生死循环（更极端的情况）</strong>，将很可能会导致F-Queue<strong>队列中的其他对象永久处于等待状态，甚至导致整个内存回收系统崩溃</strong>。</li><li>finalize()–只要<strong>重新与引用链上的任何的一个对象建立关联</strong>即可，譬如把自己赋值给某个类变量或对象的成员变量，那在第二次标记时它将移除出“即将回收”的集合。如果对象这时候还没逃脱，那基本上它就真的被回收了。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM--类加载过程详解</title>
      <link href="/2019/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解JVM–类加载过程详解"><a href="#深入理解JVM–类加载过程详解" class="headerlink" title="深入理解JVM–类加载过程详解"></a>深入理解JVM–类加载过程详解</h1><blockquote><p>如果向学习和理解JVM的话，《深入理解JVM虚拟机》这本圣经必不可少的，我也是你们其中一份子，这本书看了一遍后有很多不懂，沮丧。。。也不敢装懂，不过该懂得还是懂一些，因此打算写几篇JVM得博客，巩固知识，也希望大伙能提点我的错误和不足</p><p>《深入理解JVM虚拟机》的分享链接：链接：<a href="https://pan.baidu.com/s/1fnTMWfC7Zi3HVJ5C78O80Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1fnTMWfC7Zi3HVJ5C78O80Q</a><br>提取码：hhmo</p></blockquote><h2 id="一、Java文件从编码完成到最终执行过程"><a href="#一、Java文件从编码完成到最终执行过程" class="headerlink" title="一、Java文件从编码完成到最终执行过程"></a>一、Java文件从编码完成到最终执行过程</h2><ul><li>编译：Java文件通过javac命令编译生成字节码，也就是.class文件</li><li>运行：.class文件交给JVM虚拟机进行<strong>类加载</strong>，到最后执行过程</li></ul><h2 id="二、类加载过程详解"><a href="#二、类加载过程详解" class="headerlink" title="二、类加载过程详解"></a>二、类加载过程详解</h2><h3 id="1、类加载的过程"><a href="#1、类加载的过程" class="headerlink" title="1、类加载的过程"></a>1、类加载的过程</h3><ul><li><p>过程： JVM虚拟机把.class文件中类信息加载进内存，并进行解析生成对应的class对象的过程。</p></li><li><p>注意点：JVM<strong>不是一开始把所有的类</strong>加载进内存，而是需要的时候<strong>有且仅有一次</strong>加载</p></li></ul><h3 id="2、类加载五个阶段："><a href="#2、类加载五个阶段：" class="headerlink" title="2、类加载五个阶段："></a>2、类加载五个阶段：</h3><blockquote><p>类加载的顺序除了<strong>解析</strong>之外是<strong>固定</strong>的(  可以在<strong>初始化阶段之后</strong>再开始，这是为了支持Java语言的<strong>运行时绑定</strong>。例如<strong>多态</strong> )，但是<strong>不是连续</strong>(  因为这些阶段通常都是<strong>互相交叉的混合进行</strong>，通常会在一个阶段执行的过程中调用或者激活另一个阶段 )</p></blockquote><h4 id="2-1-加载："><a href="#2-1-加载：" class="headerlink" title="2.1 加载："></a>2.1 加载：</h4><ul><li>加载：将<strong>class文件</strong>通过<strong>类加载器</strong>存到内存中<ul><li>过程:<ol><li>通过一个<strong>类的全限定名来获取</strong>定义此类的二进制字节流。</li><li>将这个字节流所代表的<strong>静态存储结构</strong>转化为<strong>方法区的运行时数据结构</strong>。</li><li>在<strong>元空间</strong>中生成一个代表这个类的java.lang.<strong>Class对象</strong>，作为方法区这些数据的访问<strong>入口</strong>。（字段，方法名，常量池…）</li></ol></li><li>注意点：类的全限定名获取的<strong>来源</strong>没有确定，可以很多途径《深入理解Java虚拟机》书中有提，不会坑你们，嘻嘻</li><li>.class文件来源：<ol><li>本地磁盘</li><li>网络下载</li><li>下载的war，jar包</li><li>从专门的数据库中读取. class文件(少见)</li><li>将java源文件动态编译成 class文件1) 典型的就是动态代理,通过运行期生成 class文件 2) jsp转换成的servlet,而serlvet是一个java文件，会被编译成 class文件</li></ol></li><li>类加载器：( 这个在第二篇就会详细讲解 )<ul><li><strong>启动类加载器</strong>：负责加载JRE的核心类库，如jre目标下的rt.jar,charsets.jar等</li><li><strong>扩展类加载器</strong>：负责加载JRE扩展目录ext中JAR类包</li><li><strong>系统类加载器</strong>：负责加载ClassPath路径下的类包</li><li><strong>用户自定义加载器</strong>：负责加载用户自定义路径下的类包</li></ul></li></ul></li></ul><h4 id="2-2-链接：包含验证、准备、解析三个过程"><a href="#2-2-链接：包含验证、准备、解析三个过程" class="headerlink" title="2.2 链接：包含验证、准备、解析三个过程"></a>2.2 链接：包含验证、准备、解析三个过程</h4><h5 id="2-21-验证"><a href="#2-21-验证" class="headerlink" title="2.21 验证"></a>2.21 验证</h5><ul><li><p>验证： 为了保证加载进来的字节流<strong>符合虚拟机规范</strong>，不会造成安全错误。 </p></li><li><p>四种检验：</p><ol><li>文件格式的验证<ul><li>常量中是否有不被支持的常量？</li><li>指向常量的索引值是否指向不存在或不符合类型的常量等。</li><li>目的：保证输入的<strong>字节流</strong>能正确地<strong>解析并存储于方法区</strong>之内,格式上符合描述一个Java类型信息的要求。</li></ul></li><li>元数据的验证<ul><li>该类是否继承了被final修饰的类？</li><li>类中的字段，方法是否与父类冲突？是否出现了不合理的重载等？</li><li>目的：类的元数据信息进行语义校验,保证<strong>不存在不符合</strong>Java语言规范的<strong>元数据信息。</strong></li></ul></li><li>字节码的验证<ul><li>方法体的类型转换是否有效？例如：<strong>子类</strong>对象可以赋值于<strong>父类数据类型</strong>，反之发报错。</li><li><strong>任意时刻</strong>操作数栈的指令类型与指令代码序列是否配合工作。例如：操作数栈放置<strong>int类型</strong>，使用确实<strong>long类型</strong>载入本地变量表。</li><li>目的：通过数据流和控制流分析,确定程序语义是<strong>合法的、符合逻辑</strong>的。是对<strong>类的方法体的校验</strong></li></ul></li><li>符号引用的验证<ul><li>校验符号引用中通过全限定名是否能够找到对应的类？</li><li>校验符号引用中的访问性（private，public等）是否可被当前类访问？</li><li>目的：确保解析动作能正常执行</li></ul></li></ol></li></ul><h5 id="2-22-准备"><a href="#2-22-准备" class="headerlink" title="2.22 准备"></a>2.22 准备</h5><ul><li><p>准备：为类的<strong>静态变量</strong>分配内存并将其<strong>初始化为默认值</strong>，这些内存都将在<strong>方法区</strong>中进行分配。</p></li><li><p>注意点：</p><ol><li>类变量(被 <strong>static</strong>修饰的变量)，而<strong>不包括实例变量</strong>，实例变量将在对象实例化时随着对象一起分配在Java堆中。</li><li>这里所说的初始值“通常情况”下是数据类型的零值，引用类型是null。特殊情况：被final修饰的变量，会直接赋值<strong>给定值</strong></li></ol></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>   <span class="comment">// 准备阶段是：value=0，而不是123</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>   <span class="comment">// 准备阶段是：value=123</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-23-解析"><a href="#2-23-解析" class="headerlink" title="2.23 解析"></a>2.23 解析</h5><ul><li><p>解析：虚拟机将常量池内的符号引用替换为直接引用的过程</p></li><li><p>符号引用(Symlxiuc References)：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量, 只要使用时能无歧义地定位到目标即可。符号引用是与虚拟机实现的内存布局<strong>无关</strong>的</p></li><li><p>直接引用(Direct References)：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局<strong>相关</strong>的</p></li></ul><h4 id="2-3-初始化"><a href="#2-3-初始化" class="headerlink" title="2.3 初始化"></a>2.3 初始化</h4><ul><li><p>初始化： 为类的静态变量赋予<strong>真正</strong>的初始值 </p></li><li><p>与准备阶段的差别：</p><ul><li>准备阶段，变量已经赋过一次系统要求的<strong>初始值( 默认值 )</strong></li><li>初始化阶段，根据程序员通过程序制定的<strong>主观</strong>计划去<strong>初始化类变量和其他资源</strong></li></ul></li><li><p><code>&lt;clinit&gt;</code>方法描述：是由编译器自动收集类中的<strong>所有类变量的赋值动作</strong>和<strong>静态语句块( static块)</strong>中的语句合并产生的,编译器收集的顺序是由语句在<strong>源文件中出现的顺序</strong>所决定的</p></li><li><p>初始化分为<strong>主动引用</strong>和<strong>被动引用</strong></p><ul><li>主动引用：主动触发类的初始化<ul><li>对于初始化阶段虚拟机规范是严格规定了如下几种情况，如果类未初始化会对类进行初始化。 <ol><li>创建<strong>类的实例</strong></li><li>访问类的<strong>静态变量</strong>( 不被<strong>final</strong>修饰的变量 )</li><li>访问类的<strong>静态方法</strong></li><li><strong>反射</strong></li><li>当初始化一个类时，发现其<strong>父类还未初始化</strong>，则先出发父类的初始化</li><li>虚拟机启动时，定义了<strong>main()</strong>方法的那个类先初始化</li></ol></li></ul></li><li>被动引用：不触发类的初始化<ul><li>子类调用<strong>父类的静态变量</strong>，子类不会被初始化。只有<strong>父类被初始化</strong></li><li>通过<strong>数组</strong>定义来引用类，不会触发类的初始化</li><li>访问<strong>类的常量</strong>，不会初始化类( 注意跟主动引用2情况区分 )</li></ul></li></ul></li><li><p>测试用例( 要用<code>System.out.println(&quot;***********主动引用X*********************&quot;);</code>分隔每个用例，要一个一个测试，不要全部，不然会造成误解。因为类<strong>有且仅有一次</strong>初始化，全部运行，运行结果又造成误解 )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.deschen.jvm.gc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MainClass init 1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MainClass init 2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用7*********************");   //主动引用7，直接运行，就可以了，结果如下图，其他大家可以自己测试</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用1*********************");</span></span><br><span class="line"><span class="comment">//        new SuperClass();</span></span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用2*********************");</span></span><br><span class="line"><span class="comment">//        System.out.println(SuperClass.value);</span></span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用3*********************");</span></span><br><span class="line"><span class="comment">//        SuperClass.method();</span></span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用4*********************");</span></span><br><span class="line"><span class="comment">//        Class.forName("cn.deschen.jvm.gc.ExtendClass");</span></span><br><span class="line"><span class="comment">//        System.out.println("***********主动引用5*********************");</span></span><br><span class="line"><span class="comment">//        System.out.println(ExtendClass.value);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("***********被动引用1*********************");</span></span><br><span class="line"><span class="comment">//        System.out.println(SuperClass.value);// 被动引用1</span></span><br><span class="line"><span class="comment">//        System.out.println("***********被动引用2*********************");</span></span><br><span class="line"><span class="comment">//        SuperClass[] superClasses = new SuperClass[10];// 被动引用2</span></span><br><span class="line"><span class="comment">//        System.out.println("***********被动引用3*********************");</span></span><br><span class="line"><span class="comment">//        System.out.println(SuperClass.VALUE);// 被动引用3</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"SuperClass init 1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> VALUE = <span class="number">456</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SuperClass init 2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ExtendClass static Method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"ExtendClass init 1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtendClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ExtendClass init 2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><p> <img src="https://img-blog.csdnimg.cn/20200205143024192.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-qmlTk2Zj-1580884042274)(C:\Users\20423\AppData\Roaming\Typora\typora-user-images\1580884002599.png)]"> </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Redis--集群部署</title>
      <link href="/2019/08/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/08/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解Redis–集群部署"><a href="#深入理解Redis–集群部署" class="headerlink" title="深入理解Redis–集群部署"></a>深入理解Redis–集群部署</h1><h2 id="一、启动集群"><a href="#一、启动集群" class="headerlink" title="一、启动集群"></a>一、启动集群</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8001/</span>redis.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8002/</span>redis.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8003/</span>redis.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8004/</span>redis.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8005/</span>redis.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-5.0.2/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-cluster<span class="regexp">/8006/</span>redis.conf</span><br></pre></td></tr></table></figure><p># 客户端连接8001端口的redis实例</p><figure class="highlight plain"><figcaption><span>-a deschen -c -h 192.168.0.61 -p 8001````</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">\# 查看集群状态</span><br><span class="line"></span><br><span class="line">192.168.0.61:8001&gt; cluster nodes</span><br><span class="line"></span><br><span class="line">![clipboard.png](https:&#x2F;&#x2F;root-1258715043.cos.ap-guangzhou.myqcloud.com&#x2F;blog&#x2F;01&#x2F;clip_image002.gif)</span><br><span class="line"></span><br><span class="line">从上图可以看出，整个集群运行正常，三个master节点和三个slave节点，8001端口的实例节点存储0-5460这些hash槽，8002端口的实例节点存储5461-10922这些hash槽，8003端口的实例节点存储10923-16383这些hash槽，这三个master节点存储的所有hash槽组成redis集群的存储槽位，slave点是每个主节点的备份从节点，不显示存储槽位  </span><br><span class="line"></span><br><span class="line">## 二、集群操作</span><br><span class="line"></span><br><span class="line">我们在原始集群基础上再增加一主(8007)一从(8008)，增加节点后的集群参见下图，新增节点用虚线框表示</span><br><span class="line"></span><br><span class="line">![clipboard.png](https:&#x2F;&#x2F;root-1258715043.cos.ap-guangzhou.myqcloud.com&#x2F;blog&#x2F;01&#x2F;clip_image004.gif)</span><br><span class="line"></span><br><span class="line">### 1、增加redis实例</span><br><span class="line"></span><br><span class="line">在&#x2F;usr&#x2F;local&#x2F;redis-cluster下创建8007和8008文件夹，并拷贝8001文件夹下的redis.conf文件到8007和8008这两个文件夹下</span><br></pre></td></tr></table></figure><p>mkdir 8008</p><p>mkdir 8008</p><p>cd 8001</p><p>cp redis.conf /usr/local/redis-cluster/8007/</p><p>cp redis.conf /usr/local/redis-cluster/8008/</p><p>修改8007文件夹下的redis.conf配置文件</p><p>vim /usr/local/redis-cluster/8007/redis.conf</p><p>修改如下内容：</p><p>port:8007</p><p>dir /usr/local/redis-cluster/8007/</p><p>cluster-config-file nodes-8007.conf</p><p>修改8008文件夹下的redis.conf配置文件</p><p>vim /usr/local/redis-cluster/8008/redis.conf</p><p>修改内容如下：</p><p>port:8008</p><p>dir /usr/local/redis-cluster/8008/</p><p>cluster-config-file nodes8008.conf</p><p>启动8007和8008俩个服务并查看服务状态</p><p> /usr/local/redis-5.0.2/src/redis-server /usr/local/redis-cluster/8007/redis.conf</p><p> /usr/local/redis-5.0.2/src/redis-server /usr/local/redis-cluster/8008/redis.conf</p><p> ps -el | grep redis</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### <span class="number">2</span>、查看redis集群的命令帮助</span><br></pre></td></tr></table></figure><p>cd /usr/local/redis-5.0.2</p><p>src/redis-cli –cluster help</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">clipboard.png</span>](<span class="link">https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image006.gif</span>)</span><br></pre></td></tr></table></figure><p>1、create：创建一个集群环境host1:port1 … hostN:portN</p><p>2、call：可以执行redis命令</p><p>3、add-node：将一个节点添加到集群里，第一个参数为新节点的ip:port，第二个参数为集群中任意一个已经存在的节点的ip:port </p><p>4、del-node：移除一个节点</p><p>5、reshard：重新分片</p><p>6、check：检查集群状态</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">### 3、 配置8007为集群主节点</span></span><br><span class="line"></span><br><span class="line">使用<span class="code">```</span><span class="code">`add-node`</span><span class="code">```</span>命令新增一个主节点8007(master)，绿色为新增节点，红色为已知存在节点，看到日志最后有<span class="code">```</span><span class="code">`"[OK] New node added correctly"`</span><span class="code">```</span>提示代表新节点加入成功</span><br><span class="line"></span><br><span class="line"><span class="code">```</span><span class="code">`/usr/local/redis-5.0.2/src/redis-cli --cluster add-node 192.168.0.64:8007 192.168.0.61:8001`</span><span class="code">```</span> </span><br><span class="line"></span><br><span class="line">查看集群状态</span><br><span class="line"></span><br><span class="line">![<span class="string">clipboard.png</span>](<span class="link">https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image008.gif</span>)</span><br><span class="line"></span><br><span class="line">注意：当添加节点成功以后，新增的节点不会有任何数据，因为它还没有分配任何的slot(hash槽)，我们需要为新节点手工分配hash槽 </span><br><span class="line"></span><br><span class="line">使用redis-cli命令为8007分配hash槽，找到集群中的任意一个主节点(红色位置表示集群中的任意一个主节点)，对其进行重新分片工作。</span><br><span class="line"></span><br><span class="line"><span class="code">```</span>`/usr/local/redis-5.0.2/src/redis-cli --cluster reshard 192.168.0.61:8001</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">输出如下：</span><br><span class="line"></span><br><span class="line">How many slots <span class="keyword">do</span> you want <span class="keyword">to</span> move (<span class="keyword">from</span> 1 <span class="keyword">to</span> 16384)? 600</span><br><span class="line"></span><br><span class="line">(ps:需要多少个槽移动到新的节点上，自己设置，比如600个hash槽)</span><br><span class="line"></span><br><span class="line">What is the receiving node ID? eb57a5700ee6f9ff099b3ce0d03b1a50ff247c3c</span><br><span class="line"></span><br><span class="line">(ps:把这600个hash槽移动到哪个节点上去，需要指定节点id)</span><br><span class="line"></span><br><span class="line">Please enter all the source node IDs.</span><br><span class="line"></span><br><span class="line"><span class="built_in"> Type </span><span class="string">'all'</span> <span class="keyword">to</span> use all the nodes as source nodes <span class="keyword">for</span> the hash slots.</span><br><span class="line"></span><br><span class="line"><span class="built_in"> Type </span><span class="string">'done'</span> once you entered all the source nodes IDs.</span><br><span class="line"></span><br><span class="line">Source node 1:all</span><br><span class="line"></span><br><span class="line">(ps:输入all为从所有主节点(8001,8002,8003)中分别抽取相应的槽数指定到新节点中，抽取的总槽数为600个)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> proceed with the proposed reshard plan (<span class="literal">yes</span>/<span class="literal">no</span>)? <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">(ps:输入<span class="literal">yes</span>确认开始执行分片任务)</span><br></pre></td></tr></table></figure><p>查看下最新的集群状态</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image010.gif" alt="clipboard.png"></p><p>如上图所示，现在我们的8007已经有hash槽了，也就是说可以在8007上进行读写数据啦！到此为止我们的8007已经加入到集群中，并且是主节点(Master)</p><h3 id="4、配置8008为8007的从节点"><a href="#4、配置8008为8007的从节点" class="headerlink" title="4、配置8008为8007的从节点"></a>4、配置8008为8007的从节点</h3><p>添加从节点8008到集群中去并查看集群状态</p><figure class="highlight plain"><figcaption><span>--cluster add-node 192.168.0.64:8008 192.168.0.61:8001````</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![clipboard.png](https:&#x2F;&#x2F;root-1258715043.cos.ap-guangzhou.myqcloud.com&#x2F;blog&#x2F;01&#x2F;clip_image012.gif)</span><br><span class="line"></span><br><span class="line">如图所示，还是一个master节点，没有被分配任何的hash槽。</span><br><span class="line"></span><br><span class="line">我们需要执行replicate命令来指定当前节点(从节点)的主节点id为哪个,首先需要连接新加的8008节点的客户端，然后使用集群命令进行操作，把当前的8008(slave)节点指定到一个主节点下(这里使用之前创建的8007主节点，红色表示节点id)</span><br></pre></td></tr></table></figure><p>/usr/local/redis-5.0.2/src/redis-cli -c -h 192.168.0.64 -p 8008</p><p>192.168.0.61:8008&gt; cluster replicate eb57a5700ee6f9ff099b3ce0d03b1a50ff247c3c</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">\# 查看集群状态，<span class="number">8008</span>节点已成功添加为<span class="number">8007</span>节点的从节点</span><br><span class="line"></span><br><span class="line">![clipboard.png](https:<span class="comment">//root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image014.gif)</span></span><br><span class="line"></span><br><span class="line">### <span class="number">5</span>、删除<span class="number">8008</span>从节点</span><br><span class="line"></span><br><span class="line">用del-node删除从节点<span class="number">8008</span>，指定删除节点ip和端口，以及节点id(红色为<span class="number">8008</span>节点id)</span><br><span class="line"></span><br><span class="line">````/usr/local/redis<span class="number">-5.0</span><span class="number">.2</span>/src/redis-cli --cluster del-node <span class="number">192.168</span><span class="number">.0</span><span class="number">.64</span>:<span class="number">8008</span> <span class="number">1805</span>b6339d91b0e051f46845eebacb9bc43baefe</span><br></pre></td></tr></table></figure><p>再次查看集群状态，如下图所示，8008这个slave节点已经移除，并且该节点的redis服务也已被停止</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image016.gif" alt="clipboard.png"></p><h3 id="6、删除8007主节点"><a href="#6、删除8007主节点" class="headerlink" title="6、删除8007主节点"></a>6、删除8007主节点</h3><p>最后，我们尝试删除之前加入的主节点8007，这个步骤相对比较麻烦一些，因为主节点的里面是有分配了hash槽的，所以我们这里必须先把8007里的hash槽放入到其他的可用主节点中去，然后再进行移除节点操作，不然会出现数据丢失问题(目前只能把master的数据迁移到一个节点上，暂时做不了平均分配功能)，执行命令如下：</p><figure class="highlight plain"><figcaption><span>--cluster reshard 192.168.0.64:8007````</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输出如下：</span><br></pre></td></tr></table></figure><p>How many slots do you want to move (from 1 to 16384)? 600</p><p>What is the receiving node ID? deedad3c34e8437baa6ff013fd3d1461a0c2e761</p><p>(ps:这里是需要把数据移动到哪？8001的主节点id)</p><p>Please enter all the source node IDs.</p><p> Type ‘all’ to use all the nodes as source nodes for the hash slots.</p><p> Type ‘done’ once you entered all the source nodes IDs.</p><p>Source node 1:eb57a5700ee6f9ff099b3ce0d03b1a50ff247c3c</p><p>(ps:这里是需要数据源，也就是我们的8007节点id)</p><p>Source node 2:done</p><p>(ps:这里直接输入done 开始生成迁移计划)</p><p>Do you want to proceed with the proposed reshard plan (yes/no)? Yes</p><p>(ps:这里输入yes开始迁移)</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">至此，我们已经成功的把<span class="number">8007</span>主节点的数据迁移到<span class="number">8001</span>上去了，我们可以看一下现在的集群状态如下图，你会发现<span class="number">8007</span>下面已经没有任何hash槽了，证明迁移成功！</span><br><span class="line"></span><br><span class="line">![clipboard.png](https:<span class="comment">//root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image018.gif)</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">最后我们直接使用del-node命令删除<span class="number">8007</span>主节点即可（红色表示<span class="number">8007</span>的节点id）。</span><br><span class="line"></span><br><span class="line">````/usr/local/redis<span class="number">-5.0</span><span class="number">.2</span>/src/redis-cli --cluster del-node <span class="number">192.168</span><span class="number">.0</span><span class="number">.64</span>:<span class="number">8007</span>  eb57a5700ee6f9ff099b3ce0d03b1a50ff247c3c</span><br></pre></td></tr></table></figure><p># 查看集群状态，一切还原为最初始状态啦！大功告成！</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/01/clip_image020.gif" alt="clipboard.png"></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Redis--集群讲解</title>
      <link href="/2019/07/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-%E9%9B%86%E7%BE%A4%E8%AE%B2%E8%A7%A3/"/>
      <url>/2019/07/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-%E9%9B%86%E7%BE%A4%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis集群详解"><a href="#Redis集群详解" class="headerlink" title="Redis集群详解"></a>Redis集群详解</h1><h2 id="一、Redis有三种集群模式"><a href="#一、Redis有三种集群模式" class="headerlink" title="一、Redis有三种集群模式"></a>一、Redis有三种集群模式</h2><ul><li>主从模式</li><li>Sentinel模式( 哨兵模式 )</li><li>Cluster模式( 集群模式 )</li></ul><p>PS ：集群查看命令： <code>info replication</code> </p><h2 id="二、主从模式"><a href="#二、主从模式" class="headerlink" title="二、主从模式"></a>二、主从模式</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>主从模式是三种模式中最简单的，在主从复制中，数据库分为两类：主数据库(master)和从数据库(slave)。</p><h3 id="2、工作机制："><a href="#2、工作机制：" class="headerlink" title="2、工作机制："></a>2、工作机制：</h3><p>当slave启动后，主动向master发送SYNC命令。master接收到SYNC命令后在后台保存快照（RDB持久化）和缓存保存快照这段时间的命令，然后将保存的快照文件和缓存的命令发送给slave。slave接收到快照文件和命令后加载快照文件和缓存的执行命令。复制初始化后，master每次接收到的写命令都会同步发送给slave，保证主从数据一致性。</p><h3 id="3、优缺点"><a href="#3、优缺点" class="headerlink" title="3、优缺点"></a>3、优缺点</h3><ul><li>优点：<ul><li>1、高可靠性，主从实时备份，有效解决单节点数据丢失问题。</li><li>2、可做读写分离，从库分担读操作，缓解主库压力</li></ul></li><li>缺点：主库异常，需要手动主从切换</li></ul><h2 id="三、Sentinel模式"><a href="#三、Sentinel模式" class="headerlink" title="三、Sentinel模式"></a>三、Sentinel模式</h2><h3 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h3><p> 监控redis集群的运行状况 </p><h3 id="2、工作机制：-1"><a href="#2、工作机制：-1" class="headerlink" title="2、工作机制："></a>2、工作机制：</h3><ul><li><p>假设主节点宕机，第一个哨兵先检测到这个结果，第一个哨兵主标志为<strong>主观下线</strong>。</p></li><li><p>当后面的哨兵也检测到主节点为<strong>主观下线</strong>，并且数量达到一定值时，就会标志为<strong>客观下线</strong></p></li><li><p>在认为主节点<strong>客观下线</strong>的情况下,哨兵节点节点间会发起一次选举，如果超过半数以上的节点返回，则将该节点标记为leader的情况下，对<strong>故障的主节点</strong>所属的<strong>从节点中</strong>选取<strong>新的主节点</strong></p><p>当使用sentinel模式的时候，客户端就不要直接连接Redis，而是连接sentinel的ip和port，由sentinel来提供具体的可提供服务的Redis实现，这样当master节点挂掉以后，sentinel就会感知并将新的master节点提供给使用者。 </p></li></ul><h3 id="3、优缺点-1"><a href="#3、优缺点-1" class="headerlink" title="3、优缺点"></a>3、优缺点</h3><ul><li>优点：有效解决主从模式主库异常手动主从切换的问题</li><li>缺点：运维复杂，哨兵选举期间，不能对外提供服务</li></ul><h2 id="四、Cluster模式"><a href="#四、Cluster模式" class="headerlink" title="四、Cluster模式"></a>四、Cluster模式</h2><h3 id="1、介绍-2"><a href="#1、介绍-2" class="headerlink" title="1、介绍"></a>1、介绍</h3><p> redis集群是一个由多个主从节点群组成的分布式服务器群，它具有复制、高可用和分片特性。Redis集群不需要sentinel哨兵也能完成节点移除和故障转移的功能。  </p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1581473766762.png" alt="1581473766762"></p><h3 id="3、槽位"><a href="#3、槽位" class="headerlink" title="3、槽位"></a>3、槽位</h3><p>Redis Cluster 将所有数据划分为 <strong>16384</strong> 的 slots( 槽位 ）</p><p>当 Redis Cluster 的客户端来连接集群时，它也会得到一份集群的槽位配置信息并将其缓存在客户端本地。这样当客户端要查找某个 key 时，可以直接定位到目标节点。同时因为槽位的信息可能会存在客户端与服务器不一致的情况，还需要纠正机制来实现槽位信息的校验调整。</p><h3 id="4、槽位定位算法"><a href="#4、槽位定位算法" class="headerlink" title="4、槽位定位算法"></a>4、槽位定位算法</h3><p>Cluster 默认会对 key 值使用 crc16 算法进行 hash 得到一个整数值，然后用这个整数值对 16384 进行取模来得到具体槽位。</p><p>HASH_SLOT = CRC16(key) mod 16384</p><h3 id="5、跳转重定位"><a href="#5、跳转重定位" class="headerlink" title="5、跳转重定位"></a>5、跳转重定位</h3><p>当客户端向一个错误的节点发出了指令，该节点会发现指令的 key 所在的槽位并不归自己管理，这时它会向客户端发送一个特殊的跳转指令携带目标操作的节点地址，告诉客户端去连这个节点去获取数据。客户端收到指令后除了跳转到正确的节点上去操作，还会同步更新纠正本地的槽位映射表缓存，后续所有 key 将使用新的槽位映射表。</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1581474165999.png" alt="1581474165999"></p><h3 id="6、网络抖动"><a href="#6、网络抖动" class="headerlink" title="6、网络抖动"></a>6、网络抖动</h3><p>真实世界的机房网络往往并不是风平浪静的，它们经常会发生各种各样的小问题。比如网络抖动就是非常常见的一种现象，突然之间部分连接变得不可访问，然后很快又恢复正常。</p><p>为解决这种问题，Redis Cluster 提供了一种选项cluster-node-timeout，表示当某个节点持续 timeout 的时间失联时，才可以认定该节点出现故障，需要进行主从切换。如果没有这个选项，网络抖动会导致主从频繁切换 (数据的重新复制)。</p><h3 id="7、选举原理分析"><a href="#7、选举原理分析" class="headerlink" title="7、选举原理分析"></a>7、选举原理分析</h3><p>当slave发现自己的master变为FAIL状态时，便尝试进行Failover，以期成为新的master。由于挂掉的master可能会有多个slave，从而存在多个slave竞争成为master节点的过程， 其过程如下：</p><p>1.slave发现自己的master变为FAIL</p><p>2.将自己记录的集群cluster_current_epoch(选举周期)加1( 查看命令：<code>cluster info</code>)，并广播FAILOVER_AUTH_REQUEST 信息</p><p>3.其他节点收到该信息，只有master响应，判断请求者的合法性，并发送FAILOVER_AUTH_ACK，对每一个epoch只发送一次ack</p><p>4.尝试failover的slave收集FAILOVER_AUTH_ACK</p><p>5.超过半数后变成新Master</p><p>6.广播通知其他集群节点。</p><p>从节点并不是在主节点一进入 FAIL 状态就马上尝试发起选举，而是有一定延迟，一定的延迟确保我们等待FAIL状态在集群中传播，slave如果立即尝试选举，其它masters或许尚未意识到FAIL状态，可能会拒绝投票</p><p>延迟计算公式：</p><p> DELAY = 500ms + random(0 ~ 500ms) + SLAVE_RANK * 1000ms</p><p>•SLAVE_RANK表示此slave已经从master复制数据的总量的rank。Rank越小代表已复制的数据越新。这种方式下，持有最新数据的slave将会首先发起选举（理论上）。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分库分表理论篇——以MySQL为例</title>
      <link href="/2019/07/17/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%90%86%E8%AE%BA%E7%AF%87%E2%80%94%E2%80%94%E4%BB%A5MySQL%E4%B8%BA%E4%BE%8B/"/>
      <url>/2019/07/17/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%90%86%E8%AE%BA%E7%AF%87%E2%80%94%E2%80%94%E4%BB%A5MySQL%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="分库分表理论篇——-以MySQL为例"><a href="#分库分表理论篇——-以MySQL为例" class="headerlink" title="分库分表理论篇—— 以MySQL为例"></a>分库分表理论篇—— 以MySQL为例</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>当今互联网大爆炸的时代，<strong>业务</strong>越来越多和大，<strong>单库单表</strong>数据超出数据库支持<strong>容量</strong>，数据库<strong>I/O操作</strong>次数会越来越多和慢，数据库的整体<strong>性能</strong>就会急剧下降。</p><h2 id="二、如何优化"><a href="#二、如何优化" class="headerlink" title="二、如何优化"></a>二、如何优化</h2><p>这里我想到几种优化的方法</p><ul><li>减少数据库访问压力<ul><li>使用<strong>缓存</strong>技术，对数据库的信息进行缓存，减少数据库访问压力</li><li>使用<strong>Nginx</strong>进行静态资源的获取，对一些高访问的<strong>网页</strong>，一次访问时可以先生成<strong>静态页面</strong>存到<strong>本地</strong>中，用户再次访问就会直接返回，这样减少与数据库的交互和渲染页面的操作，提高效率</li><li>读写分离<ul><li>互联网业务一般<strong>读多写少</strong>，<strong>读写</strong>比例基本是<strong>10:1</strong>。比如订单业务，顾客购买商品生成<strong>一次</strong>订单后，就会<strong>多次</strong>查看订单情况。这时可以采用<strong>主从架构</strong>，<strong>主库</strong>负责<strong>DML</strong>(增删改)操作，<strong>从库</strong>负责<strong>DQL</strong>(查看操作)，<strong>一</strong>个主库可以有<strong>多</strong>个从库，极大减轻读写压力</li></ul></li></ul></li><li>提升数据库性能<ul><li>可以从机器性能入手，内存不够加内存条，外存( 如硬盘 )不够加外存，这样即使数据量在大，也不会影响I/O读写速率，<strong>但是</strong>，数据量大会增加<strong>I/O的次数</strong>，数据库性能依旧会下降，不推荐，成本太高，没钱花，/(ㄒoㄒ)/~~</li><li>优化数据库<strong>索引</strong>，数据库<strong>语句</strong>，这个我将会写篇博客，具体介绍</li><li>分库分表<ul><li>分库分表要<strong>按业务进行拆分</strong>，具体后面会说。主要是打破<strong>单库单表</strong>的情况，数据存在<strong>多库多表</strong>中。打个比方，100W条数据存在10个库中，10个库有10张相同的表，那么一张表存的数据就会1W条左右，这样减低数据库的容量，提升I/O操作速率，提高数据库的性能</li></ul></li></ul></li></ul><h2 id="三、什么是分库分表"><a href="#三、什么是分库分表" class="headerlink" title="三、什么是分库分表"></a>三、什么是分库分表</h2><blockquote><p> 分库分表，顾名思义就是拆分数据库和拆分数据表。问题就来了，要怎么拆分数据库和数据表呢？</p></blockquote><p>这里用一张电商的数据库的ER图拆分<br><img src="https://img-blog.csdnimg.cn/20200119164837128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>垂直拆分( 以电商ER图拆分 )</p><ul><li><p>垂直拆库：按照业务拆分，<strong>业务耦合性低的数据表</strong>拆分到<strong>不同数据库</strong>中。比如电商数据库拆分成用户库、商品库、订单库…<strong>但是</strong>，不是什么表都可以分库的，例如：订单库有<strong>订单表和订单明细表</strong>，这两张表<strong>耦合性高</strong>，必须放在一起</p></li><li><p>垂直拆表：按照数据表的<strong>字段热点</strong>(就是使用<strong>频率高</strong>)和字段<strong>存储类型</strong>进行拆分。比如电商中商品不是有<strong>文字描述</strong>吗？可是我们一般看商品的<strong>标题，价格，图片</strong>，对于<strong>文字描述</strong>字段一般点进去才看(查看<strong>频率不如前者高</strong>)，那么我们可以把商品表除文字描述这些大字段拆分出另一张表使用，提高查询性能</p><p>PS：拆分大字段还有另一个原因，因为大字段读取时间长，数据量大的话，影响I/O的读取效率<br><img src="https://img-blog.csdnimg.cn/20200119164926806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>特点：</p><ul><li>每个库（表）的结构都不一样</li><li>每个库（表）的数据都（至少有一列）一样  </li><li>每个库（表）的并集是全量数据</li></ul></li></ul></li><li><p>水平拆分( 以电商ER图拆分)</p><ul><li><p>水平拆库：把<strong>单个数据库</strong>的数据拆分成<strong>多个相同结构数据库</strong>存储</p></li><li><p>水平拆表：把<strong>单表</strong>的数据量拆分成<strong>多个相同结构表</strong>存储</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200119164947411.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ennDrFQt-1579422434154)(C:\Users\20423\AppData\Roaming\Typora\typora-user-images\1579421448(1)\].jpg)"></p><ul><li><p>以上两者合并达到分库分表<br><img src="https://img-blog.csdnimg.cn/20200119165023617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>特点：</p><ul><li>每个库（表）的结构都不一样</li><li>每个库（表）的数据都（至少有一列）一样  </li><li>每个库（表）的并集是全量数据</li></ul></li></ul></li></ul><h2 id="三、优势和弊端"><a href="#三、优势和弊端" class="headerlink" title="三、优势和弊端"></a>三、优势和弊端</h2><ul><li>优点：<ul><li>减少数据库的访问压力和单个存储容量</li></ul></li><li>弊端：<ul><li>增加了我们维护成本，毕竟多个数据库和数据表维护</li><li>分布式事务（跨库事务），比如：处理一个业务需要执行多条插入语句，每条在不同机器的不同数据库中，出现问题，如何回滚</li><li>跨库join，因为在不同数据库中，就无法使用join命令获取信息</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分库分表理论篇——以MySQL为例</title>
      <link href="/2019/07/17/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E2%80%94%E2%80%94%E4%BB%A5MySQL%E4%B8%BA%E4%BE%8B/"/>
      <url>/2019/07/17/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E2%80%94%E2%80%94%E4%BB%A5MySQL%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="分库分表——-以MySQL为例"><a href="#分库分表——-以MySQL为例" class="headerlink" title="分库分表—— 以MySQL为例"></a>分库分表—— 以MySQL为例</h1><h2 id="一、为什么要分库分表？"><a href="#一、为什么要分库分表？" class="headerlink" title="一、为什么要分库分表？"></a>一、为什么要分库分表？</h2><p><code>单库单表</code>虽然容易对数据进行操作，但是其容量是<code>有限</code>的。对于日益扩充的数据来说，会造成<code>数据查询速度慢</code>以及<code>加大服务器的压力</code>。据了解，医疗行业的业务数据很多都是<code>不能删除</code>的，数据久而久之堆积会影响应用程序的执行效率，就会影响用户的体验等。因此我觉得有必要了解下分库分表。</p><h2 id="二、如何优化"><a href="#二、如何优化" class="headerlink" title="二、如何优化"></a>二、如何优化</h2><p>这里我想到几种优化的方法</p><ul><li>减少数据库访问压力<ul><li>使用<strong>缓存</strong>技术，对数据库的信息进行缓存，减少数据库访问压力</li><li>使用<strong>Nginx</strong>进行静态资源的获取，对一些高访问的<strong>网页</strong>，一次访问时可以先生成<strong>静态页面</strong>存到<strong>本地</strong>中，用户再次访问就会直接返回，这样减少与数据库的交互和渲染页面的操作，提高效率</li><li>读写分离<ul><li>互联网业务一般<strong>读多写少</strong>，<strong>读写</strong>比例基本是<strong>10:1</strong>。比如订单业务，顾客购买商品生成<strong>一次</strong>订单后，就会<strong>多次</strong>查看订单情况。这时可以采用<strong>主从架构</strong>，<strong>主库</strong>负责<strong>DML</strong>(增删改)操作，<strong>从库</strong>负责<strong>DQL</strong>(查看操作)，<strong>一</strong>个主库可以有<strong>多</strong>个从库，极大减轻读写压力</li></ul></li></ul></li><li>提升数据库性能<ul><li>可以从机器性能入手，内存不够加内存条，外存( 如硬盘 )不够加外存，这样即使数据量在大，也不会影响I/O读写速率，<strong>但是</strong>，数据量大会增加<strong>I/O的次数</strong>，数据库性能依旧会下降，不推荐，成本太高，没钱花，/(ㄒoㄒ)/~~</li><li>优化数据库<strong>索引</strong>，数据库<strong>语句</strong>，这个我将会写篇博客，具体介绍</li><li>分库分表<ul><li>分库分表要<strong>按业务进行拆分</strong>，具体后面会说。主要是打破<strong>单库单表</strong>的情况，数据存在<strong>多库多表</strong>中。打个比方，100W条数据存在10个库中，10个库有10张相同的表，那么一张表存的数据就会1W条左右，这样减低数据库的容量，提升I/O操作速率，提高数据库的性能</li></ul></li></ul></li></ul><h2 id="三、什么是分库分表"><a href="#三、什么是分库分表" class="headerlink" title="三、什么是分库分表"></a>三、什么是分库分表</h2><blockquote><p> 分库分表，顾名思义就是拆分数据库和拆分数据表。问题就来了，要怎么拆分数据库和数据表呢？</p></blockquote><p>这里用一张电商的数据库的ER图拆分<br><img src="https://img-blog.csdnimg.cn/20200119164837128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>垂直拆分( 以电商ER图拆分 )</p><ul><li><p>垂直拆库：按照业务拆分，<strong>业务耦合性低的数据表</strong>拆分到<strong>不同数据库</strong>中。比如电商数据库拆分成用户库、商品库、订单库…<strong>但是</strong>，不是什么表都可以分库的，例如：订单库有<strong>订单表和订单明细表</strong>，这两张表<strong>耦合性高</strong>，必须放在一起</p></li><li><p>垂直拆表：按照数据表的<strong>字段热点</strong>(就是使用<strong>频率高</strong>)和字段<strong>存储类型</strong>进行拆分。比如电商中商品不是有<strong>文字描述</strong>吗？可是我们一般看商品的<strong>标题，价格，图片</strong>，对于<strong>文字描述</strong>字段一般点进去才看(查看<strong>频率不如前者高</strong>)，那么我们可以把商品表除文字描述这些大字段拆分出另一张表使用，提高查询性能</p><p>PS：拆分大字段还有另一个原因，因为大字段读取时间长，数据量大的话，影响I/O的读取效率<br><img src="https://img-blog.csdnimg.cn/20200119164926806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>特点：</p><ul><li>每个库（表）的结构都不一样</li><li>每个库（表）的数据都（至少有一列）一样  </li><li>每个库（表）的并集是全量数据</li></ul></li></ul></li><li><p>水平拆分( 以电商ER图拆分)</p><ul><li><p>水平拆库：把<strong>单个数据库</strong>的数据拆分成<strong>多个相同结构数据库</strong>存储</p></li><li><p>水平拆表：把<strong>单表</strong>的数据量拆分成<strong>多个相同结构表</strong>存储</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200119164947411.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="img"></p><ul><li><p>以上两者合并达到分库分表<br><img src="https://img-blog.csdnimg.cn/20200119165023617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>特点：</p><ul><li>每个库（表）的结构都不一样</li><li>每个库（表）的数据都（至少有一列）一样  </li><li>每个库（表）的并集是全量数据</li></ul></li></ul></li></ul><h2 id="四、优势和弊端"><a href="#四、优势和弊端" class="headerlink" title="四、优势和弊端"></a>四、优势和弊端</h2><ul><li>优点：<ul><li>减少数据库的访问压力和单个存储容量</li></ul></li><li>弊端：<ul><li>增加了我们维护成本，毕竟多个数据库和数据表维护</li><li>分布式事务（跨库事务），比如：处理一个业务需要执行多条插入语句，每条在不同机器的不同数据库中，出现问题，如何回滚</li><li>跨库join，因为在不同数据库中，就无法使用join命令获取信息</li></ul></li></ul><h2 id="五、推荐中间件Sharding-JDBC（点击跳到官方文档）"><a href="#五、推荐中间件Sharding-JDBC（点击跳到官方文档）" class="headerlink" title="五、推荐中间件Sharding-JDBC（点击跳到官方文档）"></a>五、推荐中间件<a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/overview/" target="_blank" rel="noopener">Sharding-JDBC（点击跳到官方文档）</a></h2><blockquote><p>Sharding-JDBC是在应用层进行对sql语句进行封装的中间件，它通过数据分片、路由等策略将数据存到不同库表中</p></blockquote><ol><li>数据分片<ul><li>含义：将单一数据库中的数据分散地存放至多个数据库或表中</li><li>分片方式：垂直分片、水平分片（分别对应三标题的业务拆分）</li><li>主键：雪花算法、UUID，也可以自己创建主键规则（<code>实现ShardingKeyGenerator</code>）</li><li>数据分片规则：SQL解析 =&gt; 执行器优化 =&gt; SQL路由 =&gt; SQL改写 =&gt; SQL执行 =&gt; 结果归并</li><li>SQL注意事项<ul><li>逻辑表：就是水平分表的数据表的总称（该表实际不存在）。在代码操作的SQL语句的表都是逻辑表(<code>t_order</code>)，但经过Sharding-JDBC就会执行到具体数据库的具体表（<code>t_order0 ~ t_order9</code>)</li><li>真实表：就是<code>t_order0 ~ t_order9</code></li><li>数据节点：数据源名称和数据表组成，如<code>ds_0.t_order0</code></li><li>绑定表：就是将分片规则一致的主表和子表绑定。避免关联查询不会出现<strong>笛卡尔积关联</strong><ul><li>订单表<code>t_order0~t_order1</code>和订单详情<code>t_orderdetail0~t_orderdetail1</code>以<code>order_id%2</code>分片，那么<code>order_id为双数在t_order0和t_orderdetail0</code>，<code>order_id为单数在t_order1和t_orderdetail1</code>，可见数据绝对不会插入<code>t_order0和t_orderdetail1</code>或<code>t_order1和t_orderdetail0</code>这种情况。然而如果不绑定的话，查询就会出现<code>2*2现象</code>，出现不必要的查询，降低查询效率</li></ul></li></ul></li></ul></li></ol><p><img src="https://shardingsphere.apache.org/document/legacy/4.x/document/img/sharding/sharding_architecture_cn.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li><p>读写分离</p><ul><li>含义：同一线程且同一数据库连接内，如有写入操作，以后的读操作均从主库读取，用于保证数据一致性</li><li>操作：数据库要配置主从模式，因为Sharding-JDBC不支持数据同步</li></ul></li><li><p>事务处理</p><ul><li>本地事务</li><li>两阶段事务-XA</li><li>SAGA柔性事务</li><li>Seata柔性事务</li></ul></li><li><p>其他请看官方文档</p></li></ol><h2 id="六、实战"><a href="#六、实战" class="headerlink" title="六、实战"></a>六、实战</h2><ul><li><p><a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/manual/sharding-jdbc/configuration/" target="_blank" rel="noopener">Sharding-JDBC配置</a>——这里使用springboot配置</p><ul><li>依赖</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.0.0-RC2&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;sharding-core-common&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.0.0-RC2&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">shardingsphere:</span></span><br><span class="line">        <span class="attr">datasource:</span></span><br><span class="line">            <span class="attr">ss_ds1:</span>  <span class="comment">## 分库表名</span></span><br><span class="line">                <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">Root@123</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line">                <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ss_ds1</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">            <span class="attr">ss_ds2:</span>  <span class="comment">## 分库表名</span></span><br><span class="line">                <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">Root@123</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">org.apache.commons.dbcp.BasicDataSource</span></span><br><span class="line">                <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ss_ds2</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">sharding:</span>  </span><br><span class="line">            <span class="attr">binding-tables:</span> <span class="string">t_order,t_orderdetail</span>   <span class="comment">## 绑定表</span></span><br><span class="line">            <span class="attr">default-database-strategy:</span>  </span><br><span class="line">                <span class="attr">inline:</span></span><br><span class="line">                    <span class="attr">algorithm-expression:</span> <span class="string">ss_ds$-&gt;&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">                    <span class="attr">sharding-column:</span> <span class="string">user_id</span></span><br><span class="line">            <span class="attr">tables:</span></span><br><span class="line">                <span class="attr">t_order:</span></span><br><span class="line">                    <span class="attr">actual-data-nodes:</span> <span class="string">ss_ds$-&gt;&#123;0..1&#125;.t_order$-&gt;&#123;0..1&#125;</span></span><br><span class="line">                    <span class="attr">table-strategy:</span></span><br><span class="line">                        <span class="attr">inline:</span></span><br><span class="line">                            <span class="attr">algorithm-expression:</span> <span class="string">t_order$-&gt;&#123;order_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span>    <span class="comment">## 分片算法</span></span><br><span class="line">                            <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">                <span class="attr">t_order_item:</span></span><br><span class="line">                    <span class="attr">actual-data-nodes:</span> <span class="string">ss_ds$-&gt;&#123;0..1&#125;.t_orderdetail$-&gt;&#123;0..1&#125;</span></span><br><span class="line">                    <span class="attr">table-strategy:</span></span><br><span class="line">                        <span class="attr">inline:</span></span><br><span class="line">                            <span class="attr">algorithm-expression:</span> <span class="string">t_orderdetail$-&gt;&#123;order_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">                            <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br></pre></td></tr></table></figure><ul><li>自定义主键（目前知道的是Mybatis支持，但JPA不支持）</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、实现接口ShardingKeyGenerator</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomKeyGenerator</span> <span class="keyword">implements</span> <span class="title">ShardingKeyGenerator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Comparable&lt;?&gt; generateKey() &#123;</span><br><span class="line">       <span class="comment">// 主键生成处理</span></span><br><span class="line">        <span class="keyword">return</span> id;                   <span class="comment">// 主键生成</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CustomKeyGenerator"</span>;             <span class="comment">//用于配置文件使用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2、在resources目录下新建META-INF文件夹，再新建services文件夹，文件名为CustomKeyGenerator全路径</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">// 3、配置文件    </span></span><br><span class="line">spring.shardingsphere.sharding.tables.&#123;表名&#125;.key-generator.column=id          ## generateKey()返回值   </span><br><span class="line">spring.shardingsphere.sharding.tables.&#123;表名&#125;.key-generator.type=CustomKeyGenerator   ## getType()返回值</span><br></pre></td></tr></table></figure><ul><li>业务逻辑处理（跟传统<code>JPA</code>一样，这里不做多说明）</li></ul><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>Sharding-JDBC是一款不错的分库分表中间件，虽然我对此理解学习不够全面，如果有不足的地方希望大家赐教，相互学习，后期我会继续更新文章内容。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引深入理解</title>
      <link href="/2019/07/13/MySQL%E7%B4%A2%E5%BC%95%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
      <url>/2019/07/13/MySQL%E7%B4%A2%E5%BC%95%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h1><p>[toc]</p><h2 id="一、什么是索引？"><a href="#一、什么是索引？" class="headerlink" title="一、什么是索引？"></a>一、什么是索引？</h2><p>索引是帮助MySQL高效获取数据的<strong>排好序</strong>的<strong>数据结构</strong></p><h2 id="二、底层知识铺垫-–-计算机组成原理"><a href="#二、底层知识铺垫-–-计算机组成原理" class="headerlink" title="二、底层知识铺垫 – 计算机组成原理"></a>二、底层知识铺垫 – 计算机组成原理</h2><blockquote><p>有没想过1、索引的数据结构为什么不是二叉排序树、红黑树、Hash、B树？而是B+树？2、为什么索引能是排好序的？</p><p>这些需要计算机组成原理的知识才能解决！希望大伙认真看，踊跃发言，互相学习</p></blockquote><h3 id="1、磁盘的读取原理"><a href="#1、磁盘的读取原理" class="headerlink" title="1、磁盘的读取原理"></a>1、磁盘的读取原理</h3><ul><li><p>索引存储在文件中，也就是说，查询索引就需要磁盘I/O操作，而磁盘I/O存在机械运动耗费，因此磁盘I/O的时间消耗是巨大的。 </p></li><li><p>磁盘的机械运动是怎么样子的？时间消耗多大？</p><ul><li><p>磁盘结构图：</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220328154338796.png" alt="image-20220328154338796" style="zoom:80%;" /> <img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220328154400203.png" alt="image-20220328154400203" style="zoom:80%;" /></p></li><li><p>概念：</p><ul><li><strong>磁道</strong>：以盘片中心为圆心，用不同的半径，划分出不同的很窄的圆环形区域，称为磁道</li><li><strong>扇区</strong>：磁盘上的每个磁道被等分为若干个弧段，这些弧段便是磁盘的扇区.扇区是磁盘最小的物理存储单元</li><li><strong>柱面</strong>：上下一串盘片中，相同半径的磁道所组成的一个圆柱型的环壁，就称为柱面</li></ul></li><li><p>磁盘读取时间计算：</p><ul><li><strong>寻道时间</strong>：磁头从开始移动到数据所在磁道所需要的时间，寻道时间越短，I/O操作越快。主流磁盘一般在5ms以下；</li><li><strong>旋转延迟</strong>：盘片旋转将请求数据所在扇区移至读写磁头下方所需要的时间，旋转延迟取决于磁盘转速。比如： 一个 7200（转 / 每分钟）的硬盘，平均旋转延迟时间为 1 ÷ ( 7200 ÷ 60 ) ÷ 2＝4.17ms（最多旋转１圈，最少不用旋转，平均情况下，需要旋转半圈）。 </li><li><strong>数据传输时间</strong>：完成传输所请求的数据所需要的时间。一般在零点几毫秒，相对于前两个时间可以忽略不计。</li><li>可见，磁盘I/O时间取决于寻道时间和旋转延迟</li></ul></li></ul></li></ul><h3 id="2、内存的读取原理"><a href="#2、内存的读取原理" class="headerlink" title="2、内存的读取原理"></a>2、内存的读取原理</h3><ul><li><p>内存的地址：计算机使用的主存基本都是随机读写存储器（RAM），内存可以抽象概括为一系列的存储单元组成的矩阵，每个存储单元存储固定大小的数据。每个存储单元由行和列构成唯一的地址。 </p></li><li><p>内存读取原理：当系统需要读取主存时，则将地址信号放到地址总线上传给主存，主存读到地址信号后，解析信号并定位到指定存储单元，然后将此存储单元数据放到数据总线上，供其它部件读取。由图可见，内存的读取时间仅与读取的次数呈线性关系，无机械操作，查询时间短、效率高</p><p><img src="http://blog.codinglabs.org/uploads/pictures/theory-of-mysql-index/5.png" alt="img"> </p></li></ul><h3 id="3、-从内存读取到磁盘预读"><a href="#3、-从内存读取到磁盘预读" class="headerlink" title="3、 从内存读取到磁盘预读"></a>3、 <strong>从内存读取到磁盘预读</strong></h3><ul><li>由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，磁盘的存取速度往往是主存的几百分分之一，因此为了提高效率，要尽量减少磁盘I/O。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的局部性原理：  *<em>当一个数据被用到时，其附近的数据也通常会马上被使用。程序运行期间所需要的数据通常比较集中。 *</em>  </li><li>另一个原因： 由于磁盘顺序读取的效率很高（<strong>不需要寻道时间</strong>，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高I/O效率。 </li><li>预读的长度一般为<strong>页（page）的整倍数</strong>。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为4k），<strong>主存和磁盘以页为单位交换数据</strong>。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。</li></ul><h2 id="三、索引的数据结构"><a href="#三、索引的数据结构" class="headerlink" title="三、索引的数据结构"></a>三、索引的数据结构</h2><blockquote><p>第二部分主要用于B+树上,页的概念和预读十分重要,方便下面理解</p></blockquote><h3 id="1、不用二叉排序树、Hash、B树的分析"><a href="#1、不用二叉排序树、Hash、B树的分析" class="headerlink" title="1、不用二叉排序树、Hash、B树的分析"></a>1、不用二叉排序树、Hash、B树的分析</h3><ul><li><p>二叉排序树</p><ul><li>劣势：二叉排序树在极端情况下会有斜树，造成O(n)的时间复杂度</li></ul></li><li><p>Hash</p><ul><li>劣势：Hash是把索引数据进行Hash算法对应一个地址，我们会发现这个好像性能很好啊，直接找到，但是我们想想，它能满足我们日常开发大部分情况吗？比如通过大于或者小于去筛选数据，所以说也不合适，当然mysql还是提供了Hash索引，毕竟有些场合还是用起来也不错</li></ul></li><li><p>B树( 多路查找树 )</p><ul><li><p>概念:</p><ul><li>度(Degree)-节点的数据存储个数</li><li>叶节点具有相同的深度</li><li>叶节点的指针为空</li><li>节点中的数据key从左到右递增排列</li></ul></li><li><p>优势：二叉树存储的数据(海量数据可能来自文件，来自数据库)，不仅<strong>高度很高</strong>，而且每次查询，<strong>一个节点只有一个元素</strong>加载进内存，这样需要<strong>多次I/O</strong>操作，效率低下；而B树可以一次查询就有一个节点(数据库的话有一<strong>页</strong>节点)加载进内存，高度极大缩小，内存处理效率高又能减少I/O操作，查询效率高（为什么内存处理效率高？为什么要减少I/O操作？为什么是一页的数据？第二部分有讲解）</p><p>PS：一棵B 树的阶为1001 (即1 个结点包含1 000 个关键字) ，高度为2 ，它可以储存超过10 亿个关键字，我们只要让根结点持久地保留在内存中，那么在这棵树上，寻找某一个关键字至多需要两次I/O操作即可</p></li><li><p>不足：为什么不使用B树？因为一次I/O存入内存的<strong>节点数据</strong>会影响<strong>节点里面元素个数</strong>（存的容量有限，一页大小），而B+树解决这一问题</p></li><li><p>图解：</p><p> <img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220328152657703.png" alt="image-20220328152657703"> </p></li><li><p>为什么不一开始节点是全部数据</p><p>因为内存与硬盘数据交互的单位是页，而一页是4K或8K，如果全部数据超过一页单位，就会有多次I/O操作，减低性能</p></li></ul></li></ul><h3 id="2、使用B-树的原因"><a href="#2、使用B-树的原因" class="headerlink" title="2、使用B+树的原因"></a>2、使用B+树的原因</h3><ul><li><p>概念：是B树的变形树</p><ul><li>非叶子节点不存储data，只存储key(索引值)，可以增大度</li><li>各个叶子节点的头和尾有指针连接，可以顺序访问，提高区间访问的性能</li></ul></li><li><p>优势：B+树非叶子节点存储的是索引值，这样一页的数据存储的个数比B树多，这样降低高度，从而查询次数也会减低、I/O操作次数减少，效率更高</p></li><li><p>图解：</p><p> <img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220328152827971.png" alt="image-20220328152827971"></p></li><li><p>B+Tree索引的性能分析</p><ul><li>一般使用磁盘I/O次数评价索引结构的优劣</li><li>预读：磁盘一般会顺序向后读取一定长度的数据(页的整数倍)放入内存</li><li>局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用</li><li>B+Tree节点的大小设为等于一个页，每次新建节点直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，就实现了一个节点的载入只需一次I/O</li><li>B+Tree的度d一般会超过100，因此h非常小(一般为3到5之间)</li></ul><h3 id="四、聚簇索引和非聚簇索引"><a href="#四、聚簇索引和非聚簇索引" class="headerlink" title="四、聚簇索引和非聚簇索引"></a>四、聚簇索引和非聚簇索引</h3></li></ul><ul><li><p>聚簇索引：将数据存储与索引放到了一块，找到索引也就找到了数据</p></li><li><p>非聚簇索引：将数据存储与索引分开放置，找到索引就能找到数据的存储地址</p></li><li><p>MyISAM:</p><ul><li>主键索引数据结构</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220328153307233.png" alt="image-20220328153307233"></p><ul><li><p>铺助索引数据结构</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210303225244849.png" alt="image-20210303225244849"></p></li></ul></li><li><p>InnoDB</p><ul><li><p>主键索引数据结构</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210303225319743.png" alt="image-20210303225319743"></p></li></ul><ul><li><p>铺助索引数据结构</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210303225327950.png" alt="image-20210303225327950"></p></li><li><p>问题？</p><ul><li><p>为什么非主键索引结构叶子节点存储的是主键值？</p><p>如果辅助索引叶子节点存数据的话，就会造成插入、修改、删除数据时，主键和辅助索引要维护两份数据，会造成<strong>数据一致性</strong>问题，同时也<strong>增大存储空间</strong></p></li><li><p>为什么InnoDB表必须有主键？</p><p>InnoDB的数据文件本身就是按B+Tree组织的一个索引结构文件。（没有创建主键，数据表也会找其中一列做数据，数据不重复，如果没有不重复，后台会默认创建主键，而且是整形的。）</p></li><li><p>为什么不用UUID而用自增的整形id？</p><ul><li>UUID比较使用ASCII比较字符，一个一个比较肯定比整数比较慢</li><li>UUID存储的空间比整形存储空间大</li><li>整形自增id，数据会插入到最后面的叶子节点的后面，而UUID数据插入的话，无法保证插入的位置，可能在数据的中间，因为节点度满了，节点就会分裂，可能会造成上面很多的节点分裂</li></ul></li><li><p>联合索引的底层存储结构长什么样？</p><p>联合索引和单个索引差不多，索引有多个字段。在查找时，先比较第一个字段，比不了就比较下一个，一次类推。这样就是最左前缀原理由来。</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210303225341671.png" alt="image-20210303225341671"></p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8 Lambda语法、函数接口、方法引用</title>
      <link href="/2019/07/05/Java8%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%81%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/07/05/Java8%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%81%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8-Lambda语法、函数接口、方法引用"><a href="#Java8-Lambda语法、函数接口、方法引用" class="headerlink" title="Java8 Lambda语法、函数接口、方法引用"></a>Java8 Lambda语法、函数接口、方法引用</h1><p>[toc]</p><h2 id="一、Lambda语法"><a href="#一、Lambda语法" class="headerlink" title="一、Lambda语法"></a>一、Lambda语法</h2><ul><li><p>Lambda 表达式的基础语法：Java8中引入了一个新的操作符 “-&gt;” 该操作符称为箭头操作符或 Lambda 操作符</p><ul><li>箭头操作符将 Lambda 表达式拆分成两部分：<ul><li>左侧：Lambda 表达式的参数列表</li><li>右侧：Lambda 表达式中所需执行的功能， 即 Lambda 体</li></ul></li><li>主要的功能就是代替了JAVA7之前对于函数式接口需要内部类进行实现的问题</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaCase</span> &#123;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 语法格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">grammer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 语法格式</span></span><br><span class="line">        <span class="comment">// 1、(parameters, ...) -&gt; expression  expression 只能是一条语句。如果是返回值的语句，那么不需用写return xxx 而是 xxx</span></span><br><span class="line">        IDemo demo = (param) -&gt; param + <span class="string">"123"</span>;</span><br><span class="line">        System.out.<span class="built_in">println</span>(demo.output(<span class="string">"张三"</span>));</span><br><span class="line">        <span class="comment">// 2、(parameters, ...) -&gt;&#123; expressions; &#125;   expressions 可以是一条或者多条语句。如果是返回值语句，那么需要写入return</span></span><br><span class="line">        IDemo demo1 = (param) -&gt; &#123;</span><br><span class="line">            param = param + <span class="string">"123"</span>;</span><br><span class="line">            <span class="keyword">return</span> param;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.<span class="built_in">println</span>(demo1.output(<span class="string">"李四"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 变量作用域</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">variableScope</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 变量作用域</span></span><br><span class="line">        <span class="comment">// lamdba 只能引用标记的 外层局部变量 ，也就是说 不能修改 定义在外层的局部变量</span></span><br><span class="line">        <span class="comment">// 全局变量不受影响</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">String</span> VARIABLE = <span class="string">"Hello! "</span>;</span><br><span class="line">        <span class="keyword">String</span> variable = <span class="string">"Hi! "</span>;</span><br><span class="line">        IDemo demo = param -&gt; &#123;</span><br><span class="line">            <span class="comment">// VARIABLE = VARIABLE + param;</span></span><br><span class="line">            <span class="comment">// variable = variable + param;</span></span><br><span class="line">            <span class="comment">// return VARIABLE + param;</span></span><br><span class="line">            <span class="keyword">return</span> variable + param;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IDemo &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">String</span> <span class="title">output</span><span class="params">(<span class="keyword">String</span> param)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、函数式接口"><a href="#二、函数式接口" class="headerlink" title="二、函数式接口"></a>二、函数式接口</h2><ul><li><p>接口中的方法必须是唯一的（在相同参数的前提下，如果有一个参数和两个参数的抽象方法还是可以的，因为可以通过参数个数来识别Lembda表达式到底是在实现哪个方法）！叫做<strong>函数式接口</strong>，用 <strong>@FunctionalInterface 注解</strong>可以标明此接口为函数式接口，这样在编译的时候如果在写接口的时候不符合函数式接口的条件，就会发生编译错误了。</p></li><li><p>通常并不自己去写一个函数式接口供自己使用，java已经提供了内置的<strong>四大核心函数式接口</strong></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210313210454997.png" alt="image-20210313210454997"></p></li><li><p>四大内置函数式接口还有许多子接口，如下图</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210313210542064.png" alt="image-20210313210542064"></p></li></ul><h2 id="三、方法引用"><a href="#三、方法引用" class="headerlink" title="三、方法引用"></a>三、方法引用</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Author hanbin_chen</span></span><br><span class="line"><span class="comment"> * @Description 方法引用</span></span><br><span class="line"><span class="comment"> * 当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</span></span><br><span class="line"><span class="comment"> * 1、方法引用所引用的方法的参数列表与返回值类型，需要与函数式接口中抽象方法的参数列表和返回值类型保持一致！</span></span><br><span class="line"><span class="comment"> * 2、若Lambda 的参数列表的第一个参数，是实例方法的调用者，第二个参数(或无参)是实例方法的参数，表达式是实例方法时，格式： ClassName::MethodName</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 类::静态方法 与 对象::实例方法形式一样：参数：方法参数，表达式：非参数列表调用方法</span></span><br><span class="line"><span class="comment"> * 类::实例方法：参数：对象实例，方法参数；表达式：参数列表对象调用方法</span></span><br><span class="line"><span class="comment"> * @DateTime 2021/3/12 15:32</span></span><br><span class="line"><span class="comment"> * @Version V1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> MethodRefCase &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类::实例方法</span></span><br><span class="line"><span class="comment">     * 若Lambda 的参数列表的第一个参数，是实例方法的调用者，</span></span><br><span class="line"><span class="comment">     * 第二个参数(或无参)是实例方法的参数，表达式是 调用者调用实例方法 时，格式： ClassName::MethodName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> classInstanceMethod() &#123;</span><br><span class="line">        Person person = <span class="built_in">new</span> Person("张三", <span class="number">123</span>);</span><br><span class="line">        <span class="keyword">Function</span>&lt;Person, String&gt; <span class="keyword">function</span> = e -&gt; e.getName();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">function</span>.apply(person));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("============================");</span><br><span class="line">        <span class="keyword">Function</span>&lt;Person, String&gt; function1 = Person::getName;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(function1.apply(person));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类::静态方法</span></span><br><span class="line"><span class="comment">     * 若Lambda 的参数列表的参数时类的静态方法参数，表达式是静态方法执行，格式：ClassName::MethodName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> classStaticMethod() &#123;</span><br><span class="line">        <span class="keyword">Function</span>&lt;String, <span class="type">Integer</span>&gt; <span class="keyword">function</span> = (str) -&gt; <span class="type">Integer</span>.valueOf(str);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">function</span>.apply("1"));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("==================================");</span><br><span class="line">        <span class="keyword">Function</span>&lt;String, <span class="type">Integer</span>&gt; function1 = <span class="type">Integer</span>::valueOf;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(function1.apply("2"));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象::实例方法</span></span><br><span class="line"><span class="comment">     * 对象参数不是实例对象(可以无参)，表达式是实例对象调用实例方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> instanceMethod() &#123;</span><br><span class="line">        Person person = <span class="built_in">new</span> Person("张三", <span class="number">123</span>);</span><br><span class="line">        <span class="keyword">Function</span>&lt;String, Person&gt; <span class="keyword">function</span> = (x) -&gt; person.setName(x);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">function</span>.apply("李四").toString());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("====================");</span><br><span class="line">        <span class="keyword">Function</span>&lt;String, Person&gt; function1 = person::setName;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(function1.apply("王五"));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line"></span><br><span class="line">    private String <span class="type">name</span>;</span><br><span class="line"></span><br><span class="line">    private <span class="type">Integer</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> Person() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> Person(String <span class="type">name</span>, <span class="type">Integer</span> age) &#123;</span><br><span class="line">        this.name = <span class="type">name</span>;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> this.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> Person setName(String <span class="type">name</span>) &#123;</span><br><span class="line">        this.name = <span class="type">name</span>;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> Person setAge(<span class="type">Integer</span> age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">Integer</span> getAge() &#123;</span><br><span class="line">        <span class="keyword">return</span> this.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> String toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> "Person&#123;" +</span><br><span class="line">                "name='" + <span class="type">name</span> + <span class="string">'\'' +</span></span><br><span class="line"><span class="string">                ", age=" + age +</span></span><br><span class="line"><span class="string">                '</span>&#125;<span class="string">';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="四、构造器引用"><a href="#四、构造器引用" class="headerlink" title="四、构造器引用"></a>四、构造器引用</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorRef</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类名::new</span></span><br><span class="line"><span class="comment">     * 与函数式接口相结合，自动与函数式接口中方法兼容。 </span></span><br><span class="line"><span class="comment">     * 可以把构造器引用赋值给定义的方法，与构造器参数 列表要与接口中抽象方法的参数列表一致！</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 语句：参数列表：构造方法参数，表达式：构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">classNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BiFunction&lt;<span class="keyword">String</span>, Integer, Man&gt; function = (name, age) -&gt; <span class="keyword">new</span> Man(name, age);</span><br><span class="line">        System.out.<span class="built_in">println</span>(function.apply(<span class="string">"张三"</span>, <span class="number">23</span>).toString());</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"================================="</span>);</span><br><span class="line">        BiFunction&lt;<span class="keyword">String</span>, Integer, Man&gt; function1 = Man::<span class="keyword">new</span>;</span><br><span class="line">        System.out.<span class="built_in">println</span>(function1.apply(<span class="string">"张三"</span>, <span class="number">23</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">(<span class="keyword">String</span> name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、数组引用"><a href="#五、数组引用" class="headerlink" title="五、数组引用"></a>五、数组引用</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ArrayRef &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据引用</span></span><br><span class="line"><span class="comment">     * 类型[]::new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> arrayRef() &#123;</span><br><span class="line">        <span class="keyword">Function</span>&lt;<span class="type">Integer</span>, String[]&gt; <span class="keyword">function</span> = (args) -&gt; <span class="built_in">new</span> String[args];</span><br><span class="line">        String[] strs = <span class="keyword">function</span>.apply(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(strs.length);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("=============================");</span><br><span class="line">        <span class="keyword">Function</span>&lt;<span class="type">Integer</span>, String[]&gt; function1 = String[]::<span class="built_in">new</span>;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(function1.apply(<span class="number">20</span>).length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入了解JVM--内存模型</title>
      <link href="/2019/06/28/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3JVM-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/06/28/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3JVM-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="jvm内存模型"><a href="#jvm内存模型" class="headerlink" title="jvm内存模型"></a>jvm内存模型</h2><ul><li>Jvm内存模型图</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210304212806496.png" alt="image-20210304212806496"></p><ul><li><p>线程私有</p><ul><li>程序计数器：记录虚拟机字节码的指令地址</li><li>虚拟机栈：每个方法执行时，都会创建一个栈帧，存储局部变量、操作数、动态链接、方法返回地址。方法从调用到执行完毕，对应栈帧在虚拟机栈入栈和出栈</li><li>本地方法栈：跟虚拟机栈类似，执行native方法</li></ul></li><li><p>线程共享</p><ul><li>堆：内存最大的区域，存储java对象</li><li>方法区：存储已被虚拟机加载的类信息、常量、静态变量等</li></ul></li><li><p>Java堆的划分</p><ul><li>新生代（1:3）:存放新生的对象<ul><li>Eden(8:10)</li><li>From Survivor(1:10)</li><li>To Survivor(1:10)</li><li>过程：eden区存放新建对象。而当eden区内存不够时，就会触发垃圾回收，将其与from survivor区的存活对象，复制to survivor区，然后to survivor区变成from survivor区。每经过一次垃圾回收，对象年龄+1，当超过默认15次时，会复制到老年代</li></ul></li><li>老年代(2:3)<ul><li>过程：老年代存放生命周期长的对象。而当老年代内存不够时，会触发full gc，比gc慢10倍左右。当时在装不下时，报出out of memory异常</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Redis--解决Redis缓存穿透、雪崩、击穿问题</title>
      <link href="/2019/06/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-%E8%A7%A3%E5%86%B3Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E9%9B%AA%E5%B4%A9%E3%80%81%E5%87%BB%E7%A9%BF%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-%E8%A7%A3%E5%86%B3Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E9%9B%AA%E5%B4%A9%E3%80%81%E5%87%BB%E7%A9%BF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解Redis–解决Redis缓存穿透、雪崩、击穿问题"><a href="#深入理解Redis–解决Redis缓存穿透、雪崩、击穿问题" class="headerlink" title="深入理解Redis–解决Redis缓存穿透、雪崩、击穿问题"></a>深入理解Redis–解决Redis缓存穿透、雪崩、击穿问题</h1><h2 id="一、缓存穿透"><a href="#一、缓存穿透" class="headerlink" title="一、缓存穿透"></a>一、缓存穿透</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>缓存穿透就是访问一个不存在的数据时，缓存没有命中，而访问数据库，在高并发情况下，数据库又因为压力而宕机</p><h3 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h3><p>布隆过滤器</p><ul><li>简介：布隆过滤器实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</li><li>原理：当一个元素被加入集合时，通过K个散列函数将这个元素映射成一个位数组中的K个点，把它们置为1。检索时，我们只要看看这些点是不是都是1就（大约）知道集合中有没有它了：如果这些点有任何一个0，则被检元素一定不在；如果都是1，则被检元素很可能在。</li><li>优点：相比于其它的数据结构，布隆过滤器在空间和时间方面都有巨大的优势。布隆过滤器存储空间和插入/查询时间都是常数（O(k)）。而且它不存储元素本身，在某些对保密要求非常严格的场合有优势。</li><li>缺点：一定的误识别率和删除困难。<br>结合以上几点及去重需求（容忍误判，会误判在，在则丢，无妨），决定使用BlomFilter。</li></ul><h2 id="二、缓存雪崩"><a href="#二、缓存雪崩" class="headerlink" title="二、缓存雪崩"></a>二、缓存雪崩</h2><h3 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h3><p> 在缓存时设置相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，数据库瞬时压力过重雪崩。 </p><h3 id="2、解决方案-1"><a href="#2、解决方案-1" class="headerlink" title="2、解决方案"></a>2、解决方案</h3><p>缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><h2 id="三、缓存击穿"><a href="#三、缓存击穿" class="headerlink" title="三、缓存击穿"></a>三、缓存击穿</h2><h3 id="1、介绍-2"><a href="#1、介绍-2" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>某个数据设置过期时间，而该数据是被高并发访问的热点数据，一旦过期，可能就会造成缓存被击穿的可能</p><h3 id="2、解决方案-2"><a href="#2、解决方案-2" class="headerlink" title="2、解决方案"></a>2、解决方案</h3><ul><li><p>使用互斥锁解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(key)</span> </span>&#123;  </span><br><span class="line">      String value = redis.get(key);  </span><br><span class="line">      <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; <span class="comment">//代表缓存值过期  </span></span><br><span class="line">          <span class="comment">//设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db  </span></span><br><span class="line">          <span class="keyword">if</span> (redis.setnx(key_mutex, <span class="number">1</span>, <span class="number">3</span> * <span class="number">60</span>) == <span class="number">1</span>) &#123;  <span class="comment">//代表设置成功  </span></span><br><span class="line">               value = db.get(key);  </span><br><span class="line">               redis.set(key, value, expire_secs);  </span><br><span class="line">               redis.del(key_mutex);  </span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;  <span class="comment">//这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可  </span></span><br><span class="line">                      sleep(<span class="number">50</span>);  </span><br><span class="line">                      get(key);  <span class="comment">//重试  </span></span><br><span class="line">              &#125;  </span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">              <span class="keyword">return</span> value;        </span><br><span class="line">          &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>将该数据不设置过期时间，就不会造成缓存击穿问题</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL语法基础</title>
      <link href="/2019/06/13/MySQL%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/06/13/MySQL%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL语法基础"><a href="#MySQL语法基础" class="headerlink" title="MySQL语法基础"></a>MySQL语法基础</h1><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/Sql%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80.png" alt="Sql语言基础" style="zoom: 25%;" /><blockquote><p>思维导图 </p><p>链接：<a href="https://pan.baidu.com/s/1whN2oiWZrklR8MCCFUCMSg" target="_blank" rel="noopener">https://pan.baidu.com/s/1whN2oiWZrklR8MCCFUCMSg</a><br>提取码：6666 </p></blockquote><h1 id="MySQL知识图谱"><a href="#MySQL知识图谱" class="headerlink" title="MySQL知识图谱"></a>MySQL知识图谱</h1><h2 id="Sql语言基础"><a href="#Sql语言基础" class="headerlink" title="Sql语言基础"></a>Sql语言基础</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>CREATE TABLE mytable (<br> id INT NOT NULL AUTO_INCREMENT,<br> col1 INT NOT NULL DEFAULT 1,<br> col2 VARCHAR(45) NULL,<br> col3 DATE NULL,<br> PRIMARY KEY (<code>id</code>));</p><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><ul><li><p>添加列</p><p>ALTER TABLE mytable<br>ADD col CHAR(20);</p></li><li><p>删除列</p><p>ALTER TABLE mytable<br>DROP COLUMN col;</p></li><li><p>删除表</p><p>DROP TABLE mytable;</p></li></ul><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><ul><li><p>普通插入</p><p>INSERT INTO mytable(col1, col2)<br>VALUES(val1, val2);</p></li><li><p>查询内容插入</p><p>INSERT INTO mytable1(col1, col2)<br>SELECT col1, col2<br>FROM mytable2;</p></li><li><p>表内容插入</p><p>CREATE TABLE newtable AS<br>SELECT * FROM mytable;</p></li></ul><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>UPDATE mytable<br>SET col = val<br>WHERE id = 1;</p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><ul><li><p>DELETE</p><p>DELETE FROM mytable<br>WHERE id = 1;</p></li><li><p>TRUNCATE</p><p>TRUNCATE TABLE mytable;</p></li><li><p>DELETE与TRUNCATE区别</p><p>表和索引所占空间。当表被truncate 后，这个表和索引所占用的空间会恢复到初始bai大小，delete操作不会减少表或索引所占用的空间。<br>delete要通过事务提交生效，而truncate立即生效，不会回滚，在没有备份情况下，谨慎用truncate<br>delete 语句每次删除一行，并在事务日志中为所删除的每行记录一项。truncate table 通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。</p></li></ul><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><ul><li><p>DISTINCT</p><p>标识所选列的唯一性<br>SELECT DISTINCT col1, col2<br>FROM mytable;</p></li><li><p>LIMIT</p><p>限制返回的行数，有两个参数，第一个参数表示起始行，可选填，默认从0开始；第二个表示返回的总行数<br>SELECT *<br>FROM mytable<br>LIMIT 5;<br>等同于<br>SELECT *<br>FROM mytable<br>LIMIT 0, 5;</p></li><li><p>ASC / DESC</p><p>ASC : 升序(默认)<br>DESC : 降序<br>可选择多个列排序，且不同排序方式<br>SELECT *<br>FROM mytable<br>ORDER BY col1 DESC, col2 ASC;</p></li><li><p>通配符</p><p>用于过滤语句中，只能用于文本字段<br>% 匹配 &gt;=0 个任意字符<br>_ 匹配 ==1 个任意字符；<br>SELECT *<br>FROM mytable<br>WHERE col1 = “col1%”;<br>注意点：通用符尽量用在后面。因为写在前面，就会全表扫描，影响查询效率</p></li><li><p>计算字段</p><ul><li><p>简单计算</p><p>在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量<br>计算字段通常需要使用 AS 来取别名，否则输出的时候字段名为计算表达式。</p><pre><code>SELECT col1 * col2 AS aliasFROM mytable;</code></pre><p>CONCAT() 用于连接两个字段，许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 TRIM() 可以去除首尾空格。</p><pre><code>SELECT CONCAT(TRIM(col1), &apos;(&apos;, TRIM(col2), &apos;)&apos;) AS         concat_colFROM mytable;</code></pre></li><li><p>函数</p><ul><li><p>汇总</p><p>函数说明：<br>AVG() 返回某列的平均值<br>COUNT() 返回某列的行数<br>MAX() 返回某列的最大值<br>MIN() 返回某列的最小值<br>SUM() 返回某列值之和<br>注意点：<br>AVG() 会忽略 NULL 行。<br>使用DISTINCT，先根据DISTINCT的列找到对应数据，在计算平均值</p><pre><code>SELECT AVG(DISTINCT col1) AS avg_colFROM mytable;</code></pre></li><li><p>日期和时间处理</p><p>日期格式: YYYY-MM-DD<br>时间格式: HH:MM:SS<br>函 数 说 明<br>AddDate() 增加一个日期(天、周等)<br>AddTime() 增加一个时间(时、分等)<br>CurDate() 返回当前日期<br>CurTime() 返回当前时间<br>Date() 返回日期时间的日期部分<br>DateDiff() 计算两个日期之差<br>Date_Add() 高度灵活的日期运算函数<br>Date_Format() 返回一个格式化的日期或时间串<br>Day() 返回一个日期的天数部分<br>DayOfWeek() 对于一个日期，返回对应的星期几<br>Hour() 返回一个时间的小时部分<br>Minute() 返回一个时间的分钟部分<br>Month() 返回一个日期的月份部分<br>Now() 返回当前日期和时间<br>Second() 返回一个时间的秒部分<br>Time() 返回一个日期时间的时间部分<br>Year() 返回一个日期的年份部分</p><pre><code>SELECT NOW();</code></pre></li><li><p>文本处理</p><p>函数说明：<br>SIN()  正弦<br>COS()  余弦<br>TAN()  正切<br>ABS()  绝对值<br>SQRT()  平方根<br>MOD()  余数<br>EXP()  指数<br>PI()  圆周率<br>’RAND()  随机数</p></li></ul></li></ul></li><li><p>WHERE</p><p>条件查询<br>操作符说明：<br>= 等于<br>&lt; 小于</p><p>大于<br>!= 不等于<br>&lt;= 小于等于<br>= 大于等于<br>BETWEEN在两个值之间<br>IS NULL为 NULL 值<br>注意点：<br>AND 和 OR 用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用 () 来决定优先级，使得优先级关系更清晰。<br>IN 操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。<br>NOT 操作符用于否定一个条件</p><pre><code>SELECT *FROM mytableWHERE col1 = &quot;col1&quot;;</code></pre></li><li><p>分组</p><p>具有相同数据值的行划为一组<br>常与汇总函数处理使用，如求分组数据的平均值等</p><pre><code>SELECT col, COUNT(*) AS numFROM mytableGROUP BY col;</code></pre><p>结合ORDER BY排序</p><pre><code>SELECT col, COUNT(*) AS numFROM mytableGROUP BY colORDER BY num;</code></pre><p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。</p><pre><code> SELECT col, COUNT(*) AS numFROM mytableWHERE col &gt; 2GROUP BY colHAVING num &gt;= 2;</code></pre><p>注意点：<br>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；<br>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；<br>NULL 的行会单独分为一组；</p></li><li><p>子查询</p><p>子查询中只能返回一个字段的数据。<br>可以将子查询的结果作为 WHRER 语句的过滤条件:</p><pre><code>SELECT *FROM mytable1WHERE col1 IN (SELECT col2    FROM mytable2);</code></pre><p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次:</p><pre><code>SELECT cust_name, (SELECT COUNT(*)     FROM Orders      WHERE Orders.cust_id = Customers.cust_id)      AS orders_numFROM CustomersORDER BY cust_name;</code></pre></li><li><p>JOIN</p><ul><li>左链接</li><li>内链接</li><li>右链接</li><li>左独有</li><li>全连接</li><li>右独有</li><li>并集去交集</li></ul></li><li><p>UNION</p><p>使用 UNION 来组合两个查询，每个查询必须包含相同的列、表达式和聚集函数<br>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。<br>只能包含一个 ORDER BY 子句，并且必须位于语句的最后</p><pre><code>SELECT colFROM mytableWHERE col = 1UNIONSELECT colFROM mytableWHERE col =2ORDER BY col;</code></pre></li><li><p>视图</p><p>视图（view）是一种虚拟存在的表，是一个逻辑表，本身并不包含数据。作为一个select语句保存在数据字典中的</p><pre><code>CREATE VIEW myview ASSELECT Concat(col1, col2) AS concat_col, col3*col4 AS compute_colFROM mytableWHERE col5 = val;</code></pre></li><li><p>存储过程</p><p>存储过程可以看成是对一系列 SQL 操作的批处理。<br>使用存储过程的好处:<br>代码封装，保证了一定的安全性；<br>代码复用；<br>由于是预先编译，因此具有很高的性能。</p></li><li><p>事务管理</p><p>事务(transaction)指一组 SQL 语句；<br>回退(rollback)指撤销指定 SQL 语句的过程；<br>提交(commit)指将未存储的 SQL 语句结果写入数据库表；<br>MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。<br>START TRANSACTION<br>// …<br>SAVEPOINT delete1<br>// …<br>ROLLBACK TO delete1<br>// …<br>COMMIT</p></li><li><p>事务管理</p><p>事务(transaction)指一组 SQL 语句；<br>回退(rollback)指撤销指定 SQL 语句的过程；<br>提交(commit)指将未存储的 SQL 语句结果写入数据库表；<br>MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。<br>START TRANSACTION<br>// …<br>SAVEPOINT delete1<br>// …<br>ROLLBACK TO delete1<br>// …<br>COMMIT</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入了解Redis--Redis核心原理</title>
      <link href="/2019/06/12/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Redis-Redis%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
      <url>/2019/06/12/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Redis-Redis%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="深入了解Redis–Redis核心原理"><a href="#深入了解Redis–Redis核心原理" class="headerlink" title="深入了解Redis–Redis核心原理"></a>深入了解Redis–Redis核心原理</h1><h2 id="一、Redis的单线程和高性能"><a href="#一、Redis的单线程和高性能" class="headerlink" title="一、Redis的单线程和高性能"></a>一、Redis的单线程和高性能</h2><h3 id="1、Redis-单线程为什么还能这么快？"><a href="#1、Redis-单线程为什么还能这么快？" class="headerlink" title="1、Redis 单线程为什么还能这么快？"></a>1、Redis 单线程为什么还能这么快？</h3><p>因为它所有的数据都在内存中，所有的运算都是<strong>内存级别的运算</strong>( 一个常规的命令，set/get操作，时间是<strong>纳秒</strong>级别的，redis理想情况下<strong>QPS为10W/s</strong>)，而且单线程<strong>避免了多线程的切换性能损耗</strong>问题。正因为 Redis 是单线程，所以要小心使用 Redis 指令，对于那些耗时的指令(比如keys)，一定要谨慎使用，一不小心就可能会导致 Redis 卡顿。 </p><h3 id="2、Redis单线程如何处理那么多的并发客户端连接？"><a href="#2、Redis单线程如何处理那么多的并发客户端连接？" class="headerlink" title="2、Redis单线程如何处理那么多的并发客户端连接？"></a>2、Redis单线程如何处理那么多的并发客户端连接？</h3><p>Redis的<strong>IO多路复用</strong>：redis利用epoll来实现IO多路复用，将连接信息和事件放到队列中，依次放到文件事件分派器，事件分派器将事件分发给事件处理器。</p><p><img src="https://root-1258715043.cos.ap-guangzhou.myqcloud.com/blog/1581431818149.png" alt="1581431818149"></p><h2 id="二、Redis持久化"><a href="#二、Redis持久化" class="headerlink" title="二、Redis持久化"></a>二、Redis持久化</h2><h3 id="1、RDB快照（snapshot）"><a href="#1、RDB快照（snapshot）" class="headerlink" title="1、RDB快照（snapshot）"></a>1、RDB快照（snapshot）</h3><p>在默认情况下， Redis 将内存数据库快照保存在名字为 dump.rdb 的二进制文件中。</p><p>你可以对 Redis  进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动保存一次数据集。</p><p>比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动保存一次数据集：</p><figure class="highlight plain"><figcaption><span>60 1000````</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">默认设置</span><br><span class="line"></span><br><span class="line"> ![1581432750276](https:&#x2F;&#x2F;root-1258715043.cos.ap-guangzhou.myqcloud.com&#x2F;blog&#x2F;1581432750276.png)</span><br><span class="line"></span><br><span class="line">### 2、AOF（append-only file）</span><br><span class="line"></span><br><span class="line">快照功能并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、且仍未保存到快照中的那些数据。从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化，将修改的每一条指令记录进文件</span><br><span class="line"></span><br><span class="line">你可以通过修改配置文件来打开 AOF 功能：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&#96; appendonly yes</span><br></pre></td></tr></table></figure><p>从现在开始， 每当 Redis 执行一个改变数据集的命令时（比如 <a href="http://redisdoc.com/string/set.html#set" target="_blank" rel="noopener">SET</a>）， 这个命令就会被追加到 AOF 文件的末尾。这样的话， 当 Redis 重新启时， 程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目的。</p><p>你可以配置 Redis 多久才将数据 fsync (<strong>持久化</strong>)到磁盘一次。</p><p>有三个选项：</p><ol><li>`````appendfsync always````每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全。</li><li><code>appendfsync everysec</code>每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。</li><li><code>appendfsync no</code> 从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择。</li></ol><p>推荐（并且也是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。</p><figure class="highlight plain"><figcaption><span>appendonly.aof````查看aof文件内容，文件内容存储使用[Redis协议规范(RESP)](https://www.cnblogs.com/tommy-huang/p/6051577.html)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 3、RDB 和 AOF ，我应该用哪一个？</span><br><span class="line"></span><br><span class="line"> 如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。</span><br><span class="line"></span><br><span class="line">&gt; 你们可能有这么一个疑问？可以把RDB的快照时间设为每秒，可是实际上，每次快照，就要把整个内存数据快照，一般企业的Redis都是GB级别，这样花时间就，效率低下</span><br><span class="line"></span><br><span class="line">有很多用户都只使用 AOF 持久化， 但并不推荐这种方式，因为如果aof文件非常大，如果有几个GB的话，Redis重启的话，Redis执行aof文件里面的命令，启动慢，效率低</span><br><span class="line"></span><br><span class="line">那么如何选择呢？就是接下来要讲的</span><br><span class="line"></span><br><span class="line">### 4、Redis 4.0 混合持久化</span><br><span class="line"></span><br><span class="line">重启 Redis 时，我们很少使用 rdb 来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 rdb 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。 Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。</span><br><span class="line"></span><br><span class="line">**AOF在重写**(aof文件里可能有太多没用指令，所以aof会定期根据内存的最新数据生成aof文件)**时将重写这一刻把内存进行rdb快照和增加修改内存数据的命令追加aof文件( aof文件是新的aof文件 )末尾，新的文件一开始不叫appendonly.aof，等到重写完新的AOF文件才会进行改名，原子的覆盖原有的AOF文件，完成新旧两个AOF文件的替换；**</span><br><span class="line"></span><br><span class="line">AOF根据配置规则在后台自动重写，也可以人为执行命令**bgrewriteaof**重写AOF。 于是在 Redis 重启的时候，可以**先加载 rdb 的内容**，然后再**重放增量 AOF 日志**就可以完全**替代**之前的 **AOF 全量文件重放**，重启效率因此大幅得到提升。</span><br><span class="line"></span><br><span class="line">开启混合持久化：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&#96;aof-use-rdb-preamble yes&#96;&#96;&#96;&#96;  </span><br><span class="line"></span><br><span class="line">配置：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&#96;auto-aof-rewrite-percentage 100&#96;&#96;&#96;&#96;：当容量一翻倍，aof就会重写</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&#96;auto-aof-rewrite-min-size 64mb&#96;&#96;&#96;&#96;：当容量超过64M时，才会执行上一条指令翻倍重写</span><br><span class="line"></span><br><span class="line">混合持久化aof文件结构</span><br><span class="line"></span><br><span class="line">![1581434824790](https:&#x2F;&#x2F;root-1258715043.cos.ap-guangzhou.myqcloud.com&#x2F;blog&#x2F;1581434824790.png)</span><br><span class="line"></span><br><span class="line">​                                </span><br><span class="line"></span><br><span class="line">### 三、缓存淘汰策略</span><br><span class="line"></span><br><span class="line">当 Redis 内存超出物理内存限制时，内存的数据会开始和磁盘产生频繁的交换 (swap)。交换会让 Redis 的性能急剧下降，对于访问量比较频繁的 Redis 来说，这样龟速的存取效率基本上等于不可用。</span><br><span class="line"></span><br><span class="line">在生产环境中我们是不允许 Redis 出现交换行为的，为了限制最大使用内存，Redis 提供了配置参数 maxmemory 来限制内存超出期望大小。 </span><br><span class="line"></span><br><span class="line">当实际内存超出 maxmemory 时，Redis 提供了几种可选策略 (maxmemory-policy) 来让用户自己决定该如何腾出新的空间以继续提供读写服务。</span><br><span class="line"></span><br><span class="line">  选择策略 &#96;&#96;&#96;&#96;maxmemory-policy XXXX</span><br></pre></td></tr></table></figure><p><strong>noeviction</strong> 不会继续服务写请求 (DEL 请求可以继续服务)，读请求可以继续进行。这样可以保证不会丢失数据，但是会让线上的业务不能持续进行。这是默认的淘汰策略。</p><p><strong>volatile-lru</strong>  在设置了过期时间的所有键中，选取最近最少使用的数据抛弃。 </p><p><strong>volatile-ttl</strong>  在设置了过期时间的所有键，抛弃存活时间最短的数据。 </p><p><strong>volatile-random</strong>   在设置了过期时间的所有键，随机抛弃。 </p><p><strong>allkeys-lru</strong>  在所有键中，选取最近最少使用的数据抛弃。 </p><p><strong>allkeys-random</strong>  在所有键中，随机抛弃。 </p><p>volatile-xxx 策略只会针对带过期时间的 key 进行淘汰，allkeys-xxx 策略会对所有的 key 进行淘汰。如果你只是拿 Redis 做缓存，那应该使用 allkeys-xxx，客户端写缓存时不必携带过期时间。如果你还想同时使用 Redis 的持久化功能，那就使用 volatile-xxx 策略，这样可以保留没有设置过期时间的 key，它们是永久的 key 不会被 LRU 算法淘汰。 </p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Redis--Redis基本介绍</title>
      <link href="/2019/06/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redi--Redis%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/06/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redi--Redis%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解Redis–Redis基本介绍"><a href="#深入理解Redis–Redis基本介绍" class="headerlink" title="深入理解Redis–Redis基本介绍"></a>深入理解Redis–Redis基本介绍</h1><h2 id="一、Redis简介"><a href="#一、Redis简介" class="headerlink" title="一、Redis简介"></a>一、Redis简介</h2><p>redis 简介<br> <strong>Redis</strong>是一个基于<strong>内存</strong>的高性能<strong>key-value</strong>数据库，所以读写速度非常快，因此 redis 被广泛应用于缓存方向。另外，redis 也经常用来做分布式锁。redis 提供了多种数据类型来支持不同的业务场景。除此之外，redis 支持事务 、持久化、LUA脚本、LRU驱动事件、多种集群方案。</p><h2 id="二、Redis与Mecache区别"><a href="#二、Redis与Mecache区别" class="headerlink" title="二、Redis与Mecache区别"></a>二、Redis与Mecache区别</h2><ol><li>持久性<ul><li>Redis可以将内存中的数据保持在<strong>磁盘</strong>中，<strong>重启</strong>的时候可以<strong>再次加载</strong>进行使用，保证数据的持久性</li><li>Memecache把数据全部存在<strong>内存</strong>之中，<strong>断电后会挂掉</strong>，数据不能超过内存大小。</li></ul></li><li>数据类型<ul><li>Redis支持的数据类型要丰富得多,Redis不仅仅支持简单的<strong>k/v</strong>类型的数据，同时还提供<strong>String，List,Set,Hash,Sorted Set</strong>数据结构的存储。</li><li>memcache支持<strong>简单数据类型</strong>，需要客户端自己处理复杂对象 </li></ul></li><li>存储键值大小<ul><li>Redis单个value的最大限制是<strong>1GB</strong></li><li>memcached只能保存<strong>1MB</strong>的数据 </li></ul></li></ol><h2 id="三、Redis基本数据类型"><a href="#三、Redis基本数据类型" class="headerlink" title="三、Redis基本数据类型"></a>三、Redis基本数据类型</h2><ol><li><p>String</p><p>字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。字符串结构使用非常广泛，一个常见的用途就是<strong>缓存用户信息</strong>。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程    </p></li><li><p>list</p><p>Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。 当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。</p><p>Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。</p></li><li><p>hash</p><p>Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的<strong>数组 + 链表</strong>二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。</p><p>hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对 用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。 hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。</p></li><li><p>set</p><p>Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值NULL。 当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。 </p></li><li><p>zset</p><p>zset 似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。</p><p>zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。 </p><p>zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。</p></li></ol><h2 id="四、Redis命令注意点"><a href="#四、Redis命令注意点" class="headerlink" title="四、Redis命令注意点"></a>四、Redis命令注意点</h2><p>尽量不要使用<strong>keys</strong>作为模糊查询redis中的键，而是使用<strong>scan</strong>。</p><p>理由：</p><ol><li>因为Redis是单线程，如果Redis的key有1000W的话，使用keys模糊查询查询的时间<strong>很高</strong>，线程<strong>阻塞</strong>，其他线程命令就无法执行，降低性能。</li><li>使用scan<strong>，通过<code>scan 0 match &lt;关键字&gt; count &lt;数量&gt;</code>，能够</strong>根据关键字<strong>获取</strong>规定数量<strong>的</strong>键值**。可以多次使用该命令迭代获取全部数据，每次命令执行时间短，不会过多的阻塞其他线程</li></ol>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Security笔记---基本原理及认证流程</title>
      <link href="/2019/05/23/Security%E7%AC%94%E8%AE%B0-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%8F%8A%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/05/23/Security%E7%AC%94%E8%AE%B0-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%8F%8A%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security笔记—基本原理及认证流程"><a href="#Spring-Security笔记—基本原理及认证流程" class="headerlink" title="Spring Security笔记—基本原理及认证流程"></a>Spring Security笔记—基本原理及认证流程</h1><h2 id="一、-基本原理"><a href="#一、-基本原理" class="headerlink" title="一、 基本原理"></a>一、 基本原理</h2><p><img src="https://img-blog.csdnimg.cn/20190820004415916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>黄色模块：SecurityContextPersistenceFilter是承接容器的session与spring security的重要filter，主要工作是从session中获取SecurityContext，然后放到上下文中，之后的filter大多依赖这个来获取登录态。其主要是通过HttpSessionSecurityContextRepository来存取的。</li><li>绿色模块：可选择添加的认证过滤器，用于验证用户登入信息是否正确，正确则保存在session,主要代码AbstractAuthenticationProcessingFilter抽象类的<code>SecurityContextHolder.getContext().setAuthentication(authResult)</code></li><li>橘色模块：FilterSecurityInterceptor 最后的大门，通过WebSecurityConfigurerAdapter或其实现类的<code>protected void configure(HttpSecurity http) throws Exception</code>的配置方法，来确定请求是否能访问</li><li>深蓝色模块：ExceptionTranslationFilter 用于获取橘色模块的异常信息，凡是橘色模块不通过的请求就会报错，被其接受</li></ul><h2 id="二、认证流程"><a href="#二、认证流程" class="headerlink" title="二、认证流程"></a>二、认证流程</h2><h3 id="1、-流程图"><a href="#1、-流程图" class="headerlink" title="1、 流程图"></a>1、 流程图</h3><p><img src="https://img-blog.csdnimg.cn/2019082000443247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2、认证源码大致方向"><a href="#2、认证源码大致方向" class="headerlink" title="2、认证源码大致方向"></a>2、认证源码大致方向</h3><ul><li>大致源码流程比较绕口，不过不是想象中麻烦，具体源码我会在2.3 源码详情追综，希望大伙能坚持一下</li><li>递进流程：用户提交登入信息 —》AbstractAuthenticationProcessingFilter 的 dofilter(…)方法 —》UsernamePasswordAuthenticationFilterr 的 attemptAuthentication(…)方法获取用户名和密码生成未认证的UsernamePasswordAuthenticationToken（是Authentication的子类） —》 ProviderManager（AuthenticatonManager的子类）的 authenticate(…) 方法接受UsernamePasswordAuthenticationToken参数  —》 AbstractUserDetailsAuthenticationProvider（AuthenticationProvider的子类）authenticate(….)的方法里面的的 retrieveUser(…)  —》DaoAuthenticationProvider的 retrieveUser(…) —-》CustomUserDetailService(自己写的，是UserDetailService的子类)的loadUserByUsername(…) 获取用户信息 </li><li>返回流程：CustomUserDetailService 的 loadUserByUsername(…) 获取用户信息后—》AbstractUserDetailsAuthenticationProvider 的 createSuccessAuthentication(…) 把未认证的UsernamePasswordAuthenticationToken变成已认证的状态 —》AbstractAuthenticationProcessingFilter的successfulAuthentication(…) 的SecurityContextHolder.getContext().setAuthentication(authResult)；把UsernamePasswordAuthenticationToken存到Session</li></ul><h3 id="3、-源码详解"><a href="#3、-源码详解" class="headerlink" title="3、 源码详解"></a>3、 源码详解</h3><blockquote><p>我会抠出 2.2 认证源码大致方向的代码里面关键部分并标序号注释讲解，建议大家用debug模式打点，亲自测试更好记忆</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"---------------AbstractAuthenticationProcessingFilter ---------------------------------"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">... 省略部分</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 调用UsernamePasswordAuthenticationFilterr(其子类)的attemptAuthentication(...)方法，跳到下个分割线处</span></span><br><span class="line">authResult = attemptAuthentication(request, response);</span><br><span class="line">           </span><br><span class="line"><span class="keyword">if</span> (authResult == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">sessionStrategy.onAuthentication(authResult, request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InternalAuthenticationServiceException failed) ...异常处理省略</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (continueChainBeforeSuccessfulAuthentication) &#123;</span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 16. 获取序号15的Authentication对象，调用该方法</span></span><br><span class="line">successfulAuthentication(request, response, chain, authResult);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, FilterChain chain, Authentication authResult)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Authentication success. Updating SecurityContextHolder to contain: "</span></span><br><span class="line">+ authResult);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 17. 获取序号15的Authentication对象，保存在session中</span></span><br><span class="line">SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line"></span><br><span class="line">rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fire event</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.eventPublisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">eventPublisher.publishEvent(<span class="keyword">new</span> InteractiveAuthenticationSuccessEvent(</span><br><span class="line">authResult, <span class="keyword">this</span>.getClass()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 18.成功处理</span></span><br><span class="line">successHandler.onAuthenticationSuccess(request, response, authResult);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"--------------------UsernamePasswordAuthenticationFilterr--------------------"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">           <span class="comment">// 请求方式必须是Post请求</span></span><br><span class="line"><span class="keyword">if</span> (postOnly &amp;&amp; !request.getMethod().equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(</span><br><span class="line"><span class="string">"Authentication method not supported: "</span> + request.getMethod());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String username = obtainUsername(request);   <span class="comment">// 获取用户名</span></span><br><span class="line">String password = obtainPassword(request);   <span class="comment">// 获取密码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">username = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">password = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">username = username.trim();</span><br><span class="line"><span class="comment">// 2. 生成UsernamePasswordAuthenticationToken（Authentication的子类）对象,跳到下个分割线处</span></span><br><span class="line">UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(</span><br><span class="line">username, password);</span><br><span class="line"></span><br><span class="line">setDetails(request, authRequest);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. this.getAuthenticationManager() 获取Authentication的实现类，即ProviderManager，跳到下个分割线处</span></span><br><span class="line">       <span class="comment">//  15.获取序号14的Authenticaition对象，返回上个分割线</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"--------------UsernamePasswordAuthenticationToken构造方法------------------------------"</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3. 因为刚登入所以是false，未认证状态, 回到上个分割线处</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">this</span>.principal = principal;</span><br><span class="line"><span class="keyword">this</span>.credentials = credentials;</span><br><span class="line">setAuthenticated(<span class="keyword">false</span>);   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"--------------------------------ProviderManager-----------------------------------"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">...省略部分</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 选择那种认证方式</span></span><br><span class="line"><span class="keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;</span><br><span class="line"><span class="keyword">if</span> (!provider.supports(toTest)) &#123;   <span class="comment">// 判断该认证用那种AuthenticationProvider的实现类实现</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (debug) &#123;</span><br><span class="line">logger.debug(<span class="string">"Authentication attempt using "</span></span><br><span class="line">+ provider.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 6. 找到相应的认证方式的子类后，即AbstractUserDetailsAuthenticationProvider类调用方法，跳到下个分割线处</span></span><br><span class="line">result = provider.authenticate(authentication);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 13.把序号12的UserDetails对象，赋值到result(Authentication)对象</span></span><br><span class="line">copyDetails(authentication, result);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AccountStatusException e) ...异常处理省略</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (eraseCredentialsAfterAuthentication</span><br><span class="line">&amp;&amp; (result <span class="keyword">instanceof</span> CredentialsContainer)) &#123;</span><br><span class="line"><span class="comment">// Authentication is complete. Remove credentials and other secret data</span></span><br><span class="line"><span class="comment">// from authentication</span></span><br><span class="line">((CredentialsContainer) result).eraseCredentials();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eventPublisher.publishAuthenticationSuccess(result);</span><br><span class="line">            <span class="comment">// 14. 序号13的result对象，到上个分割线</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"--------------------AbstractUserDetailsAuthenticationProvider----------------------"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">...省略部分</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">cacheWasUsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 7. 通过DaoAuthenticationProvider(即AbstractUserDetailsAuthenticationProvide的子类)实现类方法来获取UserDetail对象，跳到下个分割线处</span></span><br><span class="line">user = retrieveUser(username,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">                <span class="comment">// 11. 获取序号10的的UserDetails对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UsernameNotFoundException notFound) ... 异常处理省略</span><br><span class="line"></span><br><span class="line">Assert.notNull(user,</span><br><span class="line"><span class="string">"retrieveUser returned null - a violation of the interface contract"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// xxx.check(user) 用于验证用户信息是否合理,跟UserDetails构造方法有关，里面有一个为false，则报错不通过</span></span><br><span class="line">    <span class="comment">// User user = new User("zhangsan",  /// 用户名</span></span><br><span class="line">        <span class="comment">//      password,  // 密码</span></span><br><span class="line">        <span class="comment">//        true,  // 账号是否失效</span></span><br><span class="line">        <span class="comment">//        true,   // 账号是否过期</span></span><br><span class="line">        <span class="comment">//        true,  // 密码是否过期</span></span><br><span class="line">        <span class="comment">//        true,  // 账号是否冻结</span></span><br><span class="line">        <span class="comment">//        AuthorityUtils.commaSeparatedStringToAuthorityList("admin"));</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">preAuthenticationChecks.check(user);  </span><br><span class="line">additionalAuthenticationChecks(user,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AuthenticationException exception) ...异常处理省略</span><br><span class="line"></span><br><span class="line">postAuthenticationChecks.check(user);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!cacheWasUsed) &#123;</span><br><span class="line"><span class="keyword">this</span>.userCache.putUserInCache(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object principalToReturn = user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (forcePrincipalAsString) &#123;</span><br><span class="line">principalToReturn = user.getUsername();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 12. 返回序号11的的UserDetails对象, 通过createSuccessAuthentication使其变成已认证状态</span></span><br><span class="line"><span class="keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"------------------------------------DaoAuthenticationProvider--------------------------"</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> UserDetails <span class="title">retrieveUser</span><span class="params">(String username,</span></span></span><br><span class="line"><span class="function"><span class="params">UsernamePasswordAuthenticationToken authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">prepareTimingAttackProtection();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 8. 通过自定义UserDetailService的子类来获取UserDetails对象---用户信息,跳到下个分割线</span></span><br><span class="line">UserDetails loadedUser = <span class="keyword">this</span>.getUserDetailsService().loadUserByUsername(username);</span><br><span class="line"><span class="keyword">if</span> (loadedUser == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(</span><br><span class="line"><span class="string">"UserDetailsService returned null, which is an interface contract violation"</span>);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 10. 获取序号9的UserDetails对象，返回上个分割线</span></span><br><span class="line"><span class="keyword">return</span> loadedUser;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UsernameNotFoundException ex) ...异常处理省略</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">"----------------------CustomUserDetailService-----------------------------------"</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 9。获取用户信息，不连接数据库（虚拟账号），获取成功跳到上个分割线</span></span><br><span class="line">        log.info(<span class="string">"【CustomUserDetailService】根据用户名获取用户信息, username = &#123;&#125;"</span>, username);</span><br><span class="line">        String password = passwordEncoder.encode(<span class="string">"123"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>,  <span class="comment">/// 用户名</span></span><br><span class="line">                password,  <span class="comment">// 密码</span></span><br><span class="line">                <span class="keyword">true</span>,  <span class="comment">// 账号是否失效</span></span><br><span class="line">                <span class="keyword">true</span>,   <span class="comment">// 账号是否过期</span></span><br><span class="line">                <span class="keyword">true</span>,  <span class="comment">// 密码是否过期</span></span><br><span class="line">                <span class="keyword">true</span>,  <span class="comment">// 账号是否冻结</span></span><br><span class="line">                AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">"admin"</span>));</span><br><span class="line">        log.info(<span class="string">"【CustomUserDetailService】 password = &#123;&#125;"</span>, password);</span><br><span class="line">        log.info(<span class="string">"【CustomUserDetailService】获取User对象，user = &#123;&#125;"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务</title>
      <link href="/2019/05/13/MySQL%E4%BA%8B%E5%8A%A1/"/>
      <url>/2019/05/13/MySQL%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h1><h2 id="一、事务的四大特性（ACID）"><a href="#一、事务的四大特性（ACID）" class="headerlink" title="一、事务的四大特性（ACID）"></a>一、事务的四大特性（ACID）</h2><ol><li>原子性(Atomicity)：事务执行操作，要么全部成功，要么全部失败。事务失败会回滚事务开始前的状态</li><li>一致性（Consistency）: 事务前后数据的完整性必须保持一致。比如A转账B，那么A减少金额，B一定增加对应的金额</li><li>隔离性（Isolation）: 同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A转账给B，那么A转钱过程中，C无法转钱给A</li><li>持久性1（Durability）：事务一旦提交，数据库的数据改变时永久的</li></ol><h2 id="二、事务的四个隔离级别"><a href="#二、事务的四个隔离级别" class="headerlink" title="二、事务的四个隔离级别"></a>二、事务的四个隔离级别</h2><p>√: 可能出现  ×: 不会出现</p><table><thead><tr><th align="left">事务隔离级别（从低到高）</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="left">读未提交（read-uncommitted）</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">读已提交（read-committed）</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">可重复读（repeatable-read）</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="left">串行化（serializable）</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><ul><li>读未提交：事务A操作数据时，其他事务只允许对该行数据读取，虽然解决<strong>更新丢失</strong>问题。但是会照成<strong>脏读</strong>。<ul><li>什么是脏读：脏读就是事务A读取到事务B未提交的数据</li></ul></li><li>读已提交：事务A操作数据时，其他事务不允许对该行读写操作。这样能就解决<strong>脏读</strong>问题。但是会照成<strong>不可重复读</strong><ul><li>什么是不可重复读：事务A读取事务B操作前的数据和提交后的数据不一致</li></ul></li><li>可重复读：一个事务内，A读取数据，其他事务不允许对该行操作，这样多次读取的数据是一致的，解决了不可重复读的问题。但是会照成<strong>幻读</strong><ul><li>什么是幻读：事务A读取到事务B新增或者删除数据，导致数据个数不一致</li></ul></li><li>串行化：事务只能一个接着一个地执行，但不能并发执行。虽然能解决幻读问题。但是这种性能低，很少使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Restful风格设计</title>
      <link href="/2019/05/12/Restful%E9%A3%8E%E6%A0%BC%E8%AE%BE%E8%AE%A1/"/>
      <url>/2019/05/12/Restful%E9%A3%8E%E6%A0%BC%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Restful风格设计"><a href="#Restful风格设计" class="headerlink" title="Restful风格设计"></a>Restful风格设计</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="Restful-其实不是什么新技术或服务，而是一种对web进行一些标准和约束，是目前最流行的-API-设计规范，用于-Web-数据接口的设计"><a href="#Restful-其实不是什么新技术或服务，而是一种对web进行一些标准和约束，是目前最流行的-API-设计规范，用于-Web-数据接口的设计" class="headerlink" title="Restful 其实不是什么新技术或服务，而是一种对web进行一些标准和约束，是目前最流行的 API 设计规范，用于 Web 数据接口的设计"></a>Restful 其实不是什么新技术或服务，而是一种对web进行一些标准和约束，是目前最流行的 API 设计规范，用于 Web 数据接口的设计</h3><h2 id="二-为什么使用Restful风格"><a href="#二-为什么使用Restful风格" class="headerlink" title="二. 为什么使用Restful风格"></a>二. 为什么使用Restful风格</h2><h3 id="1-普通http请求，没有一种规范去约束，开发不只是一个人的事，无规律的http请求，时间一久连你自己都可能忘记何况拿给别人看呢"><a href="#1-普通http请求，没有一种规范去约束，开发不只是一个人的事，无规律的http请求，时间一久连你自己都可能忘记何况拿给别人看呢" class="headerlink" title="1. 普通http请求，没有一种规范去约束，开发不只是一个人的事，无规律的http请求，时间一久连你自己都可能忘记何况拿给别人看呢"></a>1. 普通http请求，没有一种规范去约束，开发不只是一个人的事，无规律的http请求，时间一久连你自己都可能忘记何况拿给别人看呢</h3><h3 id="2-，Restful请求具有自描述性，需要在形式上给人以直觉上的关联，使其一目了然，更好与其他人进行交，而且大大减少时间成本，要知道时间就是效率"><a href="#2-，Restful请求具有自描述性，需要在形式上给人以直觉上的关联，使其一目了然，更好与其他人进行交，而且大大减少时间成本，要知道时间就是效率" class="headerlink" title="2.，Restful请求具有自描述性，需要在形式上给人以直觉上的关联，使其一目了然，更好与其他人进行交，而且大大减少时间成本，要知道时间就是效率"></a>2.，Restful请求具有自描述性，需要在形式上给人以直觉上的关联，使其一目了然，更好与其他人进行交，而且大大减少时间成本，要知道时间就是效率</h3><h2 id="三、Restful的规范"><a href="#三、Restful的规范" class="headerlink" title="三、Restful的规范"></a>三、Restful的规范</h2><blockquote><p>Restful很简单，就像数学公式一样，知道一些要点就会灵活运用，切记死记硬背</p></blockquote><h3 id="1-Url链接模式：动词-宾语"><a href="#1-Url链接模式：动词-宾语" class="headerlink" title="1.Url链接模式：动词+宾语"></a>1.Url链接模式：动词+宾语</h3><h3 id="2-动词：代表请求方式"><a href="#2-动词：代表请求方式" class="headerlink" title="2. 动词：代表请求方式"></a>2. 动词：代表请求方式</h3><ul><li>GET：获取（Get）</li><li>POST：添加（Create）</li><li>PUT：更新（Update）</li><li>DELETE：删除（Delete）</li></ul><h3 id="3-宾语：必须是名词"><a href="#3-宾语：必须是名词" class="headerlink" title="3. 宾语：必须是名词"></a>3. 宾语：必须是名词</h3><ul><li><a href="http://localhost:8080/user" target="_blank" rel="noopener">http://localhost:8080/user</a>   user:就是名词，想用复数表示的话，就跟英语一样，直接在后面加s，即<a href="http://localhost:8080/users" target="_blank" rel="noopener">http://localhost:8080/users</a></li><li>尽量避免多级请求：<a href="http://localhost:8080/management/1/user/1" target="_blank" rel="noopener">http://localhost:8080/management/1/user/1</a> 应该为：<a href="http://localhost:8080/management/1?user=1" target="_blank" rel="noopener">http://localhost:8080/management/1?user=1</a> (具体意思和用处后面详解)</li></ul><h3 id="4根据上面两点组合起来"><a href="#4根据上面两点组合起来" class="headerlink" title="4根据上面两点组合起来"></a>4根据上面两点组合起来</h3><ul><li>GET：<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a> 获取用户id=1信息</li><li>POST：<a href="http://localhost:8080/user" target="_blank" rel="noopener">http://localhost:8080/user</a>  添加用户信息（post请求的参数无法查看）</li><li>PUT：<a href="http://localhost:8080/user" target="_blank" rel="noopener">http://localhost:8080/user</a>  更新用户信息 todo:待完成</li><li>DELETE：<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a> 删除用户id=1信息</li></ul><h3 id="5-测试用例-详细代码"><a href="#5-测试用例-详细代码" class="headerlink" title="5.测试用例,详细代码"></a>5.测试用例,详细代码</h3><blockquote><p>接下来之后显示跟本次主题相关的代码，详细代码请见：<a href="https://github.com/ChaASuc/restful-demo.git，" target="_blank" rel="noopener">https://github.com/ChaASuc/restful-demo.git，</a> 如果觉得可以就fork一下，谢谢。有问题请发言，鄙人会虚心听取<br>该项目使用SpringBoot + tkMapper + H2数据库模式，直接运行即可使用<br>里面封装后台开发通用代码，也可以看我的实际项目—-个人博客系统：<a href="https://github.com/ChaASuc/myblog.git，" target="_blank" rel="noopener">https://github.com/ChaASuc/myblog.git，</a> 该项目内容更全，技术点更多，希望对你有帮助</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190812220550723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="5-1、添加用户"><a href="#5-1、添加用户" class="headerlink" title="5.1、添加用户"></a>5.1、添加用户</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//请求方式：Post;</span></span><br><span class="line">  <span class="comment">//请求路径 http://localhost:8080/user;</span></span><br><span class="line">  <span class="comment">// 请求参数User对象</span></span><br><span class="line">  <span class="comment">// 含义：把user对象添加数据库中</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ResultVO <span class="title">insertUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">          @RequestBody User user</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span> </span>&#123;</span><br><span class="line">      userService.insertUser(user);</span><br><span class="line">      ResultVO.success();</span><br><span class="line">      <span class="keyword">return</span> ResultVO.success();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190812215824743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="5-2、获取用户信息"><a href="#5-2、获取用户信息" class="headerlink" title="5.2、获取用户信息"></a>5.2、获取用户信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求方式：Get;</span></span><br><span class="line"><span class="comment">//请求路径 http://localhost:8080/user/&#123;id&#125;;</span></span><br><span class="line"><span class="comment">// 含义：把根据id获取用户信息</span></span><br><span class="line"><span class="comment">// @PathVariable 获取链接&#123;&#125;里面的值：例如http://localhost:8080/user/1 即 id = 1</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultVO <span class="title">selectUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @PathVariable Long id</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    User user = userService.selectUser(id);</span><br><span class="line">    <span class="keyword">return</span> ResultVO.success(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190812223401709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求方式：Get;</span></span><br><span class="line"><span class="comment">//请求路径 http://localhost:8080/users;   users是复数形式</span></span><br><span class="line"><span class="comment">// 含义：获取所有用户信息</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultVO <span class="title">selectUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userService.selectUsers();</span><br><span class="line">    <span class="keyword">return</span> ResultVO.success(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190812223617463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="5-3、更新用户信息"><a href="#5-3、更新用户信息" class="headerlink" title="5.3、更新用户信息"></a>5.3、更新用户信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求方式：Put;</span></span><br><span class="line"><span class="comment">//请求路径 http://localhost:8080/user;</span></span><br><span class="line"><span class="comment">// 请求参数User对象 </span></span><br><span class="line"><span class="comment">// 含义：根据用户对象更新数据库</span></span><br><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultVO <span class="title">updateUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestBody User user</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    userService.updateUser(user);</span><br><span class="line">    <span class="keyword">return</span> ResultVO.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190812224405307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190812224442895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="5-4、删除用户信息"><a href="#5-4、删除用户信息" class="headerlink" title="5.4、删除用户信息"></a>5.4、删除用户信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//请求方式：Delete;</span></span><br><span class="line"><span class="comment">//请求路径 http://localhost:8080/user/&#123;id&#125;;</span></span><br><span class="line"><span class="comment">// 含义：根据id删除用户信息</span></span><br><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultVO <span class="title">deleteUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @PathVariable Long id</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    userService.deleteUser(id);</span><br><span class="line">    <span class="keyword">return</span> ResultVO.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190812224924274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190812225235496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE0Nzg4OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven生命周期</title>
      <link href="/2019/03/28/Maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2019/03/28/Maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h1><p>[toc]</p><h2 id="一、Maven生命周期的定义"><a href="#一、Maven生命周期的定义" class="headerlink" title="一、Maven生命周期的定义"></a>一、Maven生命周期的定义</h2><p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一。包括项目的<strong>清理，初始化，编译，测试，打包，集成测试，验证，部署和生成站点</strong>等构建步骤。</p><h2 id="二、Maven三套独立的生命周期"><a href="#二、Maven三套独立的生命周期" class="headerlink" title="二、Maven三套独立的生命周期"></a>二、Maven三套独立的生命周期</h2><ul><li>Maven提供了三套独立的生命周期：<strong>clean</strong>, <strong>default</strong> 和 <strong>site</strong> </li><li>clean生命周期：清理项目，删除前一次构建在target文件夹下生成的各个Jar包等，<ul><li>三个步骤<ul><li>pre-clean：执行一些清理前需要完成的工作</li><li>clean：清理上一次构建生成的文件</li><li>post-clean：执行一些清理后需要完成的工作</li></ul></li><li>举例：<ul><li><strong>mvn clean</strong> 就是在调用clean生命周期的clean阶段，实际执行了<strong>pre-clean</strong>和<strong>clean</strong>阶段</li></ul></li></ul></li><li>default生命周期：定义了真正构建项目中需要执行的所有步骤<ul><li>八个步骤<ul><li>validate：验证工程是否正确，所有需要的资源是否可用。</li><li>compile：编译项目的源代码。  </li><li>test：使用合适的单元测试框架来测试已编译的源代码。这些测试不需要已打包和布署。</li><li>Package：把已编译的代码打包成可发布的格式，比如jar。</li><li>integration-test：如有需要，将包处理和发布到一个能够进行集成测试的环境。</li><li>verify：运行所有检查，验证包是否有效且达到质量标准。</li><li>install：把包安装到maven本地仓库，可以被其他工程作为依赖来使用。</li><li>Deploy：在集成或者发布环境下执行，将最终版本的包拷贝到远程的repository，使得其他的开发者或者工程可以共享。</li></ul></li><li>举例：<ul><li>mvn test 就是在调用default生命周期的test阶段，实际执行了validate到test阶段之间的所有阶段</li><li>mvn clean package 就是在调用clean生命周期的clean阶段和default生命周期的package阶段，实际执行clean生命周期pre-clean和clean阶段和default生命周期validate到package阶段之间的所有阶段</li></ul></li></ul></li><li>site生命周期：是建立和发布项目站点，Maven可以给予pom所包含的信息，生成一个站点，方便团队交流和发布项目信息<ul><li>四个步骤<ul><li>pre- site </li><li>site：生成项目站点文档</li><li>post-site</li><li>site-deploy：将生成的项目站点发布到服务器上</li></ul></li><li>mvn clean deploy site-deploy 就是在调用clean生命周期的clean阶段、default生命周期的package阶段和site生命周期的site-deploy，实际执行了clean生命周期pre-clean到clean阶段、default生命周期validate到package阶段、site生命周期pre-site到site-deploy阶段</li></ul></li></ul><h2 id="三、Maven的插件"><a href="#三、Maven的插件" class="headerlink" title="三、Maven的插件"></a>三、Maven的插件</h2><blockquote><p> 生命周期的各个阶段都是抽象的概念，真正干活的是一个个的插件，插件是以独立的构件形式存在，我们将maven的生命周期的各个阶段与maven的插件进行绑定，当我们执行mvn命令其实就是在指挥着一个个的插件在干活</p></blockquote><ul><li><p>Maven生命周期与插件绑定</p><p><img src="https://img-blog.csdnimg.cn/20181107212356793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1ODI3ODQ1,size_16,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20181107212422710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1ODI3ODQ1,size_16,color_FFFFFF,t_70" alt="img"></p></li><li><p>举例：</p><ul><li><p>mvn clean package为例，执行clean生命周期pre-clean和clean阶段和default生命周期validate到package阶段之间的所有阶段。对应的插件执行过程（红框标识）</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210309163835172.png" alt="image-20210309163835172"></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动化配置原理</title>
      <link href="/2019/03/17/springboot%E8%87%AA%E5%8A%A8%E5%8C%96%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
      <url>/2019/03/17/springboot%E8%87%AA%E5%8A%A8%E5%8C%96%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot自动化配置原理"><a href="#SpringBoot自动化配置原理" class="headerlink" title="SpringBoot自动化配置原理"></a>SpringBoot自动化配置原理</h1><p>[toc]</p><blockquote><p>初识Spring Boot时我们就知道，Spring Boot有一个全局配置文件：application.properties或application.yml。</p><p>我们的各种属性都可以在这个文件中进行配置，最常配置的比如：server.port、logging.level.* 等等，然而我们实际用到的往往只是很少的一部分，那么这些属性是否有据可依呢？答案当然是肯定的，这些属性都可以在官方文档中查找到：</p><p><a href="https://docs.spring.io/spring-boot/docs/2.1.0.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.0.RELEASE/reference/htmlsingle/#common-application-properties</a></p><p>那么问题来了：这些配置是如何在Spring Boot项目中生效的呢？那么接下来，就需要聚焦本篇博客的主题：自动配置工作原理或者叫实现方式。</p></blockquote><h2 id="一、SpringBoot自动化配置原理"><a href="#一、SpringBoot自动化配置原理" class="headerlink" title="一、SpringBoot自动化配置原理"></a>一、SpringBoot自动化配置原理</h2><p>@SpringBootApplication是一个复合注解或派生注解，在@SpringBootApplication中有一个注解@EnableAutoConfiguration，就是开启自动配置的意思，其定义如下：</p><p> 这个注解也是一个派生注解，其中的关键功能由@Import提供，其导入的AutoConfigurationImportSelector</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210310222520340.png" alt="image-20210310222520340"></p><p>AutoConfigurationImportSelector调用selectImports()方法里面的<code>SpringFactoriesLoader.loadFactoryNames()</code>扫描所有jar包里面的META-IFA/spring.factories文件，将里面xxAutoConfiguration的类全限定名导入到容器中</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210310223126530.png" alt="image-20210310223126530"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210310221444482.png" alt="image-20210310221444482"></p><h2 id="二、自定义启动类"><a href="#二、自定义启动类" class="headerlink" title="二、自定义启动类"></a>二、自定义启动类</h2><ul><li><p>首先创建一个META-INF/spring.factories,设置自定义的配置类全限定类名</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span>.EnableAutoConfiguration=\</span><br><span class="line">cn<span class="selector-class">.deshen</span><span class="selector-class">.config</span>.FreemarkerAutoConfiguration</span><br></pre></td></tr></table></figure></li><li><p>FreemarkerAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreemarkerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringContextHolder <span class="title">springContextHolder</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        SpringContextHolder springContextHolder = <span class="keyword">new</span> SpringContextHolder();</span><br><span class="line">        springContextHolder.setApplicationContext(applicationContext);</span><br><span class="line">        <span class="keyword">return</span> springContextHolder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意点：@Configuration里面有个@Component注解，如果在启动类的目录及子目录下，那么会自动加载进入。而配置类不同目录的话，就需要配置自定义配置类的设置</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210311000145789.png" alt="image-20210311000145789"></p></li></ul><h2 id="三、在面试的时候，其实远远不需要回答的这么具体，你只需要这样回答："><a href="#三、在面试的时候，其实远远不需要回答的这么具体，你只需要这样回答：" class="headerlink" title="三、在面试的时候，其实远远不需要回答的这么具体，你只需要这样回答："></a>三、在面试的时候，其实远远不需要回答的这么具体，你只需要这样回答：</h2><p>​     @SpringBootApplication之所以能够实现自动化装配，其底层是通过AutoConfigurationImportSelector.selectImports()方法实现的。而selectImports()方法调用SpringFactoriesLoader.loadFactoryNames所有的spring.factories文件中EnableAutoConfiguration指定的值，将这些值自动导入到容器中生效</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2019/03/12/Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2019/03/12/Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><p>[toc]</p><h2 id="一、什么是反射？"><a href="#一、什么是反射？" class="headerlink" title="一、什么是反射？"></a>一、什么是反射？</h2><ul><li><p>反射实在程序时动态加载类并获取类的详细信息，从而操作类或对象属性和方法。</p></li><li><p>本质在JVM中获取class对象，在对class对象反编译，从而获取对象的各种信息</p></li><li><p>类加载与反射原理图</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210313232232665.png" alt="image-20210313232232665"></p></li></ul><h2 id="二、反射的优缺点"><a href="#二、反射的优缺点" class="headerlink" title="二、反射的优缺点"></a>二、反射的优缺点</h2><ul><li>优点<ul><li>增加程序的灵活性，避免程序写死在代码里<ul><li>因为Java是先编译后运行的语言，要想实例一个类，那么必须修改源代码重新编译。而反射不需要通过编译获取，比如反射可以通过配置文件里面的类信息实例化某类</li></ul></li></ul></li><li>缺点<ul><li>影响程序性能：反射包括一些动态类型，所以JVM无法对代码进行修改，因此效率比非反射要低得多。在性能方面要求高的代码最好不要使用反射</li><li>内部暴露：反射可以执行一些正常情况下不允许的操作（比如访问私有方法和属性），所以反射会导致出乎意料的事件发生——代码有功能上错误，破坏抽象性</li></ul></li></ul><h3 id="三、反射的用途"><a href="#三、反射的用途" class="headerlink" title="三、反射的用途"></a>三、反射的用途</h3><ul><li>框架的开发，比如Spring框架的配置化，读取XML文件配置的Bean进行加载。</li></ul><h2 id="四、反射常用的类"><a href="#四、反射常用的类" class="headerlink" title="四、反射常用的类"></a>四、反射常用的类</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.lang.Class;</span><br><span class="line"></span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Constructor</span>;</span></span><br><span class="line"></span><br><span class="line">Java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Method</span>;</span></span><br><span class="line"></span><br><span class="line">Java.lang.reflect.Modifier;</span><br></pre></td></tr></table></figure><h2 id="五、反射的基本使用"><a href="#五、反射的基本使用" class="headerlink" title="五、反射的基本使用"></a>五、反射的基本使用</h2><ul><li><p>获取Class</p><ul><li><p>调用对象的getClass方法</p></li><li><p>调用类的静态属性 class属性</p></li><li><p>调用Class的静态方法forName(“类全限定名“)(最常用)</p></li><li><p>三种比较判断</p><ul><li>三种方式中，常用第三种，第一种对象都有了还要反射干什么，第二种需要导入类包，依赖太强，不导包就抛编译错误。一般都使用第三种，一个字符串可以传入也可以写在配置文件中等多种方法。    </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类的三种方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClassTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、调用对象的getClass方法</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">12</span>);</span><br><span class="line">        Class&lt;? extends Person&gt; personClass1 = person.getClass();</span><br><span class="line">        System.out.println(personClass1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、调用类的静态属性 class属性</span></span><br><span class="line">        Class&lt;Person&gt; personClass2 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(personClass2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、调用Class的静态方法forName("类全限定名“)</span></span><br><span class="line">        Class&lt;?&gt; personClass3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            personClass3 = Class.forName(<span class="string">"cn.deschen.features.jdk8.cn.deschen.reflect.Person"</span>);</span><br><span class="line">            System.out.println(personClass3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在运行期间，一个类，只有一个Class对象产生，所以打印结果都是true；</span></span><br><span class="line">        System.out.println(personClass1 == personClass2);</span><br><span class="line">        System.out.println(personClass2 == personClass3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>判断是否为某个类的示例</p><ul><li>一般的，我们使用instanceof 关键字来判断是否为某个类的实例。同时我们也可以借助反射中Class对象的isInstance()方法来判断时候为某个类的实例，他是一个native方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断是否为某类实例</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isInstanceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Person person = <span class="keyword">new</span> Person();</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 1、使用instanceof判断</span></span><br><span class="line">      System.out.println(person <span class="keyword">instanceof</span> Person);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 2、使用类.isInstance(实例)</span></span><br><span class="line">      System.out.println(Person<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">person</span>))</span>;</span><br><span class="line">      System.out.println(ReflectCase<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">person</span>))</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建实例：通过反射来生成对象主要有两种方法</p><ul><li>使用Class对象的newInstance()方法来创建Class对象对应类的实例。</li><li>先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建对象，这种方法可以用指定的构造器构造类的实例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、使用Class对象的newInstance()方法来创建Class对象对应类的实例</span></span><br><span class="line">        Person person1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            person1 = Person<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(person1.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建对象，这种方法可以用指定的构造器构造类的实例。</span></span><br><span class="line">        Person person2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;Person&gt; constructor = Person<span class="class">.<span class="keyword">class</span>.<span class="title">getConstructor</span>()</span>;</span><br><span class="line">            person2 = constructor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exceptionalness e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(person2.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jdk1.8部署</title>
      <link href="/2019/03/01/jdk1.8%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/03/01/jdk1.8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK1-8部署-CentOS7-X"><a href="#JDK1-8部署-CentOS7-X" class="headerlink" title="JDK1.8部署-CentOS7.X"></a>JDK1.8部署-CentOS7.X</h1><h2 id="一、下载和安装JDK1-8"><a href="#一、下载和安装JDK1-8" class="headerlink" title="一、下载和安装JDK1.8"></a>一、下载和安装JDK1.8</h2><ul><li><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">下载地址</a></li><li>解压：<code>tar -zxvf jdk-8u261-linux-x64.tar.gz -C /usr/local</code></li></ul><h2 id="二、设置环境遍量"><a href="#二、设置环境遍量" class="headerlink" title="二、设置环境遍量"></a>二、设置环境遍量</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">编辑：vim /etc/profile</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/local/jdk1.8.0_261</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JRE_HOME</span>=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$&#123;JAVA_HOME&#125;/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:$PATH</span><br><span class="line">使环境变量生效：source /etc/profile</span><br><span class="line">添加软链接：ln -s /usr/local/jdk1.8.0_261/bin/java /usr/bin/java</span><br><span class="line">检查：java -version</span><br><span class="line">出现这些表示成功：java version <span class="string">"1.8.0_261"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_261-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit<span class="built_in"> Server </span>VM (build 25.261-b12, mixed mode)``</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot部署-Centos7.X</title>
      <link href="/2019/02/28/SpringBoot%E9%83%A8%E7%BD%B2-Centos7-X/"/>
      <url>/2019/02/28/SpringBoot%E9%83%A8%E7%BD%B2-Centos7-X/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot部署-Centos7-X"><a href="#SpringBoot部署-Centos7-X" class="headerlink" title="SpringBoot部署-Centos7.X"></a>SpringBoot部署-Centos7.X</h1><h2 id="一、pom文件引入插件"><a href="#一、pom文件引入插件" class="headerlink" title="一、pom文件引入插件"></a>一、pom文件引入插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、打包"><a href="#二、打包" class="headerlink" title="二、打包"></a>二、打包</h2><ul><li><p>第一种：使用命令行打包</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -<span class="module-access"><span class="module"><span class="identifier">Dmaven</span>.</span></span>test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>第二种：使用idea快速打包</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210228201334574.png" alt="image-20210228201334574"></p></li></ul><h2 id="三、部署运行"><a href="#三、部署运行" class="headerlink" title="三、部署运行"></a>三、部署运行</h2><ul><li><p>直接运行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">java </span>-<span class="keyword">jar </span>xx.<span class="keyword">jar</span></span><br></pre></td></tr></table></figure></li><li><p>推荐使用：后台运行+打印日志</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nohup java <span class="params">-jar</span> XX.jar &gt; /<span class="built_in">data</span>/XX.<span class="keyword">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br><span class="line">介绍</span><br><span class="line">上面的<span class="number">2</span> 和 <span class="number">1</span> 的意思如下:</span><br><span class="line"><span class="number">0</span> 标准输入（一般是键盘）</span><br><span class="line"><span class="number">1</span> 标准输出（一般是显示屏，是用户终端控制台）</span><br><span class="line"><span class="number">2</span> 标准错误（错误信息输出）</span><br><span class="line">举例</span><br><span class="line">（<span class="number">1</span>）nohup java <span class="params">-jar</span> xxx.jar &gt;/<span class="built_in">data</span>/xx.<span class="keyword">log</span> <span class="number">2</span>&gt;/<span class="built_in">data</span>/XX_err.<span class="keyword">log</span> &amp;</span><br><span class="line">解释：标准日志输出到/<span class="built_in">data</span>/xx.<span class="keyword">log</span>文件，错误日志输出到/<span class="built_in">data</span>/XX_err.<span class="keyword">log</span>文件。</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）nohup java <span class="params">-jar</span> xxx.jar &gt;/<span class="built_in">data</span>/xx.<span class="keyword">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br><span class="line">解释：标准日志输出到/<span class="built_in">data</span>/xx.<span class="keyword">log</span>文件，错误日志重定向也输出到/<span class="built_in">data</span>/xx.<span class="keyword">log</span>文件。</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）nohup java <span class="params">-jar</span> xxx.jar &gt;/dev/<span class="built_in">null</span> <span class="number">2</span>&gt;/<span class="built_in">data</span>/xx_err.<span class="keyword">log</span> &amp;</span><br><span class="line">解释：标准日志输出到/dev/<span class="built_in">null</span>，也就是不输出标准日志，错误日志输出到/<span class="built_in">data</span>/xx_err.<span class="keyword">log</span>文件</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx工作原理讲解</title>
      <link href="/2019/02/15/Nginx%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/02/15/Nginx%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx工作原理讲解"><a href="#Nginx工作原理讲解" class="headerlink" title="Nginx工作原理讲解"></a>Nginx工作原理讲解</h1><p>[toc]</p><h2 id="一、Nginx工作过程"><a href="#一、Nginx工作过程" class="headerlink" title="一、Nginx工作过程"></a>一、Nginx工作过程</h2><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20210309210052409.png" alt="image-20210309210052409"></p><ol><li>在nginx启动后，会有一个master进程和多个worker进程，master进程主要用来管理worker进程，包括：接受信号，将信号分发给worker进程，监听worker进程工作状态，当worker进程退出时(非正常)，启动新的worker进程。基本的网络事件会交给worker进程处理。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的 。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。 worker进程的个数是可以设置的，一般我们会设置与机器cpu核数一致，这里面的原因与nginx的进程模型以及事件处理模型是分不开的 。</li><li>当master接收到重新加载的信号会怎么处理(./nginx -s reload)?，master会重新加载配置文件，然后启动新的进程，使用的新的worker进程来接受请求，并告诉老的worker进程他们可以退休了，老的worker进程将不会接受新的，老的worker进程处理完手中正在处理的请求就会退出。</li><li>worker进程是如何处理用户的请求呢？首先master会根据配置文件生成一个监听相应端口的socket，然后创建多个worker进程，这样每个worker就可以接受从socket过来的消息。当一个连接过来的时候，每一个worker都能接收到通知，但是只有一个worker能和这个连接建立关系，其他的worker都会连接失败，这就是所谓的惊群现象。为了解决这个问题，nginx提供一个共享锁accept_mutex，有了这个共享锁后，就会只有一个worker去接收这个连接。当一个worker进程在accept这个连接之后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后才断开连接，这样一个完整的请求就是这样的了。</li></ol><h2 id="二、nginx的事件驱动机制"><a href="#二、nginx的事件驱动机制" class="headerlink" title="二、nginx的事件驱动机制"></a>二、nginx的事件驱动机制</h2><ul><li>为什么几个worker进程能同时接收上万的请求呢？这是因为nginx事件处理机制是异步非阻塞的。nginx将一个请求划分为多个阶段来异步处理模块，每个阶段只是处理请求的一部分，如果请求的这一部分发生阻塞，nginx不会等待，它会处理其他的请求的某一部分。</li><li>与传统web服务不同之处<ul><li>传统web服务器的每个事件消费者独占一个进程(线程)资源,这种情况对于用户规模较小的情况来说,用户响应速度快,但是当并发规模达到数十万上百万的时候,由于线程(进程)数目过多,会频繁的切换,而且当线程阻塞的时候会进行睡眠,也会造成资源的浪费,这样服务器就会产生瓶颈.</li><li>nginx服务器采用的事件驱动机制不同,他不会为每个消费事件创建一个进程或线程,这样就不会产生由于进程间频繁切换占用cpu而产生的瓶颈,而且nginx不会让事件阻塞,即采用无阻塞事件驱动模型,这样就不会因为事件阻塞使进程睡眠而造成的资源浪费.</li></ul></li></ul><h2 id="三、epoll库"><a href="#三、epoll库" class="headerlink" title="三、epoll库"></a>三、epoll库</h2><ul><li>epoll库是Nginx服务器支持的高性能事件驱动库之一。它是公认的最好的事件驱动模型。和poll库及select库有很大的区别。</li><li>poll和select都是创建一个待处理事件列表，然后把这个列表发给内核，返回的时候，再去轮询检查这个列表。以判断这个事件是否发生。在描述符太多的情况下，就会明显效率低下了。</li><li>epoll是这么做的，它把事件描述符列表的管理交给内核复制。一旦有某个事件发生，内核将发生事件的事件描述符交给Nginx的进程，而不是将整个事件描述符列表交给进程，让进程去轮询具体是哪个描述符。epoll()避免了轮询整个事件描述符列表。所以显得更高效。</li><li>epoll库的基本步骤：<ul><li>epoll库通过相关调用通知内核创建一个有N个描述符的事件列表，然后给这个事件列表设置自己关心的事件。并把它添加到内核中。在具体的代码中还可以实现对相关调用的事件描述符列表进行修改和删除。</li><li>一旦设置完成就一直等待内核通知事件发生了，某一事件发生后，内核就将发生事件的描述符给epoll库，epoll库去处理事件。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx部署-CentOS7.x</title>
      <link href="/2019/02/13/Nginx-CentOS7.x/"/>
      <url>/2019/02/13/Nginx-CentOS7.x/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx部署-CentOS7-x"><a href="#Nginx部署-CentOS7-x" class="headerlink" title="Nginx部署-CentOS7.x"></a>Nginx部署-CentOS7.x</h1><p>[toc]</p><h2 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h2><ol><li><p>linux 内核2.6及以上版本:<br>只有2.6之后才支持epool ，在此之前使用select或pool多路复用的IO模型，无法解决高并发压力的问题。通过命令uname -a 即可查看。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看 linux 内核</span></span><br><span class="line">uname -<span class="keyword">a</span></span><br></pre></td></tr></table></figure></li><li><p>依赖安装</p><ul><li>GCC编译器<br>GCC（GNU Compiler Collection）可用来编译C语言程序。Nginx不会直接提供二进制可执行程序,只能下载源码进行编译。</li><li>PCRE库<br>PCRE（Perl Compatible Regular Expressions，Perl兼容正则表达式）是由Philip Hazel开发的函数库，目前为很多软件所使用，该库支持正则表达式。</li><li>zlib库<br>zlib库用于对HTTP包的内容做gzip格式的压缩，如果我们在nginx.conf里配置了gzip on，并指定对于某些类型（content-type）的HTTP响应使用gzip来进行压缩以减少网络传输量。</li><li>OpenSSL开发库<br>如果我们的服务器不只是要支持HTTP，还需要在更安全的SSL协议上传输HTTP，那么就需要拥有OpenSSL了。另外，如果我们想使用MD5、SHA1等散列函数，那么也需要安装它。<br>上面几个库都是Nginx 基础功能所必需的，为简单起见我们可以通过yum 命令统一安装。</li></ul><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make <span class="literal">zlib</span> <span class="literal">zlib</span>-devel gcc-c++ libtool openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、下载和安装"><a href="#二、下载和安装" class="headerlink" title="二、下载和安装"></a>二、下载和安装</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">下载：wget https:<span class="string">//nginx.org/download/nginx-1.8.1.tar.gz</span></span><br><span class="line">解压：tar -zxvf nginx-1.8.1.tar.gz -C <span class="string">/usr/local/</span></span><br><span class="line">创建nginx安装目录；mkdir <span class="string">/usr/local/nginx</span></span><br><span class="line">跳转到解压nginx目录：<span class="keyword">cd</span> <span class="string">/usr/local/nginx-1.8.1/</span></span><br><span class="line">配置nginx安装到那个目录：<span class="string">./configure</span> <span class="params">--user=nginx</span> <span class="params">--group=nginx</span> <span class="params">--prefix=/usr/local/nginx</span> <span class="params">--with-http_stub_status_module</span> <span class="params">--with-http_ssl_module</span></span><br><span class="line">安装：make&amp;make install</span><br><span class="line">注意点：</span><br><span class="line">为了安全，要配置nginx组及nginx用户，nginx只允许该用户启动。也可以掉 <span class="params">--user=nginx</span> <span class="params">--group=nginx</span>，改为root启动</span><br></pre></td></tr></table></figure><h2 id="三、nginx操作命令"><a href="#三、nginx操作命令" class="headerlink" title="三、nginx操作命令"></a>三、nginx操作命令</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">跳转nginx安装目录：<span class="keyword">cd</span> <span class="string">/usr/local/nginx</span></span><br><span class="line">启动：<span class="string">./sbin/nginx</span>     <span class="comment"># 启动后，输入服务器ip，出现显示nginx字符串的网页就代表启动成功               </span></span><br><span class="line">重启：<span class="string">./sbin/nginx</span> -s <span class="keyword">reload</span></span><br><span class="line">停止：</span><br><span class="line">ps -ef|grep nginx</span><br><span class="line">kill -9 进程号</span><br><span class="line">验证配置文件：<span class="string">./sbin/nginx</span> -t</span><br></pre></td></tr></table></figure><h2 id="四、yum安装nginx及使用"><a href="#四、yum安装nginx及使用" class="headerlink" title="四、yum安装nginx及使用"></a>四、yum安装nginx及使用</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装: yum install nginx</span><br><span class="line">启动：nginx</span><br><span class="line">重启：nginx -s <span class="keyword">reload</span></span><br><span class="line">停止：nginx -s stop</span><br><span class="line">配置文件路径：<span class="string">/etc/nginx</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-阅读与评论功能</title>
      <link href="/2019/02/13/Hexo-%E9%98%85%E8%AF%BB%E4%B8%8E%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/02/13/Hexo-%E9%98%85%E8%AF%BB%E4%B8%8E%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-阅读与评论功能"><a href="#Hexo-阅读与评论功能" class="headerlink" title="Hexo-阅读与评论功能"></a>Hexo-阅读与评论功能</h1><blockquote><p>Hexo支持集成Valine的实现阅读和评论功能</p><p>官方地址：<a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a></p></blockquote><h2 id="一、LeanCloud相关配置"><a href="#一、LeanCloud相关配置" class="headerlink" title="一、LeanCloud相关配置"></a>一、LeanCloud相关配置</h2><ul><li><p><a href="https://console.leancloud.cn/login?from=%2Fapps" target="_blank" rel="noopener">注册</a>，进入控制台创建应用</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220127135444950.png" alt="image-20220127135444950"></p></li><li><p>进入刚刚创建的应用=》设置=》应用凭证获取AppID 和 AppKey</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220127135715504.png" alt="image-20220127135715504"></p></li><li><p>数据存储=》结构化数据=》创建class，命名：Counter（hexo规定的）并设置为无限制状态。主要用于存储博客的阅读量，充当数据库的作用</p><ul><li>PS：Comment充当记录评论的作用</li></ul><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220127140905321.png" alt="image-20220127140905321"></p></li></ul><h2 id="二、Hexo集成配置"><a href="#二、Hexo集成配置" class="headerlink" title="二、Hexo集成配置"></a>二、Hexo集成配置</h2><ul><li><p>集成对应依赖</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-leancloud-counter-<span class="keyword">security</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-leancloud-counter-<span class="keyword">security</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">根目录配置文件_config.yml</span></span><br><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line">  <span class="attr">enable_sync:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">主题配置文件_config.yml</span></span><br><span class="line"><span class="comment">## 阅读配置</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">LeanCloud的AppID</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">LeanCloud的AppKey</span></span><br><span class="line">  <span class="comment"># 解决阅读次数Counter not initialized! More info at console err msg异常。针对域名是Https,而valine试用Http</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">betterPerformance:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">## 评论配置</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 启动</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="string">LeanCloud的AppID</span></span><br><span class="line">  <span class="attr">appkey:</span>  <span class="string">LeanCloud的AppKey</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">请发表有价值的评论，共同维护学习氛围</span>   <span class="comment"># 评论开头显示</span></span><br></pre></td></tr></table></figure></li><li><p>启动并运行，效果如下图</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  清除</span><br><span class="line">hexo g -d  构建并发布</span><br><span class="line">hexo<span class="built_in"> server </span>启动</span><br></pre></td></tr></table></figure><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220127143114155.png" alt="image-20220127143114155"></p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220127143252645.png" alt="image-20220127143252645"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMq——CentOS7.X部署</title>
      <link href="/2019/02/03/rabbitmq%E2%80%94%E2%80%94CentOS7.x%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/02/03/rabbitmq%E2%80%94%E2%80%94CentOS7.x%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMq——CentOS7-x部署"><a href="#RabbitMq——CentOS7-x部署" class="headerlink" title="RabbitMq——CentOS7.x部署"></a>RabbitMq——CentOS7.x部署</h1><p>[toc]</p><h2 id="一、下载需要的资源"><a href="#一、下载需要的资源" class="headerlink" title="一、下载需要的资源"></a>一、下载需要的资源</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> gcc glibc-devel make ncurses-devel openssl-devel xmlto</span><br><span class="line"></span><br><span class="line">yum <span class="keyword">install</span> perl</span><br><span class="line"></span><br><span class="line">wget -c <span class="keyword">http</span>://erlang.org/download/otp_src_19<span class="number">.3</span>.tar.gz</span><br><span class="line"></span><br><span class="line">wget -c <span class="keyword">http</span>://www.rabbitmq.com/releases/rabbitmq-<span class="keyword">server</span>/v3<span class="number">.6</span><span class="number">.15</span>/rabbitmq-<span class="keyword">server</span>-generic-unix<span class="number">-3.7</span><span class="number">.5</span>.tar.xz</span><br></pre></td></tr></table></figure><h2 id="二、安装erlang"><a href="#二、安装erlang" class="headerlink" title="二、安装erlang"></a>二、安装erlang</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">解压：tar -zxvf otp_src_19.3.tar.gz -C /usr/local/</span><br><span class="line">新建erlang文件夹，用于otp安装的目录：mkdir /usr/local/erlang</span><br><span class="line">设置otp安装目录命令：./configure <span class="attribute">--prefix</span>=/usr/local/erlang</span><br><span class="line">安装：cd /usr/local/otp_src_19.3</span><br><span class="line"> make &amp;&amp; make install</span><br><span class="line">设置配置文件：vi /etc/profile</span><br><span class="line">            添加<span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:/usr/local/erlang/bin　</span><br><span class="line">更新配置：source /etc/profile</span><br><span class="line">查看生效：erl  退出halt().</span><br></pre></td></tr></table></figure><h2 id="三、安装RabbitMQ"><a href="#三、安装RabbitMQ" class="headerlink" title="三、安装RabbitMQ"></a>三、安装RabbitMQ</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">解压：tar -xvf rabbitmq-<span class="keyword">server</span>-generic-unix<span class="number">-3.7</span><span class="number">.5</span>.tar.xz -C /usr/<span class="keyword">local</span>/</span><br><span class="line">设置配置文件：vi /etc/profile</span><br><span class="line">            添加export <span class="type">PATH</span>=$<span class="type">PATH</span>:/usr/<span class="keyword">local</span>/rabbitmq_server<span class="number">-3.7</span><span class="number">.5</span>/sbin</span><br><span class="line">更新配置：source /etc/profile</span><br><span class="line">启动插件：rabbitmq-plugins <span class="keyword">enable</span> rabbitmq_management</span><br><span class="line">添加用户: ./rabbitmqctl add_user <span class="keyword">admin</span> <span class="keyword">admin</span>　　//<span class="keyword">admin</span>是用户名， <span class="keyword">admin</span>是用户密码</span><br><span class="line">添加角色：./rabbitmqctl set_user_tags <span class="keyword">admin</span> administrator  -<span class="keyword">admin</span>用户名</span><br><span class="line">添加权限：./rabbitmqctl set_permissions -p "/" <span class="keyword">admin</span> ".*" ".*" ".*"</span><br><span class="line">启动：./rabbitmq-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><h2 id="四、启动关闭"><a href="#四、启动关闭" class="headerlink" title="四、启动关闭"></a>四、启动关闭</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">后台启动: <span class="string">./rabbitmq-server</span> -detached</span><br><span class="line">关闭：<span class="string">./rabbitmqctl</span> stop</span><br><span class="line">状态：<span class="string">./rabbitmqctl</span> status</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RabbitMq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7.X 修改YUM镜像源</title>
      <link href="/2019/02/01/Centos7-X%E4%BF%AE%E6%94%B9YUM%E9%95%9C%E5%83%8F%E6%BA%90/"/>
      <url>/2019/02/01/Centos7-X%E4%BF%AE%E6%94%B9YUM%E9%95%9C%E5%83%8F%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos-7-X-修改YUM镜像源"><a href="#Centos-7-X-修改YUM镜像源" class="headerlink" title="Centos 7.X 修改YUM镜像源"></a>Centos 7.X 修改YUM镜像源</h1><blockquote><p>因为我们在服务器下载东西时，有时会遇到下载地址连接失败或下载慢等问题，这时就需要我们改其镜像源地址</p></blockquote><h2 id="一、安装wget"><a href="#一、安装wget" class="headerlink" title="一、安装wget"></a>一、安装wget</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y wget</span><br></pre></td></tr></table></figure><h2 id="二、进入源目录"><a href="#二、进入源目录" class="headerlink" title="二、进入源目录"></a>二、进入源目录</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/etc/yum.repos.d/</span></span><br></pre></td></tr></table></figure><h2 id="三、创建备份文件夹，用于把默认源备份"><a href="#三、创建备份文件夹，用于把默认源备份" class="headerlink" title="三、创建备份文件夹，用于把默认源备份"></a>三、创建备份文件夹，用于把默认源备份</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mkdir</span> <span class="string">backup</span></span><br><span class="line"><span class="attr">mv</span> <span class="string">C* backup/</span></span><br></pre></td></tr></table></figure><h2 id="四、下载阿里云yum源"><a href="#四、下载阿里云yum源" class="headerlink" title="四、下载阿里云yum源"></a>四、下载阿里云yum源</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/CenOS-Base.repo https:/</span><span class="regexp">/mirrors.aliyun.com/</span>repo<span class="regexp">/Centos-7.repo</span></span><br></pre></td></tr></table></figure><h2 id="五、清除旧缓存"><a href="#五、清除旧缓存" class="headerlink" title="五、清除旧缓存"></a>五、清除旧缓存</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean <span class="keyword">all</span></span><br></pre></td></tr></table></figure><h2 id="六、创建新缓存"><a href="#六、创建新缓存" class="headerlink" title="六、创建新缓存"></a>六、创建新缓存</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum makecache</span></span><br></pre></td></tr></table></figure><h2 id="七、更新yum"><a href="#七、更新yum" class="headerlink" title="七、更新yum"></a>七、更新yum</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum update -y</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Exception与Error的区别</title>
      <link href="/2019/01/14/Exception%E4%B8%8EError%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/01/14/Exception%E4%B8%8EError%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Java-异常的基本组成"><a href="#一、Java-异常的基本组成" class="headerlink" title="一、Java 异常的基本组成"></a>一、Java 异常的基本组成</h2><ul><li><p><strong>Exception</strong> 与 <strong>Error</strong> 都是继承了 <strong>Throwable</strong> 类，在Java中只有Throwable类型的实例才可以被<strong>抛出（throw）</strong>或者<strong>捕获（catch）</strong></p></li><li><p><strong>Error</strong> 指的是正常情况下，不太可能出现的问题。绝大多问题往往导致程序处于<strong>非正常的、不可恢复</strong>状态，因此无需捕获。比如：<strong>OutOfMemoryError</strong></p></li><li><p><strong>Exception</strong> 指的是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应处理。其分为<strong>可检查异常</strong>和<strong>不可检查异常</strong></p><ul><li>可检查异常：在源代码里必须<strong>显式</strong>地进行捕获处理，这是<strong>编译期</strong>检查的一部分。比如：<strong>IOException</strong>, 使用文件流常用的异常</li><li>不可检查异常：运行期异常，通常是可以编码避免的<strong>逻辑错误</strong>。比如：<strong>RuntimeException</strong>、<strong>NullPointException(NPE)</strong></li></ul></li><li><p>异常结果图</p><p><img src="https://deschen-storage.oss-cn-guangzhou.aliyuncs.com/image-20220415151418580.png" alt="image-20220415151418580"></p></li></ul><h2 id="二、Java-异常处理"><a href="#二、Java-异常处理" class="headerlink" title="二、Java 异常处理"></a>二、Java 异常处理</h2><ul><li><p>JDK1.7 之前，采用try-catch-finally处理</p><ul><li>try{ 业务代码 }</li><li>catch{ 捕获异常处理 }</li><li>finally{ 资源的回收工作 }</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK1.7之前的异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tryCatchFinally</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String filePath = System.getProperty(<span class="string">"user.dir"</span>) + <span class="string">"/src/main/resources/exception/chapter01.txt"</span>;</span><br><span class="line">    BufferedReader bReader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filePath));</span><br><span class="line">        bReader.lines().forEach(System.out::println);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        log.error(<span class="string">"读取文件异常："</span> + e.getMessage());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == bReader) &#123;</span><br><span class="line">                bReader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"关闭文件流异常："</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JDK1.7 之后，try-with-resources处理</p><ul><li>try{ 业务代码 }</li><li>catch{ 捕获异常处理 }</li><li>跟try-catch-finally的区别，在编译时期，会自动生成相应的处理逻辑，比如，自动按照约定俗成close那些<strong>try代码块中扩展了AutoCloseable或者Closeable的对象</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK1.7之后的异常处理 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 在编译时期，会自动生成相应的处理逻辑。比如：自动按照约定俗成close那些扩展了AutoCloseable或者Closeable的对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tryWithResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String filePath = System.getProperty(<span class="string">"user.dir"</span>) + <span class="string">"/src/main/resources/exception/chapter01.txt"</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span>(FileReader fReader = <span class="keyword">new</span> FileReader(filePath);</span><br><span class="line">        BufferedReader bReader = <span class="keyword">new</span> BufferedReader(fReader)) &#123;</span><br><span class="line">        bReader.lines().forEach(System.out::println);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">"读取文件异常："</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、如何正确的使用异常及处理"><a href="#三、如何正确的使用异常及处理" class="headerlink" title="三、如何正确的使用异常及处理"></a>三、如何正确的使用异常及处理</h2><ul><li>尽量不要捕获类似Exception这样的通用异常，而是应该捕获特定异常，因为Exception的异常不能够体现尽量多的信息</li><li>不要生吞异常。这是异常处理中要特别注意的事情，因为很可能会导致非常难以诊断的诡异情况</li><li>建议仅捕获有必要的代码段，尽量不要一个大的try包住整段的代码。因为每次throw一个Exception实例，都会对当时的栈进行快照，这是一个相对比较重的操作，会产生额外的开销</li></ul><h2 id="四、NoClassDefFoundError-和ClassNotFoundException的区别"><a href="#四、NoClassDefFoundError-和ClassNotFoundException的区别" class="headerlink" title="四、NoClassDefFoundError 和ClassNotFoundException的区别"></a>四、NoClassDefFoundError 和ClassNotFoundException的区别</h2><ul><li>前者是个 <strong>Error</strong> 错误，而后者是个 <strong>Exception</strong> 异常，至于错误和异常的区别，请看前面标题</li><li><strong>NoClassDefFoundError</strong> 是一个错误，是指jvm加载类时候，某个类没有找到导致的错误<ul><li>场景：一般是ClassLoader尝试加载类（例如<strong>引用</strong>或者<strong>new对象</strong>时），找不到这个类的定义，此时会报这个错误。如：打成jar包时，丢失某个类</li></ul></li><li><strong>ClassNotFoundException</strong> 是一个异常。编译不会发现问题，但是在项目运行时候或者调用方法发现某个类不存在，发生了异常。<ul><li>场景： <strong>Class.forName()</strong>尝试用<strong>全限量名</strong>去加载某个类时，如果找你不到它的定义。如：项目使用Mysql做为数据库启动时，缺少 JDBC驱动包，报异常</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final关键字详解</title>
      <link href="/2019/01/14/final%E5%85%B3%E9%94%AE%E5%AD%97%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/01/14/final%E5%85%B3%E9%94%AE%E5%AD%97%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、final基本概念"><a href="#一、final基本概念" class="headerlink" title="一、final基本概念"></a>一、final基本概念</h2><ul><li><p>被 final 修饰的<strong>类不可以被继承</strong>（因此 final 不能修饰抽象类）</p></li><li><p>被 final修饰的<strong>方法不可以被重写</strong></p></li><li><p>被 final 修饰的变量不可以被改变，这里有两种情况</p><ul><li>如果被修饰的变量是<strong>基本类型</strong>，则<strong>值是不能做更改</strong>的</li><li>如果被修饰变量是<strong>引用类型</strong>，则不能更改<strong>引用地址</strong>，但是可用更改<strong>被引用的内部内容</strong></li></ul></li></ul><h2 id="二、final的作用"><a href="#二、final的作用" class="headerlink" title="二、final的作用"></a>二、final的作用</h2><ul><li>使用 final 修饰的类或变量，可以清楚的避免因为<strong>意外赋值导致编程错误</strong></li><li>使用 final 修饰的<strong>只读数据</strong>，可以在并发情况下，减少额外的<strong>同步开销</strong>，以及一些防御性的<strong>拷贝</strong>必要</li></ul><h2 id="三、题外话"><a href="#三、题外话" class="headerlink" title="三、题外话"></a>三、题外话</h2><ul><li>如何使得对象不可变？我们知道 final 修饰的对象只是引用地址不可变，而引用的内容不是固定的。那么如何使对象不可变<ol><li>将 class 自身声明为 fnal ，这样别人就不能扩展来绕过限制了</li><li>将所有成员变量定义为 private 和 fnal ，并且不要实现 setter 方法</li><li>通常构造对象时，成员变量使用深度拷贝来初始化，而不是直接赋值，这是一种防御措施，因为你无法确定输入对象不被其他人修改</li><li>如果确实需要实现 getter 方法，或者其他可能会返回内部状态的方法，使用 copy-on-write 原则，创建私有的对象，避免别人操作对象改变原有的属性</li></ol></li><li>final 在什么情况下赋值操作<ul><li>类加载过程中，在准备阶段，final 修饰的类的静态属性直接赋值操作，而不是默认值（基本类型 0 、引用类型为 null ）</li><li>类实例化过程中，final 变量初始化程序定义的值</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> final关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用hexo写文章</title>
      <link href="/2019/01/13/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0/"/>
      <url>/2019/01/13/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备前须知的命令"><a href="#一、准备前须知的命令" class="headerlink" title="一、准备前须知的命令"></a>一、准备前须知的命令</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">清空缓存: hexo clean</span><br><span class="line">编译生成：hexo g 或者 hexo generate</span><br><span class="line">本地启动：hexo server</span><br><span class="line">发布到git仓库：hexo d 或者 hexo deploy</span><br></pre></td></tr></table></figure><h2 id="二、创建文章命令"><a href="#二、创建文章命令" class="headerlink" title="二、创建文章命令"></a>二、创建文章命令</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建文章A：hexo <span class="keyword">new</span> A</span><br><span class="line">A文章的位置：项目目录<span class="regexp">/source/</span>_posts</span><br><span class="line">创建草稿<span class="string">B:</span> hexo <span class="keyword">new</span> draft B </span><br><span class="line">B草稿的位置：项目目录<span class="regexp">/source/</span>_drafts</span><br><span class="line">发布草稿，成为文章：hexo publish B</span><br><span class="line">B文章的位置：项目目录<span class="regexp">/source/</span>_posts</span><br><span class="line">文章和草稿的区别：文章能在项目启动看到，而草稿不能</span><br></pre></td></tr></table></figure><h2 id="三、创建页面"><a href="#三、创建页面" class="headerlink" title="三、创建页面"></a>三、创建页面</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建页面<span class="keyword">A</span>: hexo new page <span class="keyword">A</span></span><br><span class="line"><span class="keyword">A</span>页面的位置：项目目录/page</span><br><span class="line">在网址后面加上<span class="keyword">A</span>/， 即http://localhost:<span class="number">4000</span>/<span class="keyword">A</span>/，就可以看到了</span><br></pre></td></tr></table></figure><h2 id="四、题外话"><a href="#四、题外话" class="headerlink" title="四、题外话"></a>四、题外话</h2><ul><li>很多人往往会把未完成的文章发布出去，就是因为用<code>hexo new A</code>创建文章，直接在页面生成。那么如何把该命令默认设置为草稿呢？<ul><li>打开_config.yml，找到 <strong>default_layout: post</strong>,，把 <strong>post</strong> 改为 <strong>draft</strong> 就可以了</li><li>这样的好处就是避免发布未完成的文章，同时也可以把目前不想上传的文章上传</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
